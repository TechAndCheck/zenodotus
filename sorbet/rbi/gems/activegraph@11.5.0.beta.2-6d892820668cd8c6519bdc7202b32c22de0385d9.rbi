# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activegraph` gem.
# Please instead update this file by running `bin/tapioca gem activegraph`.


# Copied largely from activerecord/lib/active_record/log_subscriber.rb
#
# source://activegraph//lib/rails/generators/migration_helper.rb#1
module ActiveGraph; end

# source://activegraph//lib/active_graph/ansi.rb#2
module ActiveGraph::ANSI; end

# source://activegraph//lib/active_graph/ansi.rb#9
ActiveGraph::ANSI::BLUE = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/ansi.rb#4
ActiveGraph::ANSI::BOLD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/ansi.rb#3
ActiveGraph::ANSI::CLEAR = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/ansi.rb#11
ActiveGraph::ANSI::CYAN = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/ansi.rb#7
ActiveGraph::ANSI::GREEN = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/ansi.rb#10
ActiveGraph::ANSI::MAGENTA = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/ansi.rb#6
ActiveGraph::ANSI::RED = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/ansi.rb#12
ActiveGraph::ANSI::WHITE = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/ansi.rb#8
ActiveGraph::ANSI::YELLOW = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/attribute_set.rb#2
class ActiveGraph::AttributeSet < ::ActiveModel::AttributeSet
  # @return [AttributeSet] a new instance of AttributeSet
  #
  # source://activegraph//lib/active_graph/attribute_set.rb#3
  def initialize(attr_hash, attr_list); end

  # source://activegraph//lib/active_graph/attribute_set.rb#24
  def ==(other); end

  # source://activegraph//lib/active_graph/attribute_set.rb#20
  def keys; end

  # source://activegraph//lib/active_graph/attribute_set.rb#8
  def method_missing(name, *args, **kwargs, &block); end

  private

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/attribute_set.rb#16
  def respond_to_missing?(method, *_arg1); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# To contain any base login for Node/Relationship which
# is external to the main classes
#
# source://activegraph//lib/active_graph/base.rb#4
module ActiveGraph::Base
  include ::ActiveGraph::Transactions
  include ::ActiveGraph::Core::Instrumentable
  include ::ActiveGraph::Core::Querable
  extend ::ActiveGraph::Transactions::ClassMethods
  extend ::ActiveGraph::Core::Instrumentable::ClassMethods
  extend ::ActiveGraph::Core::Querable::ClassMethods
  extend ::ActiveGraph::Core::Schema

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def explicit_session; end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def explicit_session=(obj); end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def last_bookmark; end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def last_bookmark=(obj); end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def tx; end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def tx=(obj); end

  class << self
    # private?
    #
    # source://activegraph//lib/active_graph/base.rb#15
    def driver; end

    # Should support setting driver via config options
    #
    # source://activegraph//lib/active_graph/base.rb#36
    def driver=(driver); end

    # source://activegraph//lib/active_graph/base.rb#25
    def establish_driver; end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def explicit_session; end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def explicit_session=(obj); end

    # source://activegraph//lib/active_graph/base.rb#59
    def label_object(label_name); end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def last_bookmark; end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def last_bookmark=(obj); end

    # source://activegraph//lib/active_graph/base.rb#63
    def logger; end

    # source://activegraph//lib/active_graph/base.rb#51
    def magic_query(*args); end

    # source://activegraph//lib/active_graph/base.rb#46
    def new_query(options = T.unsafe(nil)); end

    # source://activegraph//lib/active_graph/base.rb#21
    def on_establish_driver(&block); end

    # source://activegraph//lib/active_graph/base.rb#29
    def query(*args); end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def tx; end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def tx=(obj); end

    # source://activegraph//lib/active_graph/base.rb#41
    def validating_transaction(&block); end

    private

    # source://activegraph//lib/active_graph/base.rb#69
    def validate_model_schema!; end
  end
end

# source://activegraph//lib/active_graph/class_arguments.rb#2
module ActiveGraph::ClassArguments
  class << self
    # source://activegraph//lib/active_graph/class_arguments.rb#21
    def constantize_argument(class_argument); end

    # @return [Boolean]
    #
    # source://activegraph//lib/active_graph/class_arguments.rb#17
    def node_model?(class_constant); end

    # @return [Boolean]
    #
    # source://activegraph//lib/active_graph/class_arguments.rb#6
    def valid_argument?(class_argument); end

    # source://activegraph//lib/active_graph/class_arguments.rb#11
    def validate_argument!(class_argument, context); end
  end
end

# == Keeps configuration for neo4j
#
# == Configurations keys
#
# source://activegraph//lib/active_graph/config.rb#5
class ActiveGraph::Config
  class << self
    # @param key [Symbol] The key of the config entry value we want
    # @return the the value of a config entry
    #
    # source://activegraph//lib/active_graph/config.rb#68
    def [](key); end

    # Sets the value of a config entry.
    #
    # @param key [Symbol] the key to set the parameter for
    # @param val the value of the parameter.
    #
    # source://activegraph//lib/active_graph/config.rb#62
    def []=(key, val); end

    # source://activegraph//lib/active_graph/config.rb#119
    def association_model_namespace; end

    # source://activegraph//lib/active_graph/config.rb#123
    def association_model_namespace_string; end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # Reads from the default_file if configuration is not set already
    #
    # @return [Hash] the configuration
    #
    # source://activegraph//lib/active_graph/config.rb#34
    def configuration; end

    # @return [Integer] The location of the default configuration file.
    #
    # source://activegraph//lib/active_graph/config.rb#15
    def default_file; end

    # Sets the location of the configuration YAML file and old deletes configurations.
    #
    # @param file_path [String] represent the path to the file.
    #
    # source://activegraph//lib/active_graph/config.rb#21
    def default_file=(file_path); end

    # @return [Hash] the default file loaded by yaml
    #
    # source://activegraph//lib/active_graph/config.rb#28
    def defaults; end

    # Remove the value of a config entry.
    #
    # @param key [Symbol] the key of the configuration entry to delete
    # @return The value of the removed entry.
    #
    # source://activegraph//lib/active_graph/config.rb#80
    def delete(key); end

    # Remove all configuration. This can be useful for testing purpose.
    #
    # @return nil
    #
    # source://activegraph//lib/active_graph/config.rb#87
    def delete_all; end

    # source://activegraph//lib/active_graph/config.rb#129
    def enums_case_sensitive; end

    # source://activegraph//lib/active_graph/config.rb#101
    def fail_on_pending_migrations; end

    # source://activegraph//lib/active_graph/config.rb#72
    def fetch(key, default); end

    # source://activegraph//lib/active_graph/config.rb#105
    def include_root_in_json; end

    # source://activegraph//lib/active_graph/config.rb#110
    def module_handling; end

    # @return [Class] The configured timestamps type (e.g. Integer) or the default DateTime.
    #
    # source://activegraph//lib/active_graph/config.rb#115
    def timestamp_type; end

    # @return [Hash] The config as a hash.
    #
    # source://activegraph//lib/active_graph/config.rb#92
    def to_hash; end

    # @return [String] The config as a YAML
    #
    # source://activegraph//lib/active_graph/config.rb#97
    def to_yaml; end

    # Yields the configuration
    #
    # @example
    #   ActiveGraph::Config.use do |config|
    #   config[:storage_path] = '/var/neo4j'
    #   end
    # @return nil
    # @yield config
    # @yieldparam config [ActiveGraph::Config] - this configuration class
    #
    # source://activegraph//lib/active_graph/config.rb#52
    def use; end
  end
end

# source://activegraph//lib/active_graph/config.rb#6
ActiveGraph::Config::DEFAULT_FILE = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph.rb#0
module ActiveGraph::Core; end

# source://activegraph//lib/active_graph/core/cypher_error.rb#3
class ActiveGraph::Core::CypherError < ::StandardError
  # @return [CypherError] a new instance of CypherError
  #
  # source://activegraph//lib/active_graph/core/cypher_error.rb#6
  def initialize(code = T.unsafe(nil), original_message = T.unsafe(nil), stack_trace = T.unsafe(nil)); end

  # Returns the value of attribute code.
  #
  # source://activegraph//lib/active_graph/core/cypher_error.rb#4
  def code; end

  # Returns the value of attribute original_message.
  #
  # source://activegraph//lib/active_graph/core/cypher_error.rb#4
  def original_message; end

  # Returns the value of attribute stack_trace.
  #
  # source://activegraph//lib/active_graph/core/cypher_error.rb#4
  def stack_trace; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/core/cypher_error.rb#23
    def error_class_from(code); end

    # source://activegraph//lib/active_graph/core/cypher_error.rb#19
    def new_from(code, message, stack_trace = T.unsafe(nil)); end
  end
end

# source://activegraph//lib/active_graph/core/entity.rb#5
module ActiveGraph::Core::Entity
  # source://activegraph//lib/active_graph/core/entity.rb#6
  def properties; end
end

# source://activegraph//lib/active_graph/core/instrumentable.rb#3
module ActiveGraph::Core::Instrumentable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Core::Instrumentable::ClassMethods
end

# source://activegraph//lib/active_graph/core/instrumentable.rb#0
module ActiveGraph::Core::Instrumentable::ClassMethods
  # source://activegraph//lib/active_graph/core/instrumentable.rb#17
  def subscribe_to_query; end

  # source://activegraph//lib/active_graph/core/instrumentable.rb#10
  def subscribe_to_request; end
end

# source://activegraph//lib/active_graph/core/instrumentable.rb#6
ActiveGraph::Core::Instrumentable::EMPTY = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/instrumentable.rb#7
ActiveGraph::Core::Instrumentable::NEWLINE_W_SPACES = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/label.rb#3
class ActiveGraph::Core::Label
  # @return [Label] a new instance of Label
  #
  # source://activegraph//lib/active_graph/core/label.rb#7
  def initialize(name); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/label.rb#109
  def constraint?(property); end

  # source://activegraph//lib/active_graph/core/label.rb#97
  def constraints(_options = T.unsafe(nil)); end

  # Creates a neo4j constraint on a property
  # See http://docs.neo4j.org/chunked/stable/query-constraints.html
  #
  # @example
  #   label = ActiveGraph::Label.create(:person)
  #   label.create_constraint(:name, {type: :unique})
  #
  # source://activegraph//lib/active_graph/core/label.rb#40
  def create_constraint(property, constraints); end

  # source://activegraph//lib/active_graph/core/label.rb#11
  def create_index(*properties, **options); end

  # source://activegraph//lib/active_graph/core/label.rb#51
  def create_uniqueness_constraint(property, options = T.unsafe(nil)); end

  # Drops a neo4j constraint on a property
  # See http://docs.neo4j.org/chunked/stable/query-constraints.html
  #
  # @example
  #   label = ActiveGraph::Label.create(:person)
  #   label.create_constraint(:name, {type: :unique})
  #   label.drop_constraint(:name, {type: :unique})
  #
  # source://activegraph//lib/active_graph/core/label.rb#62
  def drop_constraint(property, constraint); end

  # source://activegraph//lib/active_graph/core/label.rb#22
  def drop_index(property, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/core/label.rb#89
  def drop_indexes; end

  # source://activegraph//lib/active_graph/core/label.rb#79
  def drop_uniqueness_constraint(property, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/label.rb#93
  def index?(property); end

  # source://activegraph//lib/active_graph/core/label.rb#83
  def indexes; end

  # Returns the value of attribute name.
  #
  # source://activegraph//lib/active_graph/core/label.rb#4
  def name; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/label.rb#113
  def uniqueness_constraint?(property); end

  # source://activegraph//lib/active_graph/core/label.rb#103
  def uniqueness_constraints(_options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/core/label.rb#5
  def version?(requirement, &_arg1); end

  private

  # source://activegraph//lib/active_graph/core/label.rb#161
  def drop_constraint42(property, constraint); end

  # source://activegraph//lib/active_graph/core/label.rb#152
  def schema_query(cypher, **params); end

  # source://activegraph//lib/active_graph/core/label.rb#156
  def validate_index_options!(options); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/core/label.rb#140
    def drop_constraints; end

    # source://activegraph//lib/active_graph/core/label.rb#124
    def drop_indexes; end

    # source://activegraph//lib/active_graph/core/label.rb#120
    def indexes; end
  end
end

# source://activegraph//lib/active_graph/core/logging.rb#4
module ActiveGraph::Core::Logging
  class << self
    # source://activegraph//lib/active_graph/core/logging.rb#36
    def active_support_gem_path; end

    # source://activegraph//lib/active_graph/core/logging.rb#6
    def first_external_path_and_line(callstack); end

    # source://activegraph//lib/active_graph/core/logging.rb#19
    def ignored_callstack(path); end

    # source://activegraph//lib/active_graph/core/logging.rb#30
    def neo4j_gem_path; end

    # source://activegraph//lib/active_graph/core/logging.rb#23
    def paths_to_ignore; end
  end
end

# source://activegraph//lib/active_graph/core/node.rb#5
module ActiveGraph::Core::Node
  # source://activegraph//lib/active_graph/core/node.rb#10
  def labels; end

  # source://activegraph//lib/active_graph/core/node.rb#6
  def neo_id; end
end

# source://activegraph//lib/active_graph/core/querable.rb#3
module ActiveGraph::Core::Querable
  extend ::ActiveSupport::Concern
  include ::ActiveGraph::Core::Instrumentable

  mixes_in_class_methods ::ActiveGraph::Core::Instrumentable::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Core::Querable::ClassMethods
end

# source://activegraph//lib/active_graph/core/querable.rb#0
module ActiveGraph::Core::Querable::ClassMethods
  # source://activegraph//lib/active_graph/core/querable.rb#8
  def query(*args); end

  # source://activegraph//lib/active_graph/core/querable.rb#24
  def query_run(query, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/core/querable.rb#19
  def setup_query!(query, options = T.unsafe(nil)); end
end

# Allows for generation of cypher queries via ruby method calls (inspired by ActiveRecord / arel syntax)
#
# Can be used to express cypher queries in ruby nicely, or to more easily generate queries programatically.
#
# Also, queries can be passed around an application to progressively build a query across different concerns
#
# See also the following link for full cypher language documentation:
# http://docs.neo4j.org/chunked/milestone/cypher-query-lang.html
#
# source://activegraph//lib/active_graph/core/query.rb#11
class ActiveGraph::Core::Query
  include ::ActiveGraph::Core::QueryClauses
  include ::ActiveGraph::Core::QueryFindInBatches
  include ::ActiveGraph::Core::QueryExt
  include ::Enumerable

  # @return [Query] a new instance of Query
  #
  # source://activegraph//lib/active_graph/core/query.rb#66
  def initialize(options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/core/query.rb#371
  def &(other); end

  # Allows what's been built of the query so far to be frozen and the rest built anew.  Can be called multiple times in a string of method calls
  #
  # @example
  #   # Creates a query representing the cypher: MATCH (q:Person), r:Car MATCH (p: Person)-->q
  #   Query.new.match(q: Person).match('r:Car').break.match('(p: Person)-->q')
  #
  # source://activegraph//lib/active_graph/core/query.rb#207
  def break; end

  # source://activegraph//lib/active_graph/core/query.rb#171
  def call(*args); end

  # source://activegraph//lib/active_graph/core/query.rb#171
  def call_subquery_end(*args); end

  # source://activegraph//lib/active_graph/core/query.rb#171
  def call_subquery_start(*args); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/query.rb#387
  def clause?(method); end

  # Returns the value of attribute clauses.
  #
  # source://activegraph//lib/active_graph/core/query.rb#17
  def clauses; end

  # Sets the attribute clauses
  #
  # @param value the value to set the attribute clauses to.
  #
  # source://activegraph//lib/active_graph/core/query.rb#17
  def clauses=(_arg0); end

  # source://activegraph//lib/active_graph/core/query.rb#340
  def context; end

  # source://activegraph//lib/active_graph/core/query.rb#378
  def copy; end

  # source://activegraph//lib/active_graph/core/query.rb#256
  def count(var = T.unsafe(nil)); end

  # CREATE clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def create(*args); end

  # CREATE UNIQUE clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def create_unique(*args); end

  # source://activegraph//lib/active_graph/core/query.rb#317
  def cypher(options = T.unsafe(nil)); end

  # DELETE clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def delete(*args); end

  # DETACH DELETE clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def detach_delete(*args); end

  # source://activegraph//lib/active_graph/core/query.rb#261
  def each; end

  # Executes a query without returning the result
  #
  # @raise [ActiveGraph::Server::CypherResponse::ResponseError] Raises errors from neo4j server
  # @return [Boolean] true if successful
  #
  # source://activegraph//lib/active_graph/core/query.rb#273
  def exec; end

  # source://activegraph//lib/active_graph/core/query.rb#73
  def inspect; end

  # LIMIT clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def limit(*args); end

  # MATCH clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def match(*args); end

  # source://activegraph//lib/active_graph/core/query.rb#241
  def match_nodes(hash, optional_match = T.unsafe(nil)); end

  # MERGE clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def merge(*args); end

  # SKIP clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def offset(*args); end

  # ON CREATE SET clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def on_create_set(*args); end

  # ON MATCH SET clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def on_match_set(*args); end

  # OPTIONAL MATCH clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def optional_match(*args); end

  # source://activegraph//lib/active_graph/core/query.rb#250
  def optional_match_nodes(hash); end

  # ORDER BY clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def order(*args); end

  # ORDER BY clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def order_by(*args); end

  # source://activegraph//lib/active_graph/core/query.rb#344
  def parameters; end

  # Allows for the specification of values for params specified in query
  #
  # @example
  #   # Creates a query representing the cypher: MATCH (q: Person {id: $id})
  #   # Calls to params don't affect the cypher query generated, but the params will be
  #   # Passed down when the query is made
  #   Query.new.match('(q: Person {id: $id})').params(id: 12)
  #
  # source://activegraph//lib/active_graph/core/query.rb#218
  def params(args); end

  # source://activegraph//lib/active_graph/core/query.rb#349
  def partitioned_clauses; end

  # Return the specified columns as an array.
  # If one column is specified, a one-dimensional array is returned with the values of that column
  # If two columns are specified, a n-dimensional array is returned with the values of those columns
  #
  # @example
  #   Query.new.match(n: :Person).return(p: :name}.pluck(p: :name) # => Array of names
  # @example
  #   Query.new.match(n: :Person).return(p: :name}.pluck('p, DISTINCT p.name') # => Array of [node, name] pairs
  #
  # source://activegraph//lib/active_graph/core/query.rb#288
  def pluck(*columns); end

  # source://activegraph//lib/active_graph/core/query.rb#336
  def pretty_cypher; end

  # source://activegraph//lib/active_graph/core/query.rb#353
  def print_cypher; end

  # source://activegraph//lib/active_graph/core/query.rb#237
  def raise_if_cypher_error!(response); end

  # REMOVE clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def remove(*args); end

  # Clears out previous order clauses and allows only for those specified by args
  #
  # source://activegraph//lib/active_graph/core/query.rb#182
  def reorder(*args); end

  # source://activegraph//lib/active_graph/core/query.rb#231
  def response; end

  # RETURN clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def return(*args); end

  # source://activegraph//lib/active_graph/core/query.rb#302
  def return_query(columns); end

  # SET clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def set(*args); end

  # Works the same as the #set method, but when given a nested array it will set properties rather than setting entire objects
  #
  # @example
  #   # Creates a query representing the cypher: MATCH (n:Person) SET n.age = 19
  #   Query.new.match(n: :Person).set_props(n: {age: 19})
  #
  # source://activegraph//lib/active_graph/core/query.rb#199
  def set_props(*args); end

  # SKIP clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def skip(*args); end

  # START clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def start(*args); end

  # source://activegraph//lib/active_graph/core/query.rb#317
  def to_cypher(options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/core/query.rb#171
  def union(*args); end

  # Returns a CYPHER query specifying the union of the callee object's query and the argument's query
  #
  # @example
  #   # Generates cypher: MATCH (n:Person) UNION MATCH (o:Person) WHERE o.age = 10
  #   q = ActiveGraph::Core::Query.new.match(o: :Person).where(o: {age: 10})
  #   result = ActiveGraph::Core::Query.new.match(n: :Person).union_cypher(q)
  # @param other [Query] Second half of UNION
  # @param options [Hash] Specify {all: true} to use UNION ALL
  # @return [String] Resulting UNION cypher query string
  #
  # source://activegraph//lib/active_graph/core/query.rb#367
  def union_cypher(other, options = T.unsafe(nil)); end

  # UNWIND clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def unwind(*args); end

  # source://activegraph//lib/active_graph/core/query.rb#222
  def unwrapped; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/query.rb#227
  def unwrapped?; end

  # USING clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def using(*args); end

  # WHERE clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def where(*args); end

  # Works the same as the #where method, but the clause is surrounded by a
  # Cypher NOT() function
  #
  # source://activegraph//lib/active_graph/core/query.rb#191
  def where_not(*args); end

  # WITH clause
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def with(*args); end

  # WITH clause with DISTINCT specified
  #
  # @return [Query]
  #
  # source://activegraph//lib/active_graph/core/query.rb#171
  def with_distinct(*args); end

  protected

  # Returns the value of attribute _params.
  #
  # source://activegraph//lib/active_graph/core/query.rb#394
  def _params; end

  # Sets the attribute _params
  #
  # @param value the value to set the attribute _params to.
  #
  # source://activegraph//lib/active_graph/core/query.rb#394
  def _params=(_arg0); end

  # source://activegraph//lib/active_graph/core/query.rb#396
  def add_clauses(clauses); end

  # Returns the value of attribute options.
  #
  # source://activegraph//lib/active_graph/core/query.rb#394
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://activegraph//lib/active_graph/core/query.rb#394
  def options=(_arg0); end

  # source://activegraph//lib/active_graph/core/query.rb#400
  def remove_clause_class(clause_class); end

  private

  # source://activegraph//lib/active_graph/core/query.rb#406
  def build_deeper_query(clause_class, args = T.unsafe(nil), options = T.unsafe(nil)); end

  # SHOULD BE DEPRECATED
  #
  # source://activegraph//lib/active_graph/core/query.rb#476
  def merge_params; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # Returns the value of attribute pretty_cypher.
    #
    # source://activegraph//lib/active_graph/core/query.rb#63
    def pretty_cypher; end

    # Sets the attribute pretty_cypher
    #
    # @param value the value to set the attribute pretty_cypher to.
    #
    # source://activegraph//lib/active_graph/core/query.rb#63
    def pretty_cypher=(_arg0); end
  end
end

# source://activegraph//lib/active_graph/core/query.rb#162
ActiveGraph::Core::Query::BREAK_METHODS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/core/query.rb#165
ActiveGraph::Core::Query::CLAUSES = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/core/query.rb#164
ActiveGraph::Core::Query::CLAUSIFY_CLAUSE = T.let(T.unsafe(nil), Proc)

# source://activegraph//lib/active_graph/core/query.rb#15
ActiveGraph::Core::Query::DEFINED_CLAUSES = T.let(T.unsafe(nil), Hash)

# Returns a CYPHER query string from the object query representation
#
# @example
#   Query.new.match(p: :Person).where(p: {age: 30})  # => "MATCH (p:Person) WHERE p.age = 30
# @return [String] Resulting cypher query string
#
# source://activegraph//lib/active_graph/core/query.rb#314
ActiveGraph::Core::Query::EMPTY = T.let(T.unsafe(nil), String)

# DETACH DELETE clause
#
# @return [Query]
#
# source://activegraph//lib/active_graph/core/query.rb#161
ActiveGraph::Core::Query::METHODS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/core/query.rb#315
ActiveGraph::Core::Query::NEWLINE = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query.rb#19
class ActiveGraph::Core::Query::Parameters
  # @return [Parameters] a new instance of Parameters
  #
  # source://activegraph//lib/active_graph/core/query.rb#20
  def initialize(hash = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/core/query.rb#32
  def add_param(key, value); end

  # source://activegraph//lib/active_graph/core/query.rb#42
  def add_params(params); end

  # source://activegraph//lib/active_graph/core/query.rb#28
  def copy; end

  # source://activegraph//lib/active_graph/core/query.rb#38
  def remove_param(key); end

  # source://activegraph//lib/active_graph/core/query.rb#24
  def to_hash; end

  private

  # source://activegraph//lib/active_graph/core/query.rb#50
  def free_param_key(key); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query.rb#413
class ActiveGraph::Core::Query::PartitionedClauses
  include ::Enumerable

  # @return [PartitionedClauses] a new instance of PartitionedClauses
  #
  # source://activegraph//lib/active_graph/core/query.rb#414
  def initialize(clauses); end

  # source://activegraph//lib/active_graph/core/query.rb#421
  def each; end

  # source://activegraph//lib/active_graph/core/query.rb#427
  def generate_partitioning!; end

  private

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/query.rb#454
  def clause_is_order_or_limit_directly_following_with_or_order?(clause); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/query.rb#462
  def clause_is_with_following_order_or_limit?(clause); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/query.rb#446
  def fresh_partition?; end

  # source://activegraph//lib/active_graph/core/query.rb#450
  def second_to_last; end

  class << self
    # @return [Boolean]
    #
    # source://activegraph//lib/active_graph/core/query.rb#468
    def clause_is_order_or_limit?(clause); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_builder.rb#3
class ActiveGraph::Core::QueryBuilder
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/core/query_builder.rb#6
    def query(*args); end
  end
end

# source://activegraph//lib/active_graph/core/query_builder.rb#4
class ActiveGraph::Core::QueryBuilder::Query < ::Struct
  # Returns the value of attribute context
  #
  # @return [Object] the current value of context
  def context; end

  # Sets the attribute context
  #
  # @param value [Object] the value to set the attribute context to.
  # @return [Object] the newly set value
  def context=(_); end

  # Returns the value of attribute cypher
  #
  # @return [Object] the current value of cypher
  def cypher; end

  # Sets the attribute cypher
  #
  # @param value [Object] the value to set the attribute cypher to.
  # @return [Object] the newly set value
  def cypher=(_); end

  # Returns the value of attribute parameters
  #
  # @return [Object] the current value of parameters
  def parameters; end

  # Sets the attribute parameters
  #
  # @param value [Object] the value to set the attribute parameters to.
  # @return [Object] the newly set value
  def parameters=(_); end

  # Returns the value of attribute pretty_cypher
  #
  # @return [Object] the current value of pretty_cypher
  def pretty_cypher; end

  # Sets the attribute pretty_cypher
  #
  # @param value [Object] the value to set the attribute pretty_cypher to.
  # @return [Object] the newly set value
  def pretty_cypher=(_); end

  class << self
    def [](*_arg0); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#3
module ActiveGraph::Core::QueryClauses; end

# source://activegraph//lib/active_graph/core/query_clauses.rb#4
class ActiveGraph::Core::QueryClauses::ArgError < ::StandardError
  # @return [ArgError] a new instance of ArgError
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#6
  def initialize(arg_part = T.unsafe(nil)); end

  # Returns the value of attribute arg_part.
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#5
  def arg_part; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#360
class ActiveGraph::Core::QueryClauses::CallClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#363
  def from_string(value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#372
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#368
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#361
ActiveGraph::Core::QueryClauses::CallClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#400
class ActiveGraph::Core::QueryClauses::CallSubqueryEndClause < ::ActiveGraph::Core::QueryClauses::Clause
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#404
    def to_cypher(_clauses, pretty = T.unsafe(nil)); end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#401
ActiveGraph::Core::QueryClauses::CallSubqueryEndClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#378
class ActiveGraph::Core::QueryClauses::CallSubqueryStartClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#381
  def from_nilclass(_value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#385
  def from_string(value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#394
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#390
    def to_cypher(clauses, pretty = T.unsafe(nil)); end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#379
ActiveGraph::Core::QueryClauses::CallSubqueryStartClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#12
class ActiveGraph::Core::QueryClauses::Clause
  # @return [Clause] a new instance of Clause
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#21
  def initialize(arg, params, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#102
  def _nested_value_hash?(value); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#98
  def _use_key_for_var?(value, prefer); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#170
  def add_param(key, value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#175
  def add_params(keys_and_values); end

  # Returns the value of attribute arg.
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#18
  def arg; end

  # Sets the attribute arg
  #
  # @param value the value to set the attribute arg to.
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#18
  def arg=(_arg0); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#106
  def attributes_from_key_and_value(_key, value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#44
  def from_hash(value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#52
  def from_string(value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#83
  def label_from_key_and_value(key, value, prefer = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#56
  def node_from_key_and_value(key, value, options = T.unsafe(nil)); end

  # Returns the value of attribute options.
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#19
  def options; end

  # Returns the value of attribute param_vars_added.
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#19
  def param_vars_added; end

  # Returns the value of attribute params.
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#18
  def params; end

  # Sets the attribute params
  #
  # @param value the value to set the attribute params to.
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#18
  def params=(_arg0); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#28
  def value; end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#73
  def var_from_key_and_value(key, value, prefer = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#202
  def array_value?(value, is_set); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#217
  def attributes_string(attributes, prefix = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#206
  def format_label(label_arg); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#182
  def key_value_string(key, value, previous_keys = T.unsafe(nil), is_set = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#197
  def range_key_value_string(key, value, previous_keys, param); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#156
    def clause_color; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#152
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#144
    def clause_string(clauses, pretty); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#136
    def final_keyword(pretty); end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#126
    def from_arg(arg, params, options = T.unsafe(nil)); end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#121
    def from_args(args, params, options = T.unsafe(nil)); end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#160
    def from_key_and_single_value(key, value); end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#113
    def keyword; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#117
    def keyword_downcase; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#165
    def paramaterize_key!(key); end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#130
    def to_cypher(clauses, pretty = T.unsafe(nil)); end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#15
ActiveGraph::Core::QueryClauses::Clause::AND = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#14
ActiveGraph::Core::QueryClauses::Clause::COMMA_SPACE = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#16
ActiveGraph::Core::QueryClauses::Clause::PRETTY_NEW_LINE = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#13
ActiveGraph::Core::QueryClauses::Clause::UNDERSCORE = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#476
class ActiveGraph::Core::QueryClauses::CreateClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#487
  def from_hash(hash); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#497
  def from_key_and_value(key, value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#479
  def from_string(value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#483
  def from_symbol(value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#510
    def clause_color; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#506
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#502
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#477
ActiveGraph::Core::QueryClauses::CreateClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#516
class ActiveGraph::Core::QueryClauses::CreateUniqueClause < ::ActiveGraph::Core::QueryClauses::CreateClause
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#517
ActiveGraph::Core::QueryClauses::CreateUniqueClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#534
class ActiveGraph::Core::QueryClauses::DeleteClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#537
  def from_symbol(value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#550
    def clause_color; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#546
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#542
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#535
ActiveGraph::Core::QueryClauses::DeleteClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#556
class ActiveGraph::Core::QueryClauses::DetachDeleteClause < ::ActiveGraph::Core::QueryClauses::DeleteClause
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#557
ActiveGraph::Core::QueryClauses::DetachDeleteClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#591
class ActiveGraph::Core::QueryClauses::LimitClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#600
  def from_integer(value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#604
  def from_nilclass(_value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#594
  def from_string(value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#609
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#592
ActiveGraph::Core::QueryClauses::LimitClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#410
class ActiveGraph::Core::QueryClauses::MatchClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#417
  def from_key_and_value(key, value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#413
  def from_symbol(value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#426
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#422
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#411
ActiveGraph::Core::QueryClauses::MatchClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#520
class ActiveGraph::Core::QueryClauses::MergeClause < ::ActiveGraph::Core::QueryClauses::CreateClause
  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#524
    def clause_color; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#528
    def clause_join; end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#521
ActiveGraph::Core::QueryClauses::MergeClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#684
class ActiveGraph::Core::QueryClauses::OnCreateSetClause < ::ActiveGraph::Core::QueryClauses::SetClause
  # @return [OnCreateSetClause] a new instance of OnCreateSetClause
  #
  # source://activegraph//lib/active_graph/core/query_clauses.rb#687
  def initialize(*args); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#685
ActiveGraph::Core::QueryClauses::OnCreateSetClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#693
class ActiveGraph::Core::QueryClauses::OnMatchSetClause < ::ActiveGraph::Core::QueryClauses::OnCreateSetClause
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#694
ActiveGraph::Core::QueryClauses::OnMatchSetClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#432
class ActiveGraph::Core::QueryClauses::OptionalMatchClause < ::ActiveGraph::Core::QueryClauses::MatchClause
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#433
ActiveGraph::Core::QueryClauses::OptionalMatchClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#560
class ActiveGraph::Core::QueryClauses::OrderClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#567
  def from_key_and_value(key, value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#563
  def from_symbol(value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#585
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#581
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#561
ActiveGraph::Core::QueryClauses::OrderClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#697
class ActiveGraph::Core::QueryClauses::RemoveClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#700
  def from_key_and_value(key, value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#722
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#718
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#698
ActiveGraph::Core::QueryClauses::RemoveClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#753
class ActiveGraph::Core::QueryClauses::ReturnClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#760
  def from_key_and_value(key, value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#756
  def from_symbol(value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#778
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#774
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#754
ActiveGraph::Core::QueryClauses::ReturnClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#649
class ActiveGraph::Core::QueryClauses::SetClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#652
  def from_key_and_value(key, value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#678
    def clause_color; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#674
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#670
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#650
ActiveGraph::Core::QueryClauses::SetClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#621
class ActiveGraph::Core::QueryClauses::SkipClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#630
  def from_integer(value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#624
  def from_string(value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#637
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#622
ActiveGraph::Core::QueryClauses::SkipClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#234
class ActiveGraph::Core::QueryClauses::StartClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#241
  def from_key_and_value(key, value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#237
  def from_symbol(value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#255
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#251
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#235
ActiveGraph::Core::QueryClauses::StartClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#261
class ActiveGraph::Core::QueryClauses::UnionClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#264
  def from_array(args); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#279
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#275
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#269
    def from_args(args, params, options = T.unsafe(nil)); end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#262
ActiveGraph::Core::QueryClauses::UnionClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#728
class ActiveGraph::Core::QueryClauses::UnwindClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#731
  def from_key_and_value(key, value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#747
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#743
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#729
ActiveGraph::Core::QueryClauses::UnwindClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#462
class ActiveGraph::Core::QueryClauses::UsingClause < ::ActiveGraph::Core::QueryClauses::Clause
  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#470
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#466
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#463
ActiveGraph::Core::QueryClauses::UsingClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#285
class ActiveGraph::Core::QueryClauses::WhereClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#290
  def from_key_and_value(key, value, previous_keys = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/core/query_clauses.rb#316
  def hash_key_value_string(key, value, previous_keys); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#327
  def regexp_key_value_string(key, value, previous_keys); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#309
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#301
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#341
    def from_args(args, params, options = T.unsafe(nil)); end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#286
ActiveGraph::Core::QueryClauses::WhereClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#288
ActiveGraph::Core::QueryClauses::WhereClause::PAREN_SURROUND_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activegraph//lib/active_graph/core/query_clauses.rb#436
class ActiveGraph::Core::QueryClauses::WithClause < ::ActiveGraph::Core::QueryClauses::Clause
  # source://activegraph//lib/active_graph/core/query_clauses.rb#443
  def from_key_and_value(key, value); end

  # source://activegraph//lib/active_graph/core/query_clauses.rb#439
  def from_symbol(value); end

  class << self
    # source://activegraph//lib/active_graph/core/query_clauses.rb#452
    def clause_join; end

    # source://activegraph//lib/active_graph/core/query_clauses.rb#448
    def clause_strings(clauses); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#437
ActiveGraph::Core::QueryClauses::WithClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_clauses.rb#458
class ActiveGraph::Core::QueryClauses::WithDistinctClause < ::ActiveGraph::Core::QueryClauses::WithClause
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/query_clauses.rb#459
ActiveGraph::Core::QueryClauses::WithDistinctClause::KEYWORD = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/core/query_ext.rb#3
module ActiveGraph::Core::QueryExt
  # Creates a ActiveGraph::Node::Query::QueryProxy object that builds off of a Core::Query object.
  #
  # @param model [Class] An Node model to be used as the start of a new QueryuProxy chain
  # @param var [Symbol] The variable to be used to refer to the object from within the new QueryProxy
  # @param optional [Boolean] Indicate whether the new QueryProxy will use MATCH or OPTIONAL MATCH.
  # @return [ActiveGraph::Node::Query::QueryProxy] A QueryProxy object.
  #
  # source://activegraph//lib/active_graph/core/query_ext.rb#10
  def proxy_as(model, var, optional = T.unsafe(nil)); end

  # Calls proxy_as with `optional` set true. This doesn't offer anything different from calling `proxy_as` directly but it may be more readable.
  #
  # source://activegraph//lib/active_graph/core/query_ext.rb#16
  def proxy_as_optional(model, var); end

  # For instances where you turn a QueryProxy into a Query and then back to a QueryProxy with `#proxy_as`
  #
  # source://activegraph//lib/active_graph/core/query_ext.rb#21
  def proxy_chain_level; end

  # For instances where you turn a QueryProxy into a Query and then back to a QueryProxy with `#proxy_as`
  #
  # source://activegraph//lib/active_graph/core/query_ext.rb#21
  def proxy_chain_level=(_arg0); end
end

# source://activegraph//lib/active_graph/core/query_find_in_batches.rb#3
module ActiveGraph::Core::QueryFindInBatches
  # source://activegraph//lib/active_graph/core/query_find_in_batches.rb#27
  def find_each(*args, &block); end

  # source://activegraph//lib/active_graph/core/query_find_in_batches.rb#4
  def find_in_batches(node_var, prop_var, options = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/core/query_find_in_batches.rb#38
  def primary_key_offset(last_record, node_var, prop_var); end

  # source://activegraph//lib/active_graph/core/query_find_in_batches.rb#33
  def validate_find_in_batches_options!(options); end
end

# source://activegraph//lib/active_graph/core/record.rb#3
module ActiveGraph::Core::Record
  # source://activegraph//lib/active_graph/core/record.rb#14
  def [](key); end

  # source://activegraph//lib/active_graph/core/record.rb#10
  def first; end

  # source://activegraph//lib/active_graph/core/record.rb#18
  def to_h; end

  # source://activegraph//lib/active_graph/core/record.rb#6
  def values; end

  # Sets the attribute wrap
  #
  # @param value the value to set the attribute wrap to.
  #
  # source://activegraph//lib/active_graph/core/record.rb#4
  def wrap=(_arg0); end

  private

  # source://activegraph//lib/active_graph/core/record.rb#24
  def wrap(value); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/record.rb#41
  def wrap?; end
end

# source://activegraph//lib/active_graph/core/result.rb#3
module ActiveGraph::Core::Result
  # source://activegraph//lib/active_graph/core/result.rb#14
  def each(&block); end

  # source://activegraph//lib/active_graph/core/result.rb#6
  def keys; end

  # source://activegraph//lib/active_graph/core/result.rb#24
  def store; end

  # To avoid to_a on Neo4j::Driver::Result as that one does not call the above block
  #
  # source://activegraph//lib/active_graph/core/result.rb#20
  def to_a; end

  # Sets the attribute wrap
  #
  # @param value the value to set the attribute wrap to.
  #
  # source://activegraph//lib/active_graph/core/result.rb#4
  def wrap=(_arg0); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/result.rb#10
  def wrap?; end
end

# source://activegraph//lib/active_graph/core/schema.rb#3
module ActiveGraph::Core::Schema
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/schema.rb#53
  def constraint_owned?(record); end

  # source://activegraph//lib/active_graph/core/schema.rb#32
  def constraints; end

  # source://activegraph//lib/active_graph/core/schema.rb#21
  def indexes; end

  # source://activegraph//lib/active_graph/core/schema.rb#25
  def normalize(result, *extra); end

  # source://activegraph//lib/active_graph/core/schema.rb#46
  def raw_indexes; end

  # source://activegraph//lib/active_graph/core/schema.rb#9
  def version; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/core/schema.rb#17
  def version?(requirement); end

  private

  # source://activegraph//lib/active_graph/core/schema.rb#79
  def com_sep(properties, prefix = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/core/schema.rb#75
  def constraint_cypher(label, properties); end

  # source://activegraph//lib/active_graph/core/schema.rb#63
  def constraint_filter(record); end

  # source://activegraph//lib/active_graph/core/schema.rb#83
  def definition(row, template); end

  # source://activegraph//lib/active_graph/core/schema.rb#71
  def index_cypher(label, properties); end

  # source://activegraph//lib/active_graph/core/schema.rb#67
  def index_cypher_v3(label, properties); end

  # source://activegraph//lib/active_graph/core/schema.rb#88
  def label(row); end

  # source://activegraph//lib/active_graph/core/schema.rb#59
  def major; end

  # source://activegraph//lib/active_graph/core/schema.rb#92
  def properties(row); end

  # source://activegraph//lib/active_graph/core/schema.rb#40
  def raw_constraints; end
end

# source://activegraph//lib/active_graph/core/schema.rb#4
ActiveGraph::Core::Schema::FILTER = T.let(T.unsafe(nil), Hash)

# source://activegraph//lib/active_graph/core/schema_errors.rb#3
module ActiveGraph::Core::SchemaErrors; end

# source://activegraph//lib/active_graph/core/schema_errors.rb#6
class ActiveGraph::Core::SchemaErrors::ConstraintAlreadyExistsError < ::ActiveGraph::Core::CypherError
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/schema_errors.rb#4
class ActiveGraph::Core::SchemaErrors::ConstraintValidationFailedError < ::ActiveGraph::Core::CypherError
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/schema_errors.rb#8
class ActiveGraph::Core::SchemaErrors::IndexAlreadyExistsError < ::ActiveGraph::Core::CypherError
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/core/wrappable.rb#3
module ActiveGraph::Core::Wrappable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Core::Wrappable::ClassMethods

  # source://activegraph//lib/active_graph/core/wrappable.rb#6
  def wrap; end
end

# source://activegraph//lib/active_graph/core/wrappable.rb#0
module ActiveGraph::Core::Wrappable::ClassMethods
  # source://activegraph//lib/active_graph/core/wrappable.rb#16
  def clear_wrapper_callback; end

  # source://activegraph//lib/active_graph/core/wrappable.rb#20
  def wrap(node); end

  # source://activegraph//lib/active_graph/core/wrappable.rb#11
  def wrapper_callback(&proc); end
end

# source://activegraph//lib/active_graph/error.rb#28
class ActiveGraph::DangerousAttributeError < ::ScriptError; end

# source://activegraph//lib/active_graph/error.rb#20
class ActiveGraph::DeprecatedSchemaDefinitionError < ::ActiveGraph::Error; end

# Neo4j.rb Errors
# Generic Neo4j.rb exception class.
#
# source://activegraph//lib/active_graph/error.rb#4
class ActiveGraph::Error < ::StandardError; end

# source://activegraph//lib/rails/generators/migration_helper.rb#2
module ActiveGraph::Generators; end

# source://activegraph//lib/rails/generators/migration_helper.rb#53
class ActiveGraph::Generators::ActiveModel < ::Rails::Generators::ActiveModel
  # source://activegraph//lib/rails/generators/migration_helper.rb#82
  def destroy; end

  # source://activegraph//lib/rails/generators/migration_helper.rb#78
  def errors; end

  # source://activegraph//lib/rails/generators/migration_helper.rb#70
  def save; end

  # source://activegraph//lib/rails/generators/migration_helper.rb#74
  def update_attributes(params = T.unsafe(nil)); end

  class << self
    # source://activegraph//lib/rails/generators/migration_helper.rb#54
    def all(klass); end

    # source://activegraph//lib/rails/generators/migration_helper.rb#62
    def build(klass, params = T.unsafe(nil)); end

    # source://activegraph//lib/rails/generators/migration_helper.rb#58
    def find(klass, params = T.unsafe(nil)); end
  end
end

# source://activegraph//lib/rails/generators/migration_helper.rb#89
module ActiveGraph::Generators::GeneratedAttribute
  # source://activegraph//lib/rails/generators/migration_helper.rb#90
  def type_class; end
end

# source://activegraph//lib/rails/generators/migration_helper.rb#6
module ActiveGraph::Generators::MigrationHelper
  extend ::ActiveSupport::Concern

  # source://activegraph//lib/rails/generators/migration_helper.rb#9
  def base_migration_file_name(file_name, prefix = T.unsafe(nil)); end

  # Stolen from https://github.com/rails/rails/blob/30767f980faa2d7a0531774ddf040471db74a23b/railties/lib/rails/generators/migration.rb#L20
  #
  # source://activegraph//lib/rails/generators/migration_helper.rb#22
  def existing_migration(dirname, file_name); end

  # source://activegraph//lib/rails/generators/migration_helper.rb#13
  def migration_file_name(file_name, prefix = T.unsafe(nil)); end

  # source://activegraph//lib/rails/generators/migration_helper.rb#17
  def migration_lookup_at(dirname); end

  # :revoke happens when task is invoked with `rails destroy model ModelName`
  #
  # source://activegraph//lib/rails/generators/migration_helper.rb#27
  def migration_template(template_name, prefix = T.unsafe(nil)); end
end

# source://activegraph//lib/active_graph/error.rb#24
class ActiveGraph::InvalidParameterError < ::ActiveGraph::Error; end

# source://activegraph//lib/active_graph/error.rb#22
class ActiveGraph::InvalidPropertyOptionsError < ::ActiveGraph::Error; end

# source://activegraph//lib/active_graph/error.rb#32
class ActiveGraph::IrreversibleMigration < ::ActiveGraph::MigrationError; end

# source://activegraph//lib/active_graph/lazy_attribute_hash.rb#2
class ActiveGraph::LazyAttributeHash < ::ActiveModel::LazyAttributeHash
  # @return [LazyAttributeHash] a new instance of LazyAttributeHash
  #
  # source://activegraph//lib/active_graph/lazy_attribute_hash.rb#3
  def initialize(values, attr_list); end

  private

  # we are using with_cast_value here because at the moment casting is being managed by
  # Neo4j and not in ActiveModel
  #
  # source://activegraph//lib/active_graph/lazy_attribute_hash.rb#32
  def assign_default_value(name); end

  # source://activegraph//lib/active_graph/lazy_attribute_hash.rb#15
  def marshal_load(values); end

  # source://activegraph//lib/active_graph/lazy_attribute_hash.rb#19
  def process_default_attributes(attr_list); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/migration.rb#2
class ActiveGraph::Migration
  # source://activegraph//lib/active_graph/migration.rb#15
  def default_path; end

  # source://activegraph//lib/active_graph/migration.rb#19
  def joined_path(path); end

  # source://activegraph//lib/active_graph/migration.rb#3
  def migrate; end

  # source://activegraph//lib/active_graph/migration.rb#7
  def output(string = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/migration.rb#11
  def print_output(string); end

  # source://activegraph//lib/active_graph/migration.rb#27
  def query(*args); end

  # source://activegraph//lib/active_graph/migration.rb#23
  def setup; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/migration.rb#31
class ActiveGraph::Migration::AddIdProperty < ::ActiveGraph::Migration
  include ::ActiveGraph::Migrations::Helpers::IdProperty

  # @return [AddIdProperty] a new instance of AddIdProperty
  #
  # source://activegraph//lib/active_graph/migration.rb#36
  def initialize(path = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/migration.rb#58
  def execute(*args); end

  # source://activegraph//lib/active_graph/migration.rb#40
  def migrate; end

  # Returns the value of attribute models_filename.
  #
  # source://activegraph//lib/active_graph/migration.rb#34
  def models_filename; end

  # source://activegraph//lib/active_graph/migration.rb#54
  def query(*args); end

  # source://activegraph//lib/active_graph/migration.rb#62
  def setup; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/error.rb#31
class ActiveGraph::MigrationError < ::ActiveGraph::Error; end

# source://activegraph//lib/active_graph/migrations.rb#2
module ActiveGraph::Migrations
  class << self
    # source://activegraph//lib/active_graph/migrations.rb#4
    def check_for_pending_migrations!; end

    # Returns the value of attribute currently_running_migrations.
    #
    # source://activegraph//lib/active_graph/migrations.rb#12
    def currently_running_migrations; end

    # Sets the attribute currently_running_migrations
    #
    # @param value the value to set the attribute currently_running_migrations to.
    #
    # source://activegraph//lib/active_graph/migrations.rb#12
    def currently_running_migrations=(_arg0); end

    # source://activegraph//lib/active_graph/migrations.rb#14
    def maintain_test_schema!; end
  end
end

# source://activegraph//lib/active_graph/migrations/base.rb#3
class ActiveGraph::Migrations::Base
  include ::ActiveGraph::Migrations::Helpers
  include ::ActiveGraph::Migrations::Helpers::Schema
  include ::ActiveGraph::Migrations::Helpers::IdProperty
  include ::ActiveGraph::Migrations::Helpers::Relationships
  extend ::ActiveGraph::Migrations::Helpers::ClassMethods

  # @return [Base] a new instance of Base
  #
  # source://activegraph//lib/active_graph/migrations/base.rb#9
  def initialize(migration_id, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/migrations/base.rb#24
  def down; end

  # source://activegraph//lib/active_graph/migrations/base.rb#14
  def migrate(method); end

  # source://activegraph//lib/active_graph/migrations/base.rb#20
  def up; end

  private

  # source://activegraph//lib/active_graph/migrations/base.rb#59
  def handle_migration_error!(e); end

  # source://activegraph//lib/active_graph/migrations/base.rb#72
  def log_queries; end

  # source://activegraph//lib/active_graph/migrations/base.rb#42
  def migrate_down; end

  # source://activegraph//lib/active_graph/migrations/base.rb#30
  def migrate_up; end

  # source://activegraph//lib/active_graph/migrations/base.rb#68
  def migration_transaction(&block); end

  # source://activegraph//lib/active_graph/migrations/base.rb#55
  def run_migration(direction); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/migrations/check_pending.rb#3
class ActiveGraph::Migrations::CheckPending
  # @return [CheckPending] a new instance of CheckPending
  #
  # source://activegraph//lib/active_graph/migrations/check_pending.rb#4
  def initialize(app); end

  # source://activegraph//lib/active_graph/migrations/check_pending.rb#9
  def call(env); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/migrations/helpers.rb#3
module ActiveGraph::Migrations::Helpers
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Migrations::Helpers::ClassMethods

  # source://activegraph//lib/active_graph/migrations/helpers.rb#29
  def add_label(label, new_label); end

  # source://activegraph//lib/active_graph/migrations/helpers.rb#25
  def add_labels(label, new_labels); end

  # source://activegraph//lib/active_graph/migrations/helpers.rb#19
  def drop_nodes(label); end

  # source://activegraph//lib/active_graph/migrations/helpers.rb#45
  def execute(string, params = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/migrations/helpers.rb#62
  def query(*args); end

  # source://activegraph//lib/active_graph/migrations/helpers.rb#37
  def remove_label(label, label_to_remove); end

  # source://activegraph//lib/active_graph/migrations/helpers.rb#33
  def remove_labels(label, labels_to_remove); end

  # source://activegraph//lib/active_graph/migrations/helpers.rb#9
  def remove_property(label, property); end

  # source://activegraph//lib/active_graph/migrations/helpers.rb#41
  def rename_label(old_label, new_label); end

  # source://activegraph//lib/active_graph/migrations/helpers.rb#13
  def rename_property(label, old_property, new_property); end

  # source://activegraph//lib/active_graph/migrations/helpers.rb#58
  def say(message, subitem = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/migrations/helpers.rb#49
  def say_with_time(message); end

  protected

  # source://activegraph//lib/active_graph/migrations/helpers.rb#68
  def output(*string_format); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/migrations/helpers.rb#72
  def transactions?; end

  private

  # source://activegraph//lib/active_graph/migrations/helpers.rb#82
  def by_label(label, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/migrations/helpers.rb#78
  def property_exists?(label, property); end
end

# source://activegraph//lib/active_graph/migrations/helpers.rb#87
module ActiveGraph::Migrations::Helpers::ClassMethods
  # source://activegraph//lib/active_graph/migrations/helpers.rb#88
  def disable_transactions!; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/migrations/helpers.rb#92
  def transaction?; end
end

# source://activegraph//lib/active_graph/migrations/helpers/id_property.rb#4
module ActiveGraph::Migrations::Helpers::IdProperty
  extend ::ActiveSupport::Concern

  # source://activegraph//lib/active_graph/migrations/helpers/id_property.rb#7
  def populate_id_property(label); end

  protected

  # source://activegraph//lib/active_graph/migrations/helpers/id_property.rb#58
  def default_max_per_batch; end

  # source://activegraph//lib/active_graph/migrations/helpers/id_property.rb#29
  def id_batch_set(label, id_property, new_ids, count); end

  # source://activegraph//lib/active_graph/migrations/helpers/id_property.rb#25
  def idless_count(label, id_property); end

  # source://activegraph//lib/active_graph/migrations/helpers/id_property.rb#62
  def new_id_for(model); end

  # source://activegraph//lib/active_graph/migrations/helpers/id_property.rb#46
  def print_status(last_time_taken, max_per_batch, nodes_left); end
end

# source://activegraph//lib/active_graph/migrations/helpers.rb#6
ActiveGraph::Migrations::Helpers::PROPERTY_ALREADY_DEFINED = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/migrations/helpers/relationships.rb#4
module ActiveGraph::Migrations::Helpers::Relationships
  extend ::ActiveSupport::Concern

  # source://activegraph//lib/active_graph/migrations/helpers/relationships.rb#9
  def change_relations_style(relationships, old_style, new_style, params = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/migrations/helpers/relationships.rb#15
  def relabel_relation(old_name, new_name, params = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/migrations/helpers/relationships.rb#39
  def arrow_cypher(label, direction); end

  # source://activegraph//lib/active_graph/migrations/helpers/relationships.rb#50
  def count_relations(query); end

  # source://activegraph//lib/active_graph/migrations/helpers/relationships.rb#31
  def match_relation(label, params = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/migrations/helpers/relationships.rb#54
  def relationship_style(relationship, format); end
end

# source://activegraph//lib/active_graph/migrations/helpers/relationships.rb#7
ActiveGraph::Migrations::Helpers::Relationships::DEFAULT_MAX_PER_BATCH = T.let(T.unsafe(nil), Integer)

# source://activegraph//lib/active_graph/migrations/helpers/schema.rb#4
module ActiveGraph::Migrations::Helpers::Schema
  extend ::ActiveSupport::Concern

  # source://activegraph//lib/active_graph/migrations/helpers/schema.rb#9
  def add_constraint(label, property, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/migrations/helpers/schema.rb#23
  def add_index(label, property, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/migrations/helpers/schema.rb#36
  def drop_constraint(label, property, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/migrations/helpers/schema.rb#43
  def drop_index(label, property, options = T.unsafe(nil)); end

  protected

  # source://activegraph//lib/active_graph/migrations/helpers/schema.rb#56
  def fail_duplicate_constraint_or_index!(type, label, property); end

  # source://activegraph//lib/active_graph/migrations/helpers/schema.rb#51
  def fail_missing_constraint_or_index!(type, label, property); end
end

# source://activegraph//lib/active_graph/migrations/helpers/schema.rb#7
ActiveGraph::Migrations::Helpers::Schema::DUPLICATE_CONSTRAINT_OR_INDEX = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/migrations/helpers/schema.rb#6
ActiveGraph::Migrations::Helpers::Schema::MISSING_CONSTRAINT_OR_INDEX = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/migrations/migration_file.rb#3
class ActiveGraph::Migrations::MigrationFile
  # @return [MigrationFile] a new instance of MigrationFile
  #
  # source://activegraph//lib/active_graph/migrations/migration_file.rb#6
  def initialize(file_name); end

  # Returns the value of attribute class_name.
  #
  # source://activegraph//lib/active_graph/migrations/migration_file.rb#4
  def class_name; end

  # source://activegraph//lib/active_graph/migrations/migration_file.rb#11
  def create(options = T.unsafe(nil)); end

  # Returns the value of attribute file_name.
  #
  # source://activegraph//lib/active_graph/migrations/migration_file.rb#4
  def file_name; end

  # Returns the value of attribute symbol_name.
  #
  # source://activegraph//lib/active_graph/migrations/migration_file.rb#4
  def symbol_name; end

  # Returns the value of attribute version.
  #
  # source://activegraph//lib/active_graph/migrations/migration_file.rb#4
  def version; end

  private

  # source://activegraph//lib/active_graph/migrations/migration_file.rb#18
  def extract_data!; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/migrations/runner.rb#3
class ActiveGraph::Migrations::Runner
  # @return [Runner] a new instance of Runner
  #
  # source://activegraph//lib/active_graph/migrations/runner.rb#14
  def initialize(options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#22
  def all; end

  # source://activegraph//lib/active_graph/migrations/runner.rb#55
  def complete_migration_versions; end

  # source://activegraph//lib/active_graph/migrations/runner.rb#37
  def down(version); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#59
  def mark_versions_as_complete(versions); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#164
  def migration_files(*_arg0, **_arg1, &_arg2); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#164
  def migration_files_versions(*_arg0, **_arg1, &_arg2); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#51
  def pending_migrations; end

  # source://activegraph//lib/active_graph/migrations/runner.rb#83
  def reset(version); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#78
  def resolve(version); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#44
  def rollback(steps); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#67
  def status; end

  # source://activegraph//lib/active_graph/migrations/runner.rb#30
  def up(version); end

  private

  # source://activegraph//lib/active_graph/migrations/runner.rb#156
  def all_migrations; end

  # source://activegraph//lib/active_graph/migrations/runner.rb#152
  def find_by_version(version); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#148
  def find_by_version!(version); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#95
  def handle_incomplete_states!; end

  # source://activegraph//lib/active_graph/migrations/runner.rb#160
  def incomplete_states; end

  # source://activegraph//lib/active_graph/migrations/runner.rb#124
  def migrate(direction, migration_file); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#131
  def migration_message(direction, migration); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#90
  def migration_status(version); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#138
  def output(*string_format); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#142
  def output_migration_message(message); end

  # source://activegraph//lib/active_graph/migrations/runner.rb#114
  def task_migration_messages(type, versions); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/migrations/runner.rb#120
  def up?(version); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/migrations/runner.rb#179
    def files; end

    # source://activegraph//lib/active_graph/migrations/runner.rb#175
    def latest_migration; end

    # source://activegraph//lib/active_graph/migrations/runner.rb#171
    def migration_files; end

    # source://activegraph//lib/active_graph/migrations/runner.rb#167
    def migration_files_versions; end

    private

    # source://activegraph//lib/active_graph/migrations/runner.rb#189
    def app_root; end

    # source://activegraph//lib/active_graph/migrations/runner.rb#185
    def files_path; end
  end
end

# source://activegraph//lib/active_graph/migrations/runner.rb#9
ActiveGraph::Migrations::Runner::DOWN_MESSAGE = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/migrations/runner.rb#6
ActiveGraph::Migrations::Runner::FILE_MISSING = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/migrations/runner.rb#10
ActiveGraph::Migrations::Runner::INCOMPLETE_MESSAGE = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/migrations/runner.rb#12
ActiveGraph::Migrations::Runner::MIGRATION_DONE = T.let(T.unsafe(nil), Hash)

# source://activegraph//lib/active_graph/migrations/runner.rb#11
ActiveGraph::Migrations::Runner::MIGRATION_RUNNING = T.let(T.unsafe(nil), Hash)

# source://activegraph//lib/active_graph/migrations/runner.rb#5
ActiveGraph::Migrations::Runner::SEPARATOR = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/migrations/runner.rb#4
ActiveGraph::Migrations::Runner::STATUS_TABLE_FORMAT = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/migrations/runner.rb#7
ActiveGraph::Migrations::Runner::STATUS_TABLE_HEADER = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/migrations/runner.rb#8
ActiveGraph::Migrations::Runner::UP_MESSAGE = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/migrations/schema.rb#3
module ActiveGraph::Migrations::Schema
  class << self
    # source://activegraph//lib/active_graph/migrations/schema.rb#5
    def fetch_schema_data; end

    # source://activegraph//lib/active_graph/migrations/schema.rb#9
    def synchronize_schema_data(schema_data, remove_missing); end

    private

    # source://activegraph//lib/active_graph/migrations/schema.rb#44
    def create_statement(stmt); end

    # source://activegraph//lib/active_graph/migrations/schema.rb#35
    def drop_and_create_queries(existing, specified, schema_elem, remove_missing); end

    # source://activegraph//lib/active_graph/migrations/schema.rb#40
    def drop_statement(schema_elem, create_statement, name); end

    # source://activegraph//lib/active_graph/migrations/schema.rb#27
    def fetch_constraints_descriptions; end

    # source://activegraph//lib/active_graph/migrations/schema.rb#31
    def fetch_descriptions(results); end

    # source://activegraph//lib/active_graph/migrations/schema.rb#22
    def fetch_indexes_descriptions; end
  end
end

# source://activegraph//lib/active_graph/migrations/schema_migration.rb#3
class ActiveGraph::Migrations::SchemaMigration
  include ::ActiveModel::Conversion
  include ::ActiveModel::Serialization
  include ::ActiveModel::Serializers::JSON
  include ::ActiveGraph::Shared
  include ::ActiveGraph::Shared::Marshal
  include ::ActiveGraph::Shared::Initialize
  include ::ActiveGraph::Node::Initialize
  include ::ActiveGraph::Node::IdProperty::Accessor
  include ::ActiveGraph::Node::IdProperty
  include ::ActiveGraph::Shared::SerializedProperties
  include ::ActiveGraph::Shared::MassAssignment
  include ::ActiveModel::AttributeMethods
  include ::ActiveGraph::Shared::Attributes
  include ::ActiveGraph::Shared::TypecastedAttributes
  include ::ActiveModel::Dirty
  include ::ActiveGraph::Shared::Property
  include ::ActiveGraph::Node::Property
  include ::ActiveGraph::Node::Reflection
  include ::ActiveGraph::Shared::Persistence
  include ::ActiveGraph::Node::Persistence
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveGraph::Shared::Validations
  include ::ActiveGraph::Node::Validations
  include ::ActiveGraph::Shared::Callbacks
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveGraph::Node::Callbacks
  include ::ActiveGraph::Node::Query
  include ::ActiveGraph::Node::Labels::Index
  include ::ActiveGraph::Node::Labels::Reloading
  include ::ActiveGraph::Node::Labels
  include ::ActiveGraph::Node::HasN
  include ::ActiveGraph::Node::Scope
  include ::ActiveGraph::Shared::Enum
  include ::ActiveGraph::Node::Enum
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveGraph::Shared::PermittedAttributes
  include ::ActiveGraph::Node::DependentCallbacks
  include ::ActiveGraph::Transactions
  include ::ActiveGraph::Shared::Identity
  include ::ActiveGraph::Node::Rels
  include ::ActiveGraph::Node::Unpersisted
  include ::ActiveGraph::Node::Dependent
  include ::ActiveGraph::Node
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveGraph::Shared::ClassMethods
  extend ::ActiveGraph::Node::IdProperty::Accessor::ClassMethods
  extend ::ActiveGraph::Node::IdProperty::ClassMethods
  extend ::ActiveGraph::Shared::SerializedProperties::ClassMethods
  extend ::ActiveModel::AttributeMethods::ClassMethods
  extend ::ActiveGraph::Shared::Attributes::ClassMethods
  extend ::ActiveGraph::Shared::TypecastedAttributes::ClassMethods
  extend ::ActiveGraph::Shared::Property::ClassMethods
  extend ::ActiveGraph::Node::Property::ClassMethods
  extend ::ActiveGraph::Node::Reflection::ClassMethods
  extend ::ActiveGraph::Node::Persistence::ClassMethods
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveGraph::Node::Validations::ClassMethods
  extend ::ActiveGraph::Shared::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::Callbacks::ClassMethods
  extend ::ActiveGraph::Node::Query::ClassMethods
  extend ::ActiveGraph::Node::Labels::Index::ClassMethods
  extend ::ActiveGraph::Node::Labels::Reloading::ClassMethods
  extend ::ActiveGraph::Node::QueryMethods
  extend ::ActiveGraph::Node::Labels::ClassMethods
  extend ::ActiveGraph::Node::HasN::ClassMethods
  extend ::ActiveGraph::Node::Scope::ClassMethods
  extend ::ActiveGraph::Shared::Enum::ClassMethods
  extend ::ActiveGraph::Node::Enum::ClassMethods
  extend ::ActiveGraph::Transactions::ClassMethods
  extend ::OrmAdapter::ToAdapter
  extend ::ActiveGraph::Node::ClassMethods

  # source://activegraph//lib/active_graph/migrations/schema_migration.rb#9
  def <=>(other); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _create_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _create_commit_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _destroy_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _destroy_commit_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _find_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _initialize_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_create_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_create_commit_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_destroy_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_destroy_commit_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_find_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_initialize_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_save_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_touch_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_update_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_update_commit_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_validation_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _save_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _touch_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _update_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _update_commit_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _validate_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _validation_callbacks; end

  # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
  def _validators; end

  # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
  def _validators?; end

  # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#71
  def attribute_aliases; end

  # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#71
  def attribute_aliases?; end

  # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#72
  def attribute_method_patterns; end

  # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#72
  def attribute_method_patterns?; end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def current_scope; end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def current_scope=(obj); end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def explicit_session; end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def explicit_session=(obj); end

  # source://activegraph//lib/active_graph/node/id_property.rb#81
  def id; end

  # source://activemodel/7.2.2.1/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.2.2.1/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activegraph//lib/active_graph/shared/property.rb#219
  def incomplete=(value); end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def last_bookmark; end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def last_bookmark=(obj); end

  # source://activegraph//lib/active_graph/shared/property.rb#219
  def migration_id=(value); end

  # source://activemodel/7.2.2.1/lib/active_model/naming.rb#255
  def model_name(&_arg0); end

  # source://activemodel/7.2.2.1/lib/active_model/conversion.rb#32
  def param_delimiter=(_arg0); end

  # source://activegraph//lib/active_graph/node/reflection.rb#9
  def reflections; end

  # source://activegraph//lib/active_graph/node/reflection.rb#9
  def reflections=(_arg0); end

  # source://activegraph//lib/active_graph/node/reflection.rb#9
  def reflections?; end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def tx; end

  # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def tx=(obj); end

  # source://activemodel/7.2.2.1/lib/active_model/validations.rb#67
  def validation_context; end

  private

  # source://activemodel/7.2.2.1/lib/active_model/validations.rb#67
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _create_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _create_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _create_commit_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _create_commit_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _destroy_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _destroy_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _destroy_commit_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _destroy_commit_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _find_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _find_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _initialize_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _initialize_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _save_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _save_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _touch_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _touch_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _update_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _update_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _update_commit_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _update_commit_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _validate_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _validate_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _validation_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _validation_callbacks=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
    def _validators; end

    # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
    def _validators=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
    def _validators?; end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_create_commit(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_destroy_commit(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_update_commit(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#137
    def around_touch(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#71
    def attribute_aliases; end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#71
    def attribute_aliases=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#71
    def attribute_aliases?; end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#72
    def attribute_method_patterns; end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#72
    def attribute_method_patterns=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#72
    def attribute_method_patterns?; end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#130
    def before_touch(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def current_scope; end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def current_scope=(obj); end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def explicit_session; end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def explicit_session=(obj); end

    # source://activegraph//lib/active_graph/shared.rb#28
    def i18n_scope; end

    # source://activemodel/7.2.2.1/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.2.2.1/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activegraph//lib/active_graph/node.rb#101
    def inherit_id_property(other); end

    # source://activegraph//lib/active_graph/node.rb#87
    def inherited(other); end

    # source://activegraph//lib/active_graph/node.rb#83
    def inherited?; end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def last_bookmark; end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def last_bookmark=(obj); end

    # source://activemodel/7.2.2.1/lib/active_model/conversion.rb#32
    def param_delimiter; end

    # source://activemodel/7.2.2.1/lib/active_model/conversion.rb#32
    def param_delimiter=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/conversion.rb#32
    def param_delimiter?; end

    # source://activegraph//lib/active_graph/node/reflection.rb#9
    def reflections; end

    # source://activegraph//lib/active_graph/node/reflection.rb#9
    def reflections=(value); end

    # source://activegraph//lib/active_graph/node/reflection.rb#9
    def reflections?; end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def tx; end

    # source://activesupport/7.2.2.1/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def tx=(obj); end
  end
end

# This is here to support the removed functionality of being able to
# defined indexes and constraints on models
# This code should be removed later
#
# source://activegraph//lib/active_graph/model_schema.rb#5
module ActiveGraph::ModelSchema
  class << self
    # source://activegraph//lib/active_graph/model_schema.rb#11
    def add_defined_constraint(model, property_name); end

    # source://activegraph//lib/active_graph/model_schema.rb#16
    def add_defined_index(model, property_name); end

    # source://activegraph//lib/active_graph/model_schema.rb#21
    def add_required_index(model, property_name); end

    # @return [Boolean]
    #
    # source://activegraph//lib/active_graph/model_schema.rb#26
    def defined_constraint?(model, property_name); end

    # source://activegraph//lib/active_graph/model_schema.rb#66
    def ensure_model_data_state!; end

    # source://activegraph//lib/active_graph/model_schema.rb#119
    def force_add_message(index_or_constraint, label, property_name); end

    # source://activegraph//lib/active_graph/model_schema.rb#81
    def legacy_model_schema_informations; end

    # source://activegraph//lib/active_graph/model_schema.rb#123
    def log_warning!(index_or_constraint, model, property_name); end

    # source://activegraph//lib/active_graph/model_schema.rb#31
    def model_constraints; end

    # source://activegraph//lib/active_graph/model_schema.rb#42
    def model_indexes; end

    # source://activegraph//lib/active_graph/model_schema.rb#76
    def reload_models_data!; end

    # should be private
    #
    # source://activegraph//lib/active_graph/model_schema.rb#56
    def schema_elements_list(by_model, db_results); end

    # source://activegraph//lib/active_graph/model_schema.rb#90
    def validate_model_schema!; end

    # source://activegraph//lib/active_graph/model_schema.rb#106
    def validation_error_message(messages); end

    private

    # source://activegraph//lib/active_graph/model_schema.rb#129
    def each_schema_element; end
  end
end

# source://activegraph//lib/active_graph/model_schema.rb#7
ActiveGraph::ModelSchema::MODEL_CONSTRAINTS = T.let(T.unsafe(nil), Hash)

# source://activegraph//lib/active_graph/model_schema.rb#6
ActiveGraph::ModelSchema::MODEL_INDEXES = T.let(T.unsafe(nil), Hash)

# source://activegraph//lib/active_graph/model_schema.rb#8
ActiveGraph::ModelSchema::REQUIRED_INDEXES = T.let(T.unsafe(nil), Hash)

# Makes Neo4j nodes and relationships behave like ActiveRecord objects.
# By including this module in your class it will create a mapping for the node to your ruby class
# by using a Neo4j Label with the same name as the class. When the node is loaded from the database it
# will check if there is a ruby class for the labels it has.
# If there Ruby class with the same name as the label then the Neo4j node will be wrapped
# in a new object of that class.
#
# = ClassMethods
# * {ActiveGraph::Node::Labels::ClassMethods} defines methods like: <tt>index</tt> and <tt>find</tt>
# * {ActiveGraph::Node::Persistence::ClassMethods} defines methods like: <tt>create</tt> and <tt>create!</tt>
# * {ActiveGraph::Node::Property::ClassMethods} defines methods like: <tt>property</tt>.
#
# @example Create a Ruby wrapper for a Neo4j Node
#   class Company
#   include ActiveGraph::Node
#   property :name
#   end
#   company = Company.new
#   company.name = 'My Company AB'
#   Company.save
#
# source://activegraph//lib/active_graph/node.rb#23
module ActiveGraph::Node
  include ::ActiveGraph::Shared::Identity
  include ::ActiveGraph::Node::Rels
  include ::ActiveGraph::Node::Unpersisted
  include ::ActiveGraph::Node::Dependent
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::Serializers::JSON
  include ::ActiveGraph::Shared
  include ::ActiveGraph::Shared::Marshal
  include ::ActiveGraph::Shared::Initialize
  include ::ActiveGraph::Node::Initialize
  include ::ActiveGraph::Node::IdProperty::Accessor
  include ::ActiveGraph::Node::IdProperty
  include ::ActiveGraph::Shared::SerializedProperties
  include ::ActiveGraph::Shared::MassAssignment
  include ::ActiveModel::AttributeMethods
  include ::ActiveGraph::Shared::Attributes
  include ::ActiveGraph::Shared::TypecastedAttributes
  include ::ActiveModel::Dirty
  include ::ActiveGraph::Shared::Property
  include ::ActiveGraph::Node::Property
  include ::ActiveGraph::Node::Reflection
  include ::ActiveGraph::Shared::Persistence
  include ::ActiveGraph::Node::Persistence
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveGraph::Shared::Validations
  include ::ActiveGraph::Node::Validations
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveGraph::Shared::Callbacks
  include ::ActiveGraph::Node::Callbacks
  include ::ActiveGraph::Node::Query
  include ::ActiveGraph::Node::Labels::Index
  include ::ActiveGraph::Node::Labels::Reloading
  include ::ActiveGraph::Node::Labels
  include ::ActiveGraph::Node::HasN
  include ::ActiveGraph::Node::Scope
  include ::ActiveGraph::Shared::Enum
  include ::ActiveGraph::Node::Enum
  include ::ActiveGraph::Shared::PermittedAttributes
  include ::ActiveGraph::Node::DependentCallbacks
  include ::ActiveGraph::Transactions

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::IdProperty::Accessor::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::IdProperty::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::SerializedProperties::ClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Attributes::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::TypecastedAttributes::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Property::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Property::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Reflection::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Persistence::ClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveGraph::Node::Validations::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Query::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Labels::Index::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Labels::Reloading::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Labels::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::HasN::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Scope::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Enum::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Enum::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Transactions::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::ClassMethods

  # source://activegraph//lib/active_graph/node.rb#51
  def initialize(args = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node.rb#58
  def neo4j_obj; end

  class << self
    # source://activegraph//lib/active_graph/node.rb#64
    def loaded_classes; end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
    def param_delimiter; end
    def param_delimiter=(value); end
    def param_delimiter?; end
    def reflections; end
    def reflections=(value); end
    def reflections?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
    def include_root_in_json; end
    def include_root_in_json?; end
    def param_delimiter=(value); end
    def reflections; end
    def reflections=(value); end
    def reflections?; end
  end
end

# source://activegraph//lib/active_graph/node/callbacks.rb#3
module ActiveGraph::Node::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveGraph::Shared::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activegraph//lib/active_graph/node.rb#68
module ActiveGraph::Node::ClassMethods
  include ::OrmAdapter::ToAdapter

  # source://activegraph//lib/active_graph/node.rb#70
  def nodeify(object); end
end

# source://activegraph//lib/active_graph/node/dependent.rb#3
module ActiveGraph::Node::Dependent
  # Sets the attribute called_by
  #
  # @param value the value to set the attribute called_by to.
  #
  # source://activegraph//lib/active_graph/node/dependent.rb#8
  def called_by=(_arg0); end

  # source://activegraph//lib/active_graph/node/dependent.rb#4
  def dependent_children; end
end

# source://activegraph//lib/active_graph/node/dependent/association_methods.rb#4
module ActiveGraph::Node::Dependent::AssociationMethods
  # source://activegraph//lib/active_graph/node/dependent/association_methods.rb#9
  def add_destroy_callbacks(model); end

  # source://activegraph//lib/active_graph/node/dependent/association_methods.rb#5
  def validate_dependent(value); end

  private

  # Callback methods
  #
  # source://activegraph//lib/active_graph/node/dependent/association_methods.rb#26
  def dependent_delete_callback(object); end

  # source://activegraph//lib/active_graph/node/dependent/association_methods.rb#30
  def dependent_delete_orphans_callback(object); end

  # source://activegraph//lib/active_graph/node/dependent/association_methods.rb#35
  def dependent_destroy_callback(object); end

  # source://activegraph//lib/active_graph/node/dependent/association_methods.rb#40
  def dependent_destroy_orphans_callback(object); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/dependent/association_methods.rb#19
  def valid_dependent_value?(value); end
end

# methods used to resolve association dependencies
#
# source://activegraph//lib/active_graph/node/dependent/query_proxy_methods.rb#5
module ActiveGraph::Node::Dependent::QueryProxyMethods
  # Used as part of `dependent: :destroy` and may not have any utility otherwise.
  # It keeps track of the node responsible for a cascading `destroy` process.
  # but this is not always available, so we require it explicitly.
  #
  # @param owning_node [#dependent_children] source_object The node that called this method. Typically, we would use QueryProxy's `source_object` method
  #
  # source://activegraph//lib/active_graph/node/dependent/query_proxy_methods.rb#10
  def each_for_destruction(owning_node); end

  # This will match nodes who only have a single relationship of a given type.
  # It's used  by `dependent: :delete_orphans` and `dependent: :destroy_orphans` and may not have much utility otherwise.
  #
  # @param association [ActiveGraph::Node::HasN::Association] The Association object used throughout the match.
  # @param other_node [String, Symbol] The identifier to use for the other end of the chain.
  # @param other_rel [String, Symbol] The identifier to use for the relationship in the optional match.
  # @return [ActiveGraph::Node::Query::QueryProxy]
  #
  # source://activegraph//lib/active_graph/node/dependent/query_proxy_methods.rb#29
  def unique_nodes(association, self_identifer, other_node, other_rel, ids = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/node/dependent/query_proxy_methods.rb#38
  def unique_nodes_query(association, self_identifer, other_node, other_rel, ids); end
end

# source://activegraph//lib/active_graph/node/dependent_callbacks.rb#3
module ActiveGraph::Node::DependentCallbacks
  extend ::ActiveSupport::Concern

  # source://activegraph//lib/active_graph/node/dependent_callbacks.rb#25
  def callbacks_from_relationship(relationship, direction, other_node); end

  # source://activegraph//lib/active_graph/node/dependent_callbacks.rb#6
  def dependent_delete_callback(association, ids); end

  # source://activegraph//lib/active_graph/node/dependent_callbacks.rb#10
  def dependent_delete_orphans_callback(association, ids); end

  # source://activegraph//lib/active_graph/node/dependent_callbacks.rb#15
  def dependent_destroy_callback(association, ids); end

  # source://activegraph//lib/active_graph/node/dependent_callbacks.rb#20
  def dependent_destroy_orphans_callback(association, ids); end
end

# source://activegraph//lib/active_graph/node/enum.rb#2
module ActiveGraph::Node::Enum
  extend ::ActiveSupport::Concern
  include ::ActiveGraph::Shared::Enum

  mixes_in_class_methods ::ActiveGraph::Shared::Enum::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Enum::ClassMethods
end

# source://activegraph//lib/active_graph/node/enum.rb#6
module ActiveGraph::Node::Enum::ClassMethods
  protected

  # source://activegraph//lib/active_graph/node/enum.rb#14
  def define_enum_methods(property_name, enum_keys, options); end

  # source://activegraph//lib/active_graph/node/enum.rb#19
  def define_enum_scopes(property_name, enum_keys); end

  # source://activegraph//lib/active_graph/node/enum.rb#9
  def define_property(property_name, *args); end
end

# source://activegraph//lib/active_graph/node/has_n.rb#2
module ActiveGraph::Node::HasN
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Node::HasN::ClassMethods

  # source://activegraph//lib/active_graph/node/has_n.rb#228
  def association_proxy(name, options = T.unsafe(nil)); end

  # Returns the current AssociationProxy cache for the association cache. It is in the format
  # { :association_name => AssociationProxy}
  # This is so that we
  # * don't need to re-build the QueryProxy objects
  # * also because the QueryProxy object caches it's results
  # * so we don't need to query again
  # * so that we can cache results from association calls or eager loading
  #
  # source://activegraph//lib/active_graph/node/has_n.rb#209
  def association_proxy_cache; end

  # source://activegraph//lib/active_graph/node/has_n.rb#213
  def association_proxy_cache_fetch(key); end

  # source://activegraph//lib/active_graph/node/has_n.rb#224
  def association_proxy_hash(name, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n.rb#220
  def association_query_proxy(name, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n.rb#265
  def delete_has_one_rel!(rel); end

  # source://activegraph//lib/active_graph/node/has_n.rb#248
  def delete_reverse_has_one_core_rel(association); end

  # source://activegraph//lib/active_graph/node/has_n.rb#260
  def delete_reverse_has_one_relationship(relationship, direction, other_node); end

  # source://activegraph//lib/active_graph/node/has_n.rb#270
  def relationship_corresponding_rel(relationship, direction, target_class); end

  # source://activegraph//lib/active_graph/node/has_n.rb#253
  def reverse_association(association); end

  private

  # source://activegraph//lib/active_graph/node/has_n.rb#281
  def fresh_association_proxy(name, options = T.unsafe(nil), result_cache_proc = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n.rb#285
  def previous_proxy_results_by_previous_id(result_cache, association_name); end
end

# source://activegraph//lib/active_graph/node/has_n/association.rb#4
class ActiveGraph::Node::HasN::Association
  include ::ActiveGraph::Shared::RelTypeConverters
  include ::ActiveGraph::Node::Dependent::AssociationMethods
  include ::ActiveGraph::Node::HasN::AssociationCypherMethods

  # @return [Association] a new instance of Association
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#11
  def initialize(type, direction, name, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#141
  def _create_relationship(start_object, node_or_nodes, properties); end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#137
  def create_method; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#133
  def creates_unique_option; end

  # Returns the value of attribute dependent.
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#9
  def dependent; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#20
  def derive_model_class; end

  # Returns the value of attribute direction.
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#9
  def direction; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#87
  def discovered_model; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#67
  def inverse_of?(other); end

  # Returns the value of attribute model_class.
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#9
  def model_class; end

  # Returns the value of attribute name.
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#9
  def name; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#53
  def pending_model_refresh?; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#36
  def queue_model_refresh!; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#29
  def refresh_model_class!; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#145
  def rel_class?; end

  # Returns the value of attribute relationship.
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#9
  def relationship; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#124
  def relationship_class; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#145
  def relationship_class?; end

  # Returns the value of attribute relationship_class_name.
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#118
  def relationship_class_name; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#120
  def relationship_class_type; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#103
  def relationship_type(create = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#93
  def target_class; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#57
  def target_class_names; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#40
  def target_class_option(model_class); end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#71
  def target_classes; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#75
  def target_classes_or_nil; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#79
  def target_where_clause(var = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#9
  def type; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#128
  def unique?; end

  private

  # source://activegraph//lib/active_graph/node/has_n/association.rb#179
  def apply_vars_from_options(options); end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#152
  def association_model_namespace; end

  # Return basic details about association as declared in the model
  #
  # @example
  #   has_many :in, :bands, type: :has_band
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#192
  def base_declaration; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#230
  def check_valid_type_and_dir(type, direction); end

  # Determine if model class as derived from the association name would be different than the one specified via the model_class key
  #
  # @example
  #   has_many :friends                 # Would return false
  #   has_many :friends, model_class: Friend  # Would return false
  #   has_many :friends, model_class: Person  # Would return true
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n/association.rb#250
  def exceptional_target_class?; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#156
  def get_direction(create, reverse = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#169
  def origin_association; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#173
  def origin_type; end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#221
  def type_keys_error_message(keys); end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#207
  def validate_association_options!(_association_name, options); end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#196
  def validate_init_arguments(type, direction, name, options); end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#235
  def validate_option_combinations(options); end

  # source://activegraph//lib/active_graph/node/has_n/association.rb#256
  def validate_origin!; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#3
class ActiveGraph::Node::HasN::Association::RelFactory
  # @return [RelFactory] a new instance of RelFactory
  #
  # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#21
  def initialize(start_object, other_node_or_nodes, properties, association); end

  # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#14
  def _create_relationship; end

  private

  # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#35
  def _create_relationship_with_factory; end

  # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#28
  def _create_relationship_with_rel_class; end

  # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#45
  def _match_query(other_node, wrapper); end

  # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#50
  def _nodes_for_create(other_node, from_node_id, to_node_id); end

  # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#56
  def _rel_wrapper(properties); end

  # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#5
  def association; end

  # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#5
  def other_node_or_nodes; end

  # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#5
  def properties; end

  # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#5
  def start_object; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/node/has_n/association/rel_factory.rb#9
    def create(start_object, other_node_or_nodes, properties, association); end
  end
end

# Provides the interface needed to interact with the Relationship query factory.
#
# source://activegraph//lib/active_graph/node/has_n/association/rel_wrapper.rb#3
class ActiveGraph::Node::HasN::Association::RelWrapper
  include ::ActiveGraph::Shared::Cypher::RelIdentifiers
  include ::ActiveGraph::Shared::Cypher::CreateMethod

  # @return [RelWrapper] a new instance of RelWrapper
  #
  # source://activegraph//lib/active_graph/node/has_n/association/rel_wrapper.rb#12
  def initialize(association, properties = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n/association/rel_wrapper.rb#19
  def persisted?; end

  # Returns the value of attribute properties.
  #
  # source://activegraph//lib/active_graph/node/has_n/association/rel_wrapper.rb#8
  def properties; end

  # Sets the attribute properties
  #
  # @param value the value to set the attribute properties to.
  #
  # source://activegraph//lib/active_graph/node/has_n/association/rel_wrapper.rb#8
  def properties=(_arg0); end

  # Returns the value of attribute properties.
  #
  # source://activegraph//lib/active_graph/node/has_n/association/rel_wrapper.rb#8
  def props_for_create; end

  # Returns the value of attribute type.
  #
  # source://activegraph//lib/active_graph/node/has_n/association/rel_wrapper.rb#7
  def type; end

  private

  # Returns the value of attribute association.
  #
  # source://activegraph//lib/active_graph/node/has_n/association/rel_wrapper.rb#7
  def association; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# the ":labels" option is not used by the association per-say.
# Instead, if provided,it is used by the association getter as a default getter options argument
#
# source://activegraph//lib/active_graph/node/has_n/association.rb#205
ActiveGraph::Node::HasN::Association::VALID_ASSOCIATION_OPTION_KEYS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#4
module ActiveGraph::Node::HasN::AssociationCypherMethods
  # Return cypher partial query string for the relationship part of a MATCH (arrow / relationship definition)
  #
  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#6
  def arrow_cypher(var = T.unsafe(nil), properties = T.unsafe(nil), create = T.unsafe(nil), reverse = T.unsafe(nil), length = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#68
  def cypher_for_hash_rel_length(length); end

  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#62
  def cypher_for_range_rel_length(length); end

  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#49
  def cypher_for_rel_length(length); end

  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#18
  def direction_cypher(relationship_cypher, create, reverse = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#38
  def get_properties_string(properties); end

  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#29
  def get_relationship_cypher(var, properties, create, length); end

  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#80
  def rel_length_error_message(length); end

  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#102
  def rel_length_hash_error_message(length); end

  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#94
  def rel_length_range_error_message(length); end

  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#90
  def rel_length_symbol_error_message(length); end

  # source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#74
  def validate_rel_length!(length); end
end

# source://activegraph//lib/active_graph/node/has_n/association_cypher_methods.rb#45
ActiveGraph::Node::HasN::AssociationCypherMethods::VALID_REL_LENGTH_SYMBOLS = T.let(T.unsafe(nil), Hash)

# Return this object from associations
# It uses a QueryProxy to get results
# But also caches results and can have results cached on it
#
# source://activegraph//lib/active_graph/node/has_n.rb#10
class ActiveGraph::Node::HasN::AssociationProxy
  include ::Enumerable
  extend ::Forwardable

  # @return [AssociationProxy] a new instance of AssociationProxy
  #
  # source://activegraph//lib/active_graph/node/has_n.rb#11
  def initialize(query_proxy, deferred_objects = T.unsafe(nil), result_cache_proc = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n.rb#72
  def +(other); end

  # source://activegraph//lib/active_graph/node/has_n.rb#155
  def <<(*args, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#68
  def ==(other); end

  # source://activegraph//lib/active_graph/node/has_n.rb#112
  def add_to_cache(object, rel = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n.rb#125
  def cache_query_proxy_result; end

  # source://activegraph//lib/active_graph/node/has_n.rb#102
  def cache_result(result); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n.rb#137
  def cached?; end

  # source://activegraph//lib/active_graph/node/has_n.rb#133
  def clear_cache_result; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def count(*args, **_arg1, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#155
  def create(*args, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#155
  def delete(*args, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#37
  def each(node = T.unsafe(nil), rel = T.unsafe(nil), &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#49
  def each_rel(&block); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n.rb#64
  def empty?(*args); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def find(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def first(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def include?(*args, **_arg1, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#107
  def init_cache; end

  # States:
  # Default
  #
  # source://activegraph//lib/active_graph/node/has_n.rb#25
  def inspect; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def last(*args, **_arg1, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#56
  def length; end

  # source://activegraph//lib/active_graph/node/has_n.rb#155
  def limit(*args, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#162
  def method_missing(method_name, *args, **kwargs, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#155
  def order(*args, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#155
  def pluck(*args, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#121
  def rel; end

  # source://activegraph//lib/active_graph/node/has_n.rb#155
  def rel_order(*args, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#155
  def rel_where(*args, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#117
  def rels; end

  # source://activegraph//lib/active_graph/node/has_n.rb#141
  def replace_with(*args); end

  # source://activegraph//lib/active_graph/node/has_n.rb#76
  def result; end

  # source://activegraph//lib/active_graph/node/has_n.rb#129
  def result_cache_proc_cache; end

  # source://activegraph//lib/active_graph/node/has_n.rb#96
  def result_ids; end

  # source://activegraph//lib/active_graph/node/has_n.rb#86
  def result_nodes; end

  # source://activegraph//lib/active_graph/node/has_n.rb#92
  def result_objects; end

  # source://activegraph//lib/active_graph/node/has_n.rb#80
  def result_without_deferred; end

  # source://activegraph//lib/active_graph/node/has_n.rb#176
  def serializable_hash(options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n.rb#60
  def size; end

  # source://activegraph//lib/active_graph/node/has_n.rb#155
  def skip(*args, &block); end

  def to_ary(*_arg0); end

  # source://activegraph//lib/active_graph/node/has_n.rb#155
  def where(*args, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#155
  def where_not(*args, &block); end

  private

  # source://activegraph//lib/active_graph/node/has_n.rb#182
  def map_results_as_nodes(result); end

  # source://activegraph//lib/active_graph/node/has_n.rb#188
  def target_for_missing_method(method_name); end
end

# source://activegraph//lib/active_graph/node/has_n.rb#160
ActiveGraph::Node::HasN::AssociationProxy::CACHED_RESULT_METHODS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/node/has_n.rb#152
ActiveGraph::Node::HasN::AssociationProxy::QUERY_PROXY_METHODS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/node/has_n.rb#297
module ActiveGraph::Node::HasN::ClassMethods
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n.rb#310
  def association?(name); end

  # source://activegraph//lib/active_graph/node/has_n.rb#318
  def associations; end

  # source://activegraph//lib/active_graph/node/has_n.rb#322
  def associations_keys; end

  # :nocov:
  #
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n.rb#301
  def has_association?(name); end

  # For defining an "has many" association on a model.  This defines a set of methods on
  # your model instances.  For instance, if you define the association on a Person model:
  #
  #
  # .. code-block:: ruby
  #
  #   has_many :out, :vehicles, type: :has_vehicle
  #
  # This would define the following methods:
  #
  # **#vehicles**
  #   Returns a QueryProxy object.  This is an Enumerable object and thus can be iterated
  #   over.  It also has the ability to accept class-level methods from the Vehicle model
  #   (including calls to association methods)
  #
  # **#vehicles=**
  #   Takes an array of Vehicle objects and replaces all current ``:HAS_VEHICLE`` relationships
  #   with new relationships refering to the specified objects
  #
  # **.vehicles**
  #   Returns a QueryProxy object.  This would represent all ``Vehicle`` objects associated with
  #   either all ``Person`` nodes (if ``Person.vehicles`` is called), or all ``Vehicle`` objects
  #   associated with the ``Person`` nodes thus far represented in the QueryProxy chain.
  #   For example:
  #
  #   .. code-block:: ruby
  #
  #     company.people.where(age: 40).vehicles
  #
  # Arguments:
  #   **direction:**
  #     **Available values:** ``:in``, ``:out``, or ``:both``.
  #
  #     Refers to the relative to the model on which the association is being defined.
  #
  #     Example:
  #
  #     .. code-block:: ruby
  #
  #       Person.has_many :out, :posts, type: :wrote
  #
  #     means that a `WROTE` relationship goes from a `Person` node to a `Post` node
  #
  #   **name:**
  #     The name of the association.  The affects the methods which are created (see above).
  #     The name is also used to form default assumptions about the model which is being referred to
  #
  #     Example:
  #
  #     .. code-block:: ruby
  #
  #       Person.has_many :out, :posts, type: :wrote
  #
  #     will assume a `model_class` option of ``'Post'`` unless otherwise specified
  #
  #   **options:** A ``Hash`` of options.  Allowed keys are:
  #     *type*: The Neo4j relationship type.  This option is required unless either the
  #       `origin` or `rel_class` options are specified
  #
  #     *origin*: The name of the association from another model which the `type` and `model_class`
  #       can be gathered.
  #
  #       Example:
  #
  #       .. code-block:: ruby
  #
  #         # `model_class` of `Post` is assumed here
  #         Person.has_many :out, :posts, origin: :author
  #
  #         Post.has_one :in, :author, type: :has_author, model_class: :Person
  #
  #     *model_class*: The model class to which the association is referring.  Can be a
  #       Symbol/String (or an ``Array`` of same) with the name of the `Node` class,
  #       `false` to specify any model, or nil to specify that it should be guessed.
  #
  #     *rel_class*: The ``Relationship`` class to use for this association.  Can be either a
  #       model object ``include`` ing ``Relationship`` or a Symbol/String (or an ``Array`` of same).
  #       **A Symbol or String is recommended** to avoid load-time issues
  #
  #     *dependent*: Enables deletion cascading.
  #       **Available values:** ``:delete``, ``:delete_orphans``, ``:destroy``, ``:destroy_orphans``
  #       (note that the ``:destroy_orphans`` option is known to be "very metal".  Caution advised)
  #
  # source://activegraph//lib/active_graph/node/has_n.rb#409
  def has_many(direction, name, options = T.unsafe(nil)); end

  # For defining an "has one" association on a model.  This defines a set of methods on
  # your model instances.  For instance, if you define the association on a Person model:
  #
  # has_one :out, :vehicle, type: :has_vehicle
  #
  # This would define the methods: ``#vehicle``, ``#vehicle=``, and ``.vehicle``.
  #
  # See :ref:`#has_many <ActiveGraph/Node/HasN/ClassMethods#has_many>` for anything
  # not specified here
  #
  # source://activegraph//lib/active_graph/node/has_n.rb#426
  def has_one(direction, name, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n.rb#314
  def parent_associations; end

  private

  # source://activegraph//lib/active_graph/node/has_n.rb#608
  def add_association(name, association_object); end

  # source://activegraph//lib/active_graph/node/has_n.rb#568
  def association_proxy(name, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n.rb#553
  def association_query_proxy(name, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/has_n.rb#572
  def association_target_class(name); end

  # source://activegraph//lib/active_graph/node/has_n.rb#580
  def association_target_classes(name); end

  # source://activegraph//lib/active_graph/node/has_n.rb#593
  def build_association(macro, direction, name, options); end

  # source://activegraph//lib/active_graph/node/has_n.rb#588
  def default_association_query_proxy; end

  # source://activegraph//lib/active_graph/node/has_n.rb#546
  def define_class_method(*args, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#465
  def define_has_many_id_methods(name); end

  # source://activegraph//lib/active_graph/node/has_n.rb#435
  def define_has_many_methods(name, association_options); end

  # source://activegraph//lib/active_graph/node/has_n.rb#461
  def define_has_many_setter(name); end

  # source://activegraph//lib/active_graph/node/has_n.rb#524
  def define_has_one_getter(name, default_options); end

  # source://activegraph//lib/active_graph/node/has_n.rb#512
  def define_has_one_id_methods(name); end

  # source://activegraph//lib/active_graph/node/has_n.rb#494
  def define_has_one_methods(name, association_options); end

  # source://activegraph//lib/active_graph/node/has_n.rb#542
  def define_has_one_setter(name); end

  # source://activegraph//lib/active_graph/node/has_n.rb#490
  def define_method_unless_defined(method_name, &block); end

  # source://activegraph//lib/active_graph/node/has_n.rb#477
  def define_setter(name, setter_name); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/has_n.rb#614
  def duplicate_association?(name); end
end

# source://activegraph//lib/active_graph/node/has_n.rb#6
class ActiveGraph::Node::HasN::HasOneConstraintError < ::ActiveGraph::Error; end

# source://activegraph//lib/active_graph/node/has_n.rb#5
class ActiveGraph::Node::HasN::NonPersistedNodeError < ::ActiveGraph::Error; end

# This module makes it possible to use other IDs than the build it neo4j id (neo_id)
#
# @example using generated UUIDs
#   class Person
#   include ActiveGraph::Node
#   # creates a 'secret' neo4j property my_uuid which will be used as primary key
#   id_property :my_uuid, auto: :uuid
#   end
# @example using user defined ids
#   class Person
#   include ActiveGraph::Node
#   property :title
#   validates :title, :presence => true
#   id_property :title_id, on: :title_to_url
#
#   def title_to_url
#   self.title.urlize # uses https://github.com/cheef/string-urlize gem
#   end
#   end
# @example using already exsting ids that you don't want a constraint added to
#   class Person
#   include ActiveGraph::Node
#   property :title
#   validates :title, :presence => true
#   id_property :id, on: :id_builder, constraint: false
#
#   def id_builder
#   # only need to fill this out if you're gonna write to the db
#   end
#   end
#
# source://activegraph//lib/active_graph/node/id_property.rb#35
module ActiveGraph::Node::IdProperty
  extend ::ActiveSupport::Concern
  include ::ActiveGraph::Node::IdProperty::Accessor

  mixes_in_class_methods ::ActiveGraph::Node::IdProperty::Accessor::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::IdProperty::ClassMethods
end

# Provides get/set of the Id Property values.
# Some methods
#
# source://activegraph//lib/active_graph/node/id_property/accessor.rb#4
module ActiveGraph::Node::IdProperty::Accessor
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Node::IdProperty::Accessor::ClassMethods

  # source://activegraph//lib/active_graph/node/id_property/accessor.rb#22
  def default_properties; end

  # source://activegraph//lib/active_graph/node/id_property/accessor.rb#9
  def default_properties=(properties); end

  # source://activegraph//lib/active_graph/node/id_property/accessor.rb#13
  def default_property(key); end

  # source://activegraph//lib/active_graph/node/id_property/accessor.rb#18
  def default_property_key; end

  # Returns the value of attribute default_property_value.
  #
  # source://activegraph//lib/active_graph/node/id_property/accessor.rb#7
  def default_property_value; end
end

# source://activegraph//lib/active_graph/node/id_property/accessor.rb#26
module ActiveGraph::Node::IdProperty::Accessor::ClassMethods
  # @return [Hash<Symbol,Proc>]
  #
  # source://activegraph//lib/active_graph/node/id_property/accessor.rb#38
  def default_properties; end

  # source://activegraph//lib/active_graph/node/id_property/accessor.rb#42
  def default_properties_keys; end

  # TODO: Move this to the DeclaredProperties
  #
  # source://activegraph//lib/active_graph/node/id_property/accessor.rb#32
  def default_property(name, &block); end

  # source://activegraph//lib/active_graph/node/id_property/accessor.rb#27
  def default_property_key; end

  # source://activegraph//lib/active_graph/node/id_property/accessor.rb#55
  def default_property_values(instance); end

  # source://activegraph//lib/active_graph/node/id_property/accessor.rb#46
  def reset_default_properties(name_to_keep); end
end

# source://activegraph//lib/active_graph/node/id_property.rb#126
module ActiveGraph::Node::IdProperty::ClassMethods
  # Since there's no way to know when a class is done being described, we wait until the id_property
  # information is requested and use that as the opportunity to set up the defaults if no others are specified
  #
  # source://activegraph//lib/active_graph/node/id_property.rb#178
  def ensure_id_property_info!; end

  # source://activegraph//lib/active_graph/node/id_property.rb#133
  def find_by_id(id); end

  # source://activegraph//lib/active_graph/node/id_property.rb#137
  def find_by_ids(ids); end

  # source://activegraph//lib/active_graph/node/id_property.rb#129
  def find_by_neo_id(id); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/id_property.rb#149
  def has_id_property?; end

  # source://activegraph//lib/active_graph/node/id_property.rb#141
  def id_property(name, conf = T.unsafe(nil), inherited = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/id_property.rb#156
  def id_property?; end

  # source://activegraph//lib/active_graph/node/id_property.rb#160
  def id_property_info; end

  # source://activegraph//lib/active_graph/node/id_property.rb#166
  def id_property_name; end

  # Returns the value of attribute manual_id_property.
  #
  # source://activegraph//lib/active_graph/node/id_property.rb#127
  def manual_id_property; end

  # Sets the attribute manual_id_property
  #
  # @param value the value to set the attribute manual_id_property to.
  #
  # source://activegraph//lib/active_graph/node/id_property.rb#127
  def manual_id_property=(_arg0); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/id_property.rb#170
  def manual_id_property?; end

  # source://activegraph//lib/active_graph/node/id_property.rb#166
  def primary_key; end

  private

  # source://activegraph//lib/active_graph/node/id_property.rb#189
  def handle_model_schema!; end

  # source://activegraph//lib/active_graph/node/id_property.rb#211
  def id_property_name_type_value; end

  # source://activegraph//lib/active_graph/node/id_property.rb#204
  def warn_constraint_option_false!(id_property_name); end
end

# source://activegraph//lib/active_graph/node/id_property.rb#39
module ActiveGraph::Node::IdProperty::TypeMethods
  extend ::ActiveGraph::Node::IdProperty::TypeMethods

  # source://activegraph//lib/active_graph/node/id_property.rb#40
  def define_id_methods(clazz, name, conf); end

  private

  # source://activegraph//lib/active_graph/node/id_property.rb#117
  def clear_methods(clazz, name); end

  # source://activegraph//lib/active_graph/node/id_property.rb#100
  def define_custom_method(clazz, name, on); end

  # source://activegraph//lib/active_graph/node/id_property.rb#71
  def define_property_method(clazz, name); end

  # source://activegraph//lib/active_graph/node/id_property.rb#84
  def define_uuid_method(clazz, name); end

  # source://activegraph//lib/active_graph/node/id_property.rb#56
  def validate_conf!(conf); end
end

# source://activegraph//lib/active_graph/node/initialize.rb#1
module ActiveGraph::Node::Initialize
  extend ::ActiveSupport::Concern
  include ::ActiveGraph::Shared::Initialize

  # Returns the value of attribute called_by.
  #
  # source://activegraph//lib/active_graph/node/initialize.rb#5
  def called_by; end

  # called when loading the node from the database
  #
  # @param persisted_node [ActiveGraph::Node] the node this class wraps
  # @param properties [Hash] of the persisted node.
  #
  # source://activegraph//lib/active_graph/node/initialize.rb#10
  def init_on_load(persisted_node, properties); end

  # source://activegraph//lib/active_graph/node/initialize.rb#17
  def init_on_reload(reloaded); end
end

# source://activegraph//lib/active_graph/node.rb#62
ActiveGraph::Node::LOADED_CLASSES = T.let(T.unsafe(nil), Array)

# Provides a mapping between neo4j labels and Ruby classes
#
# source://activegraph//lib/active_graph/node/labels.rb#4
module ActiveGraph::Node::Labels
  extend ::ActiveSupport::Concern
  include ::ActiveGraph::Node::Labels::Index
  include ::ActiveGraph::Node::Labels::Reloading

  mixes_in_class_methods ::ActiveGraph::Node::Labels::Index::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Labels::Reloading::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Labels::ClassMethods

  # adds one or more labels
  #
  # @see ActiveGraph::Core
  #
  # source://activegraph//lib/active_graph/node/labels.rb#34
  def add_labels(*labels); end

  # @return the labels
  # @see ActiveGraph::Core
  #
  # source://activegraph//lib/active_graph/node/labels.rb#23
  def labels; end

  # Removes one or more labels
  # Be careful, don't remove the label representing the Ruby class.
  #
  # @see ActiveGraph::Core
  #
  # source://activegraph//lib/active_graph/node/labels.rb#45
  def remove_labels(*labels); end

  class << self
    # source://activegraph//lib/active_graph/node/labels.rb#52
    def _wrapped_classes; end

    # source://activegraph//lib/active_graph/node/labels.rb#56
    def add_wrapped_class(model); end

    # source://activegraph//lib/active_graph/node/labels.rb#75
    def clear_wrapped_models; end

    # Finds an appropriate matching model given a set of labels
    # which are assigned to a node
    #
    # source://activegraph//lib/active_graph/node/labels.rb#62
    def model_for_labels(labels); end
  end
end

# source://activegraph//lib/active_graph/node/labels.rb#80
module ActiveGraph::Node::Labels::ClassMethods
  include ::ActiveGraph::Node::QueryMethods

  # source://activegraph//lib/active_graph/node/labels.rb#135
  def base_class; end

  # Deletes all nodes and connected relationships from Cypher.
  #
  # source://activegraph//lib/active_graph/node/labels.rb#110
  def delete_all; end

  # Returns each node to Ruby and calls `destroy`. Be careful, as this can be a very slow operation if you have many nodes. It will generate at least
  # one database query per node in the database, more if callbacks require them.
  #
  # source://activegraph//lib/active_graph/node/labels.rb#116
  def destroy_all; end

  # Returns the object with the specified neo4j id.
  #
  # @param id [String, Integer] of node to find
  #
  # source://activegraph//lib/active_graph/node/labels.rb#87
  def find(id); end

  # Finds the first record matching the specified conditions. There is no implied ordering so if order matters, you should specify it yourself.
  #
  # @param values Hash args of arguments to find
  #
  # source://activegraph//lib/active_graph/node/labels.rb#100
  def find_by(values); end

  # Like find_by, except that if no record is found, raises a RecordNotFound error.
  #
  # source://activegraph//lib/active_graph/node/labels.rb#105
  def find_by!(values); end

  # @return [ActiveGraph::Label] the label for this class
  #
  # source://activegraph//lib/active_graph/node/labels.rb#131
  def mapped_label; end

  # @return [Symbol] the label that this class has which corresponds to a Ruby class
  #
  # source://activegraph//lib/active_graph/node/labels.rb#126
  def mapped_label_name; end

  # @return [Array{Symbol}] all the labels that this class has
  #
  # source://activegraph//lib/active_graph/node/labels.rb#121
  def mapped_label_names; end

  # source://activegraph//lib/active_graph/node/labels.rb#83
  def update_all(*_arg0, **_arg1, &_arg2); end

  protected

  # source://activegraph//lib/active_graph/node/labels.rb#153
  def mapped_label_name=(name); end

  # source://activegraph//lib/active_graph/node/labels.rb#149
  def mapped_labels; end

  # source://activegraph//lib/active_graph/node/labels.rb#158
  def set_mapped_label_name(name); end

  private

  # source://activegraph//lib/active_graph/node/labels.rb#190
  def decorated_label_name; end

  # source://activegraph//lib/active_graph/node/labels.rb#167
  def find_by_id_or_ids(map_id, id); end

  # source://activegraph//lib/active_graph/node/labels.rb#175
  def find_callbacks!(result); end

  # source://activegraph//lib/active_graph/node/labels.rb#186
  def label_for_model; end
end

# source://activegraph//lib/active_graph/node/labels/index.rb#2
module ActiveGraph::Node::Labels::Index
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Node::Labels::Index::ClassMethods
end

# source://activegraph//lib/active_graph/node/labels/index.rb#5
module ActiveGraph::Node::Labels::Index::ClassMethods
  extend ::Forwardable

  # Creates a neo4j constraint on this class for given property
  #
  # @example
  #   Person.constraint :name, type: :unique
  #
  # source://activegraph//lib/active_graph/node/labels/index.rb#32
  def constraint(property, _constraints = T.unsafe(nil)); end

  # Creates a Neo4j index on given property
  #
  # This can also be done on the property directly, see ActiveGraph::Node::Property::ClassMethods#property.
  #
  # @example
  #   class Person
  #   include ActiveGraph::Node
  #   property :name
  #   index :name
  #   end
  # @param property [Symbol] the property we want a Neo4j index on
  #
  # source://activegraph//lib/active_graph/node/labels/index.rb#22
  def index(property); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def indexed_properties(*args, **_arg1, &block); end
end

# source://activegraph//lib/active_graph/node/labels.rb#10
ActiveGraph::Node::Labels::MODELS_FOR_LABELS_CACHE = T.let(T.unsafe(nil), Hash)

# source://activegraph//lib/active_graph/node/labels.rb#19
class ActiveGraph::Node::Labels::RecordNotFound < ::ActiveGraph::RecordNotFound; end

# source://activegraph//lib/active_graph/node/labels/reloading.rb#2
module ActiveGraph::Node::Labels::Reloading
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Node::Labels::Reloading::ClassMethods

  class << self
    # source://activegraph//lib/active_graph/node/labels/reloading.rb#7
    def reload_models!; end
  end
end

# source://activegraph//lib/active_graph/node/labels/reloading.rb#12
module ActiveGraph::Node::Labels::Reloading::ClassMethods
  # source://activegraph//lib/active_graph/node/labels/reloading.rb#13
  def before_remove_const; end
end

# source://activegraph//lib/active_graph/node/labels/reloading.rb#5
ActiveGraph::Node::Labels::Reloading::MODELS_TO_RELOAD = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/node/labels.rb#9
ActiveGraph::Node::Labels::WRAPPED_CLASSES = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/node.rb#26
ActiveGraph::Node::MARSHAL_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/node/node_list_formatter.rb#2
class ActiveGraph::Node::NodeListFormatter
  # @return [NodeListFormatter] a new instance of NodeListFormatter
  #
  # source://activegraph//lib/active_graph/node/node_list_formatter.rb#3
  def initialize(list, max_elements = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/node_list_formatter.rb#8
  def inspect; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/node/orm_adapter.rb#3
class ActiveGraph::Node::OrmAdapter < ::OrmAdapter::Base
  # source://activegraph//lib/active_graph/node/orm_adapter.rb#8
  def column_names; end

  # Create a model using attributes
  #
  # source://activegraph//lib/active_graph/node/orm_adapter.rb#53
  def create!(attributes = T.unsafe(nil)); end

  # @see OrmAdapter::Base#destroy
  #
  # source://activegraph//lib/active_graph/node/orm_adapter.rb#58
  def destroy(object); end

  # Find all models matching conditions
  #
  # source://activegraph//lib/active_graph/node/orm_adapter.rb#40
  def find_all(options = T.unsafe(nil)); end

  # Find the first instance matching conditions
  #
  # source://activegraph//lib/active_graph/node/orm_adapter.rb#29
  def find_first(options = T.unsafe(nil)); end

  # Get an instance by id of the model
  #
  # source://activegraph//lib/active_graph/node/orm_adapter.rb#24
  def get(id); end

  # Get an instance by id of the model
  #
  # source://activegraph//lib/active_graph/node/orm_adapter.rb#17
  def get!(id); end

  # source://activegraph//lib/active_graph/node/orm_adapter.rb#12
  def i18n_scope; end

  private

  # source://activegraph//lib/active_graph/node/orm_adapter.rb#68
  def extract_id!(conditions); end

  # source://activegraph//lib/active_graph/node/orm_adapter.rb#64
  def hasherize_order(order); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/node/orm_adapter.rb#4
module ActiveGraph::Node::OrmAdapter::ClassMethods
  include ::ActiveModel::Callbacks
end

# source://activegraph//lib/active_graph/node/persistence.rb#2
module ActiveGraph::Node::Persistence
  extend ::ActiveSupport::Concern
  extend ::Forwardable
  include ::ActiveGraph::Shared::Persistence

  mixes_in_class_methods ::ActiveGraph::Node::Persistence::ClassMethods

  # TODO: This does not seem like it should be the responsibility of the node.
  # Creates an unwrapped node in the database.
  #
  # @param node_props [Hash] The type-converted properties to be added to the new node.
  # @param labels [Array] The labels to use for creating the new node.
  # @return [ActiveGraph::Node] A CypherNode or EmbeddedNode
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#68
  def _create_node(node_props, labels = T.unsafe(nil)); end

  # Increments concurrently a numeric attribute by a centain amount
  #
  # @param attribute [Symbol, String] name of the attribute to increment
  # @param by [Integer, Float] amount to increment
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#35
  def concurrent_increment!(attribute, by = T.unsafe(nil)); end

  # Creates a model with values matching those of the instance attributes and returns its id.
  #
  # @private
  # @return true
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#56
  def create_model; end

  # As the name suggests, this inserts the primary key (id property) into the properties hash.
  # The method called here, `default_property_values`, is a holdover from an earlier version of the gem. It does NOT
  # contain the default values of properties, it contains the Default Property, which we now refer to as the ID Property.
  # It will be deprecated and renamed in a coming refactor.
  #
  # @param converted_props [Hash] A hash of properties post-typeconversion, ready for insertion into the DB.
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#78
  def inject_primary_key!(converted_props); end

  # @return [Array] Labels to be set on the node during a create event
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#85
  def labels_for_create; end

  # Saves the model.
  #
  # If the model is new a record gets created in the database, otherwise the existing record gets updated.
  # If perform_validation is true validations run.
  # If any of them fail the action is cancelled and save returns false.
  # If the flag is false validations are bypassed altogether.
  # See ActiveRecord::Validations for more information.
  # There's a series of callbacks associated with save.
  # If any of the before_* callbacks return false the action is cancelled and save returns false.
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#25
  def save(*_arg0); end

  # Persist the object to the database.  Validations and Callbacks are included
  # by default but validation can be disabled by passing :validate => false
  # to #save!  Creates a new transaction.
  #
  # @raise a RecordInvalidError if there is a problem during save.
  # @return nil
  # @see #save
  # @see ActiveGraph::Rails::Validations ActiveGraph::Rails::Validations - for the :validate parameter
  # @see ActiveGraph::Rails::Callbacks ActiveGraph::Rails::Callbacks - for callbacks
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#49
  def save!(*args); end

  private

  # The pending associations are cleared during the save process, so it's necessary to
  # build the processable hash before it begins.
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#97
  def cascade_save; end

  # source://activegraph//lib/active_graph/node/persistence.rb#91
  def destroy_query; end
end

# source://activegraph//lib/active_graph/node/persistence.rb#103
module ActiveGraph::Node::Persistence::ClassMethods
  # Creates and saves a new node
  #
  # @param props [Hash] the properties the new node should have
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#106
  def create(props = T.unsafe(nil)); end

  # Same as #create, but raises an error if there is a problem during save.
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#114
  def create!(props = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/persistence.rb#135
  def find_or_create(find_attributes, set_attributes = T.unsafe(nil)); end

  # Finds the first node with the given attributes, or calls create if none found
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#144
  def find_or_create_by(attributes, &block); end

  # Same as #find_or_create_by, but calls #create! so it raises an error if there is a problem during save.
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#149
  def find_or_create_by!(attributes, &block); end

  # source://activegraph//lib/active_graph/node/persistence.rb#153
  def find_or_initialize_by(attributes); end

  # source://activegraph//lib/active_graph/node/persistence.rb#157
  def load_entity(id); end

  # source://activegraph//lib/active_graph/node/persistence.rb#121
  def merge(match_attributes, optional_attrs = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/persistence.rb#163
  def query_base_for(neo_id, var = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/node/persistence.rb#169
  def on_create_clause(clause); end

  # source://activegraph//lib/active_graph/node/persistence.rb#177
  def on_match_clause(clause); end
end

# source://activegraph//lib/active_graph/node/persistence.rb#3
class ActiveGraph::Node::Persistence::RecordInvalidError < ::RuntimeError
  # @return [RecordInvalidError] a new instance of RecordInvalidError
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#6
  def initialize(record); end

  # Returns the value of attribute record.
  #
  # source://activegraph//lib/active_graph/node/persistence.rb#4
  def record; end
end

# source://activegraph//lib/active_graph/node/property.rb#2
module ActiveGraph::Node::Property
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveGraph::Shared::MassAssignment
  include ::ActiveModel::AttributeMethods
  include ::ActiveGraph::Shared::Attributes
  include ::ActiveGraph::Shared::TypecastedAttributes
  include ::ActiveModel::Dirty
  include ::ActiveGraph::Shared::Property

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Attributes::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::TypecastedAttributes::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Property::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Property::ClassMethods

  # source://activegraph//lib/active_graph/node/property.rb#6
  def initialize(attributes = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/node/property.rb#49
  def inspect_attributes; end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
  end
end

# source://activegraph//lib/active_graph/node/property.rb#11
module ActiveGraph::Node::Property::ClassMethods
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/property.rb#21
  def association_key?(key); end

  # Extracts keys from attributes hash which are associations of the model
  # TODO: Validate separately that relationships are getting the right values?  Perhaps also store the values and persist relationships on save?
  #
  # source://activegraph//lib/active_graph/node/property.rb#14
  def extract_association_attributes!(attributes); end

  private

  # All keys which could be association setter methods (including _id/_ids)
  #
  # source://activegraph//lib/active_graph/node/property.rb#34
  def association_method_keys; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/property.rb#27
  def contains_association?(attributes); end
end

# Helper methods to return ActiveGraph::Core::Query objects.  A query object can be used to successively build a cypher query
#
#    person.query_as(:n).match('n-[:friend]-o').return(o: :name) # Return the names of all the person's friends
#
# source://activegraph//lib/active_graph/node/query.rb#7
module ActiveGraph::Node::Query
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Node::Query::ClassMethods

  # Starts a new QueryProxy with the starting identifier set to the given argument and QueryProxy source_object set to the node instance.
  # This method does not exist within QueryProxy and can only be used to start a new chain.
  #
  # @example Start a new QueryProxy chain with the first identifier set manually
  #   # Generates: MATCH (s:`Student`), (l:`Lesson`), s-[rel1:`ENROLLED_IN`]->(l:`Lesson`) WHERE ID(s) = $neo_id_17963
  #   student.as(:s).lessons(:l)
  # @param node_var [String, Symbol] The identifier to use within the QueryProxy object
  # @return [ActiveGraph::Node::Query::QueryProxy]
  #
  # source://activegraph//lib/active_graph/node/query.rb#31
  def as(node_var); end

  # Returns a Query object with the current node matched the specified variable name
  #
  # @example Return the names of all of Mike's friends
  #   # Generates: MATCH (mike:Person), mike-[:friend]-friend WHERE ID(mike) = 123 RETURN friend.name
  #   mike.query_as(:mike).match('mike-[:friend]-friend').return(friend: :name)
  # @param node_var [Symbol, String] The variable name to specify in the query
  # @return [ActiveGraph::Core::Query]
  #
  # source://activegraph//lib/active_graph/node/query.rb#18
  def query_as(node_var); end
end

# source://activegraph//lib/active_graph/node/query.rb#35
module ActiveGraph::Node::Query::ClassMethods
  # Start a new QueryProxy with the starting identifier set to the given argument.
  # This method does not exist within QueryProxy, it can only be called at the class level to create a new QP object.
  # To set an identifier within a QueryProxy chain, give it as the first argument to a chained association.
  #
  # @example Start a new QueryProxy where the first identifier is set manually.
  #   # Generates: MATCH (s:`Student`), (result_lessons:`Lesson`), s-[rel1:`ENROLLED_IN`]->(result_lessons:`Lesson`)
  #   Student.as(:s).lessons
  # @param node_var [String, Symbol] A string or symbol to use as the starting identifier.
  # @return [ActiveGraph::Node::Query::QueryProxy]
  #
  # source://activegraph//lib/active_graph/node/query.rb#70
  def as(node_var); end

  # source://activegraph//lib/active_graph/node/query.rb#51
  def limit(*args); end

  # source://activegraph//lib/active_graph/node/query.rb#51
  def order(*args); end

  # Returns a Query object with all nodes for the model matched as the specified variable name
  #
  # an early Cypher match has already filtered results) where including labels will degrade performance.
  #
  # @example Return the registration number of all cars owned by a person over the age of 30
  #   # Generates: MATCH (person:Person), person-[:owned]-car WHERE person.age > 30 RETURN car.registration_number
  #   Person.query_as(:person).where('person.age > 30').match('person-[:owned]-car').return(car: :registration_number)
  # @param var [Symbol, String] The variable name to specify in the query
  # @param with_labels [Boolean] Should labels be used to build the match? There are situations (neo_id used to filter,
  # @return [ActiveGraph::Core::Query]
  #
  # source://activegraph//lib/active_graph/node/query.rb#46
  def query_as(var, with_labels = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query.rb#56
  def query_proxy(options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query.rb#51
  def rel_order(*args); end

  # source://activegraph//lib/active_graph/node/query.rb#51
  def rel_where(*args); end

  # source://activegraph//lib/active_graph/node/query.rb#51
  def rel_where_not(*args); end

  # source://activegraph//lib/active_graph/node/query.rb#51
  def skip(*args); end

  # source://activegraph//lib/active_graph/node/query.rb#51
  def union(*args); end

  # source://activegraph//lib/active_graph/node/query.rb#51
  def where(*args); end

  # source://activegraph//lib/active_graph/node/query.rb#51
  def where_not(*args); end
end

# source://activegraph//lib/active_graph/node/query/query_proxy.rb#5
class ActiveGraph::Node::Query::QueryProxy
  include ::Enumerable
  include ::ActiveGraph::Node::Query::QueryProxyEnumerable
  include ::ActiveGraph::Node::Query::QueryProxyMethods
  include ::ActiveGraph::Node::Query::QueryProxyMethodsOfMassUpdating
  include ::ActiveGraph::Node::Query::QueryProxyFindInBatches
  include ::ActiveGraph::Node::Query::QueryProxyEagerLoading
  include ::ActiveGraph::Node::Dependent::QueryProxyMethods

  # QueryProxy is Node's Cypher DSL. While the name might imply that it creates queries in a general sense,
  # it is actually referring to <tt>ActiveGraph::Core::Query</tt>, which is a pure Ruby Cypher DSL provided by the <tt>activegraph</tt> gem.
  # QueryProxy provides ActiveRecord-like methods for common patterns. When it's not handling CRUD for relationships and queries, it
  # provides Node's association chaining (`student.lessons.teachers.where(age: 30).hobbies`) and enjoys long walks on the
  # beach.
  #
  # It should not ever be necessary to instantiate a new QueryProxy object directly, it always happens as a result of
  # calling a method that makes use of it.
  #
  # originated.
  # <tt>has_many</tt>) that created this object.
  # QueryProxy objects are evaluated lazily.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param model [Constant] The class which included Node (typically a model, hence the name) from which the query
  # @param association [ActiveGraph::Node::HasN::Association] The Node association (an object created by a <tt>has_one</tt> or
  # @param options [Hash] Additional options pertaining to the QueryProxy object. These may include:
  # @return [QueryProxy] a new instance of QueryProxy
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#40
  def initialize(model, association = T.unsafe(nil), options = T.unsafe(nil)); end

  # To add a relationship for the node for the association on this QueryProxy
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#188
  def <<(other_node); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#214
  def [](index); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#251
  def _create_relationship(other_node_or_nodes, properties); end

  # param [TrueClass, FalseClass] with_labels This param is used by certain QueryProxy methods that already have the neo_id and
  # therefore do not need labels.
  # The @association_labels instance var is set during init and used during association chaining to keep labels out of Cypher queries.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#134
  def _model_label_string(with_labels = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#239
  def _nodeify!(*args); end

  # The most recent node to start a QueryProxy chain.
  # Will be nil when using QueryProxy chains on class methods.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#16
  def association; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#121
  def base_query(var, with_labels = T.unsafe(nil)); end

  # Executes the relation chain specified in the block, while keeping the current scope
  #
  # @example Load all people that have friends
  #   Person.all.branch { friends }.to_a # => Returns a list of `Person`
  # @example Load all people that has old friends
  #   Person.all.branch { friends.where('age > 70') }.to_a # => Returns a list of `Person`
  # @return [QueryProxy] A new QueryProxy
  # @yield the block that will be evaluated starting from the current scope
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#204
  def branch(&block); end

  # Returns the value of attribute context.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#285
  def context; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#220
  def create(other_nodes, properties = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#67
  def identity; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#108
  def init_outer_query_var(var); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#57
  def inspect; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def limit(*args); end

  # QueryProxy objects act as a representation of a model at the class level so we pass through calls
  # This allows us to define class functions for reusable query chaining or for end-of-query aggregation/summarizing
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#263
  def method_missing(method_name, *args, **kwargs, &block); end

  # The most recent node to start a QueryProxy chain.
  # Will be nil when using QueryProxy chains on class methods.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#16
  def model; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#287
  def new_link(node_var = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#67
  def node_identity; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def node_order(*args); end

  # The current node identifier on deck, so to speak. It is the object that will be returned by calling `each` and the last node link
  # in the QueryProxy chain.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#66
  def node_var; end

  # Since there are rel_where and rel_order methods, it seems only natural for there to be node_where and node_order
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def node_where(*args); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def offset(*args); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#281
  def optional?; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def order(*args); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def order_by(*args); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#80
  def params(params); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#177
  def print_cypher(*_arg0, **_arg1, &_arg2); end

  # Like calling #query_as, but for when you don't care about the variable name
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#85
  def query; end

  # Build a ActiveGraph::Core::Query object for the QueryProxy. This is necessary when you want to take an existing QueryProxy chain
  # and work with it from the more powerful (but less friendly) ActiveGraph::Core::Query.
  # .. code-block:: ruby
  #
  #   student.lessons.query_as(:l).with('your cypher here...')
  #
  # @param var [String, Symbol] The identifier to use for node at this link of the QueryProxy chain.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#96
  def query_as(var, with_labels = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#112
  def query_from_chain(chain, base_query, var); end

  # Returns the value of attribute query_proxy.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#62
  def query_proxy; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#255
  def read_attribute_for_serialization(*args); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#74
  def rel_identity; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def rel_order(*args); end

  # The relationship identifier most recently used by the QueryProxy chain.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#73
  def rel_var; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def rel_where(*args); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def rel_where_not(*args); end

  # Scope all queries to the current scope.
  #
  # .. code-block:: ruby
  #
  #   Comment.where(post_id: 1).scoping do
  #     Comment.first
  #   end
  #
  # TODO: unscoped
  # Please check unscoped if you want to remove all previous scopes (including
  # the default_scope) during the execution of a block.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#150
  def scoping; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def skip(*args); end

  # The most recent node to start a QueryProxy chain.
  # Will be nil when using QueryProxy chains on class methods.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#16
  def source_object; end

  # Returns the value of attribute start_object.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#62
  def start_object; end

  # The most recent node to start a QueryProxy chain.
  # Will be nil when using QueryProxy chains on class methods.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#16
  def starting_query; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#259
  def to_ary(*_arg0, **_arg1, &_arg2); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#175
  def to_cypher(*_arg0, **_arg1, &_arg2); end

  # Returns a string of the cypher query with return objects and params
  #
  # @param columns [Array] array containing symbols of identifiers used in the query
  # @return [String]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#182
  def to_cypher_with_params(columns = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#164
  def union(*args); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#294
  def unpersisted_start_object?; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def where(*args); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#161
  def where_not(*args); end

  protected

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#315
  def _add_links(links); end

  # Methods are underscored to prevent conflict with user class methods
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#311
  def _add_params(params); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#342
  def _association_arrow(properties = T.unsafe(nil), create = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#350
  def _association_chain_var; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#360
  def _association_query_start(var); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#346
  def _chain_level; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#300
  def _create_relation_or_defer(other_node); end

  # @param var [String, Symbol] The Cypher identifier to use within the match string
  # @param with_labels [Boolean] Send "true" to include model labels where possible.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#325
  def _match_arg(var, with_labels); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#334
  def _query; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#319
  def _query_model_as(var, with_labels = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#367
  def _rel_chain_var; end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#338
  def _result_string(index = T.unsafe(nil)); end

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#371
  def context=(_arg0); end

  private

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#382
  def build_deeper_query_proxy(method, args); end

  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#375
  def instance_vars_from_options!(options); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy.rb#277
  def respond_to_missing?(method_name, include_all = T.unsafe(nil)); end
end

# source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#5
class ActiveGraph::Node::Query::QueryProxy::Link
  # @return [Link] a new instance of Link
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#9
  def initialize(clause, arg, args = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#15
  def args(var, rel_var); end

  # Returns the value of attribute clause.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#7
  def clause; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#27
  def end_of_subquery?; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#23
  def start_of_subquery?; end

  # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#31
  def subquery_var(original_var); end

  # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#37
  def update_outer_query_var(original_var); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#94
    def continuation_union_subquery_proc(outer_proxy, model, subquery_part, loop_index); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#214
    def converted_key(model, key); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#210
    def converted_keys(model, arg); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#222
    def converted_value(model, key, value); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#204
    def for_arg(model, clause, arg, *args); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#192
    def for_args(model, clause, args, association = T.unsafe(nil)); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#159
    def for_association(name, value, n_string, model); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#44
    def for_clause(clause, arg, model, *args); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#120
    def for_node_where_clause(arg, model, *args); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#188
    def for_order_clause(arg, model); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#184
    def for_rel_order_clause(arg, _); end

    # We don't accept strings here. If you want to use a string, just use where.
    #
    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#170
    def for_rel_where_clause(arg, _, association); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#178
    def for_rel_where_not_clause(*args); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#51
    def for_union_clause(arg, model, *args); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#120
    def for_where_clause(arg, model, *args); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#139
    def for_where_not_clause(*args); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#82
    def independent_union_subquery_proc(proxy, loop_index); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#73
    def init_union_link(proxy, model, subquery_part, loop_index, args); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#145
    def new_for_key_and_value(model, key, value); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#61
    def post_subquery_with_clause(first_clause, args); end

    # source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#108
    def uniq_param_generator_lambda; end
  end
end

# source://activegraph//lib/active_graph/node/query/query_proxy/link.rb#6
ActiveGraph::Node::Query::QueryProxy::Link::OUTER_SUBQUERY_PREFIX = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/node/query/query_proxy.rb#158
ActiveGraph::Node::Query::QueryProxy::METHODS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#4
module ActiveGraph::Node::Query::QueryProxyEagerLoading
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#45
  def association_tree_class; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#53
  def first; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#15
  def perform_query; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#11
  def pluck_vars(node, rel); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#36
  def propagate_context(query_proxy); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#29
  def with_associations(*spec); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#41
  def with_associations_tree; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#49
  def with_associations_tree=(tree); end

  private

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#59
  def add_to_cache(rel, node, element); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#97
  def as_alias(var); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#117
  def before_pluck(query); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#113
  def build_query; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#74
  def cache_and_init(node, element); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#164
  def chain; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#101
  def escape(s); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#69
  def init_associations(node, element); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#150
  def optional_match(base_query, path); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#142
  def optional_match_with_where(base_query, path, _); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#105
  def path_name(path); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#109
  def path_names; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#121
  def query_from_association_tree; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#138
  def relationship_collection(path); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#159
  def relationship_part(association, path_name, rel_length); end

  # @yield [escape(parts.compact.join('_'))]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#82
  def var(*parts); end

  # In neo4j version 2.1.8 this fails due to a bug:
  # MATCH (`n`) WITH `n` RETURN `n`
  # but this
  # MATCH (`n`) WITH n RETURN `n`
  # and this
  # MATCH (`n`) WITH `n` AS `n` RETURN `n`
  # does not
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#93
  def var_fix(*var); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#130
  def with_association_query_part(base_query, path, previous_with_vars); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#78
  def with_associations_return_clause; end
end

# source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#5
class ActiveGraph::Node::Query::QueryProxyEagerLoading::AssociationTree < ::Hash
  # @return [AssociationTree] a new instance of AssociationTree
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#8
  def initialize(model, name = T.unsafe(nil), rel_length = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#50
  def add_key(key, length = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#54
  def add_nested(key, value, length = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#20
  def add_spec(spec); end

  # Returns the value of attribute association.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#6
  def association; end

  # Sets the attribute association
  #
  # @param value the value to set the attribute association to.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#6
  def association=(_arg0); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#16
  def clone; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#37
  def fail_spec(spec); end

  # Returns the value of attribute model.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#6
  def model; end

  # Sets the attribute model
  #
  # @param value the value to set the attribute model to.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#6
  def model=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#6
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#6
  def name=(_arg0); end

  # Returns the value of attribute path.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#6
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#6
  def path=(_arg0); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#42
  def paths(*prefix); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#46
  def process_hash(spec); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#58
  def process_string(str); end

  # Returns the value of attribute rel_length.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#6
  def rel_length; end

  # Sets the attribute rel_length
  #
  # @param value the value to set the attribute rel_length to.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#6
  def rel_length=(_arg0); end

  private

  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading/association_tree.rb#67
  def target_class(model, key); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#5
class ActiveGraph::Node::Query::QueryProxyEagerLoading::IdentityMap < ::Hash
  # source://activegraph//lib/active_graph/node/query/query_proxy_eager_loading.rb#6
  def add(node); end
end

# Methods related to returning nodes and rels from QueryProxy
#
# source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#5
module ActiveGraph::Node::Query::QueryProxyEnumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::Enumerable

  # Does exactly what you would hope. Without it, comparing `bobby.lessons == sandy.lessons` would evaluate to false because it
  # would be comparing the QueryProxy objects, not the lessons themselves.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#64
  def ==(other); end

  # Just like every other <tt>each</tt> but it allows for optional params to support the versions that also return relationships.
  # The <tt>node</tt> and <tt>rel</tt> params are typically used by those other methods but there's nothing stopping you from
  # using `your_node.each(true, true)` instead of `your_node.each_with_rel`.
  #
  # @return [Enumerable] An enumerable containing some combination of nodes and rels.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#12
  def each(node = T.unsafe(nil), rel = T.unsafe(nil), &block); end

  # When called at the end of a QueryProxy chain, it will return the resultant relationship objects intead of nodes.
  # For example, to return the relationship between a given student and their lessons:
  #
  # .. code-block:: ruby
  #
  #   student.lessons.each_rel do |rel|
  #
  # @return [Enumerable] An enumerable containing any number of applicable relationship objects.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#48
  def each_rel(&block); end

  # When called at the end of a QueryProxy chain, it will return the nodes and relationships of the last link.
  # For example, to return a lesson and each relationship to a given student:
  #
  # .. code-block:: ruby
  #
  #   student.lessons.each_with_rel do |lesson, rel|
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#58
  def each_with_rel(&block); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#36
  def fetch_result_cache; end

  # For getting variables which have been defined as part of the association chain
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#69
  def pluck(*args); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#16
  def result(node = T.unsafe(nil), rel = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#28
  def result_cache?(node = T.unsafe(nil), rel = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#32
  def result_cache_for(node = T.unsafe(nil), rel = T.unsafe(nil)); end

  protected

  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#85
  def ensure_distinct(node, force = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#91
  def pluck_vars(node, rel); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_enumerable.rb#98
  def set_instance_caches(instance, node, rel); end
end

# source://activegraph//lib/active_graph/node/query/query_proxy_find_in_batches.rb#4
module ActiveGraph::Node::Query::QueryProxyFindInBatches
  # source://activegraph//lib/active_graph/node/query/query_proxy_find_in_batches.rb#11
  def find_each(options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_find_in_batches.rb#5
  def find_in_batches(options = T.unsafe(nil)); end
end

# source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#5
module ActiveGraph::Node::Query::QueryProxyMethods
  # Returns all relationships across a QueryProxy chain between a given node or array of nodes and the preceeding link.
  #
  # @param node [#neo_id, String, Enumerable] An object to be sent to `match_to`. See params for that method.
  # @return An enumerable of relationship objects.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#145
  def all_rels_to(node); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#20
  def as(node_var); end

  # Takes an Array of Node models and applies the appropriate WHERE clause
  # So for a `Teacher` model inheriting from a `Person` model and an `Article` model
  # if you called .as_models([Teacher, Article])
  # The where clause would look something like:
  #
  # .. code-block:: cypher
  #
  #   WHERE (node_var:Teacher:Person OR node_var:Article)
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#184
  def as_models(models); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#78
  def blank?(target = T.unsafe(nil)); end

  # @return [Integer] number of nodes of this class
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#55
  def count(distinct = T.unsafe(nil), target = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#44
  def distinct; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#78
  def empty?(target = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#101
  def exists?(node_condition = T.unsafe(nil), target = T.unsafe(nil)); end

  # Give ability to call `#find` on associations to get a scoped find
  # Doesn't pass through via `method_missing` because Enumerable has a `#find` method
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#26
  def find(*args); end

  # When called, this method returns a single node that satisfies the match specified in the params hash.
  # If no existing node is found to satisfy the match, one is created or associated as expected.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#152
  def find_or_create_by(params); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#163
  def find_or_initialize_by(attributes, &block); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#30
  def first(target = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#167
  def first_or_initialize(attributes = T.unsafe(nil), &block); end

  # Gives you the first relationship between the last link of a QueryProxy chain and a given node
  # Shorthand for `MATCH (start)-[r]-(other_node) WHERE ID(other_node) = #{other_node.neo_id} RETURN r`
  #
  # @param node [#neo_id, String, Enumerable] An object to be sent to `match_to`. See params for that method.
  # @return A relationship (Relationship, CypherRelationship, EmbeddedRelationship) or nil.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#138
  def first_rel_to(node); end

  # Matches all nodes having at least a relation
  #
  # @example Load all people having a friend
  #   Person.all.having_rel(:friends).to_a # => Returns a list of `Person`
  # @example Load all people having a best friend
  #   Person.all.having_rel(:friends, best: true).to_a # => Returns a list of `Person`
  # @return [QueryProxy] A new QueryProxy
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#203
  def having_rel(association_name, rel_properties = T.unsafe(nil)); end

  # @param other [ActiveGraph::Node, ActiveGraph::Node, String] An instance of a Neo4j.rb model, a core node, or a string uuid
  # @param target [String, Symbol] An identifier of a link in the Cypher chain
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#88
  def include?(other, target = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#34
  def last(target = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#69
  def length(*_arg0, **_arg1, &_arg2); end

  # TODO: update this with public API methods if/when they are exposed
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#72
  def limit_value; end

  # Shorthand for `MATCH (start)-[r]-(other_node) WHERE ID(other_node) = #{other_node.neo_id}`
  # The `node` param can be a persisted Node instance, any string or integer, or nil.
  # When it's a node, it'll use the object's neo_id, which is fastest. When not nil, it'll figure out the
  # primary key of that model. When nil, it uses `1 = 2` to prevent matching all records, which is the default
  # behavior when nil is passed to `where` in QueryProxy.
  #
  # @param node [#neo_id, String, Enumerable] A node, a string representing a node's ID, or an enumerable of nodes or IDs.
  # @return [ActiveGraph::Node::Query::QueryProxy] A QueryProxy object upon which you can build.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#119
  def match_to(node); end

  # Matches all nodes not having a certain relation
  #
  # @example Load all people not having friends
  #   Person.all.not_having_rel(:friends).to_a # => Returns a list of `Person`
  # @example Load all people not having best friends
  #   Person.all.not_having_rel(:friends, best: true).to_a # => Returns a list of `Person`
  # @return [QueryProxy] A new QueryProxy
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#217
  def not_having_rel(association_name, rel_properties = T.unsafe(nil)); end

  # A shortcut for attaching a new, optional match to the end of a QueryProxy chain.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#172
  def optional(association, node_var = T.unsafe(nil), rel_var = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#38
  def order_property; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#50
  def propagate_context(query_proxy); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#16
  def rel; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#10
  def rels; end

  # Returns all relationships across a QueryProxy chain between a given node or array of nodes and the preceeding link.
  #
  # @param node [#neo_id, String, Enumerable] An object to be sent to `match_to`. See params for that method.
  # @return An enumerable of relationship objects.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#145
  def rels_to(node); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#65
  def size; end

  private

  # @return [String] The primary key of a the current QueryProxy's model or target class
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#274
  def association_id_key; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#224
  def association_or_fail(association_name); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#288
  def exists_query_start(condition, target); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#228
  def find_inverse_association!(model, source, association); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#258
  def first_and_last(func, target); end

  # @param node [Enumerable] An enumerable of nodes or ids.
  # @return [Array] An array after having `id` called on each object
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#280
  def ids_array(node); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#243
  def initialize_by_current_chain_params(params = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#236
  def inverse_relation_of?(source, source_association, target, target_association); end

  # @yield [target || identity]
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#284
  def query_with_target(target); end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#253
  def where_clause_params; end
end

# source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#7
ActiveGraph::Node::Query::QueryProxyMethods::FIRST = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/node/query/query_proxy_methods.rb#8
ActiveGraph::Node::Query::QueryProxyMethods::LAST = T.let(T.unsafe(nil), String)

# source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#4
module ActiveGraph::Node::Query::QueryProxyMethodsOfMassUpdating
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#59
  def add_rels(node_or_nodes, original_ids); end

  # Deletes the relationship between a node and its last link in the QueryProxy chain. Executed in the database, callbacks will not run.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#38
  def delete(node); end

  # Deletes a group of nodes and relationships within a QP chain. When identifier is omitted, it will remove the last link in the chain.
  # The optional argument must be a node identifier. A relationship identifier will result in a Cypher Error
  #
  # @param identifier [String, Symbol] the optional identifier of the link in the chain to delete.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#26
  def delete_all(identifier = T.unsafe(nil)); end

  # Deletes the relationships between all nodes for the last step in the QueryProxy chain.  Executed in the database, callbacks will not be run.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#44
  def delete_all_rels; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#65
  def delete_rels_for_nodes(original_ids, new_ids); end

  # Returns all relationships between a node and its last link in the QueryProxy chain, destroys them in Ruby. Callbacks will be run.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#76
  def destroy(node); end

  # Deletes the relationships between all nodes for the last step in the QueryProxy chain and replaces them with relationships to the given nodes.
  # Executed in the database, callbacks will not be run.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#51
  def replace_with(node_or_nodes); end

  # Updates some attributes of a group of nodes within a QP chain.
  # The optional argument makes sense only of `updates` is a string.
  #
  # @param updates [Hash, String] An hash or a string of parameters to be updated.
  # @param params [Hash] An hash of parameters for the update string. It's ignored if `updates` is an Hash.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#9
  def update_all(updates, params = T.unsafe(nil)); end

  # Updates some attributes of a group of relationships within a QP chain.
  # The optional argument makes sense only of `updates` is a string.
  #
  # @param updates [Hash, String] An hash or a string of parameters to be updated.
  # @param params [Hash] An hash of parameters for the update string. It's ignored if `updates` is an Hash.
  #
  # source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#18
  def update_all_rels(updates, params = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#94
  def clear_source_object_cache; end

  # source://activegraph//lib/active_graph/node/query/query_proxy_methods_of_mass_updating.rb#83
  def update_all_with_query(var_name, updates, params); end
end

# source://activegraph//lib/active_graph/node/query_methods.rb#3
module ActiveGraph::Node::QueryMethods
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query_methods.rb#34
  def blank?; end

  # @return [Integer] number of nodes of this class
  #
  # source://activegraph//lib/active_graph/node/query_methods.rb#25
  def count(distinct = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query_methods.rb#34
  def empty?; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/query_methods.rb#4
  def exists?(node_condition = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query_methods.rb#46
  def find_each(options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/node/query_methods.rb#40
  def find_in_batches(options = T.unsafe(nil)); end

  # Returns the first node of this class, sorted by ID. Note that this may not be the first node created since Neo4j recycles IDs.
  #
  # source://activegraph//lib/active_graph/node/query_methods.rb#15
  def first; end

  # Returns the last node of this class, sorted by ID. Note that this may not be the first node created since Neo4j recycles IDs.
  #
  # source://activegraph//lib/active_graph/node/query_methods.rb#20
  def last; end

  # @return [Integer] number of nodes of this class
  #
  # source://activegraph//lib/active_graph/node/query_methods.rb#25
  def length(distinct = T.unsafe(nil)); end

  # @return [Integer] number of nodes of this class
  #
  # source://activegraph//lib/active_graph/node/query_methods.rb#25
  def size(distinct = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/node/query_methods.rb#54
  def exists_query_start(node_condition); end
end

# A reflection contains information about an association.
# They are often used in connection with form builders to determine associated classes.
# This module contains methods related to the creation and retrieval of reflections.
#
# source://activegraph//lib/active_graph/node/reflection.rb#5
module ActiveGraph::Node::Reflection
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveGraph::Node::Reflection::ClassMethods

  module GeneratedClassMethods
    def reflections; end
    def reflections=(value); end
    def reflections?; end
  end

  module GeneratedInstanceMethods
    def reflections; end
    def reflections=(value); end
    def reflections?; end
  end
end

# The actual reflection object that contains information about the given association.
# These should never need to be created manually, they will always be created by declaring a :has_many or :has_one association on a model.
#
# source://activegraph//lib/active_graph/node/reflection.rb#39
class ActiveGraph::Node::Reflection::AssociationReflection
  # @return [AssociationReflection] a new instance of AssociationReflection
  #
  # source://activegraph//lib/active_graph/node/reflection.rb#49
  def initialize(macro, name, association); end

  # The association object referenced by this reflection
  #
  # source://activegraph//lib/active_graph/node/reflection.rb#47
  def association; end

  # Returns the name of the target model
  #
  # source://activegraph//lib/active_graph/node/reflection.rb#61
  def class_name; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/reflection.rb#77
  def collection?; end

  # Returns the target model
  #
  # source://activegraph//lib/active_graph/node/reflection.rb#56
  def klass; end

  # The type of association
  #
  # source://activegraph//lib/active_graph/node/reflection.rb#44
  def macro; end

  # The name of the association
  #
  # source://activegraph//lib/active_graph/node/reflection.rb#41
  def name; end

  # source://activegraph//lib/active_graph/node/reflection.rb#69
  def rel_class_name; end

  # source://activegraph//lib/active_graph/node/reflection.rb#65
  def rel_klass; end

  # source://activegraph//lib/active_graph/node/reflection.rb#73
  def type; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/reflection.rb#81
  def validate?; end
end

# Adds methods to the class related to creating and retrieving reflections.
#
# source://activegraph//lib/active_graph/node/reflection.rb#14
module ActiveGraph::Node::Reflection::ClassMethods
  # Returns an array containing one reflection for each association declared in the model.
  #
  # source://activegraph//lib/active_graph/node/reflection.rb#31
  def reflect_on_all_associations(macro = T.unsafe(nil)); end

  # @param association [Symbol] an association declared on the model
  # @return [ActiveGraph::Node::Reflection::AssociationReflection] of the given association
  #
  # source://activegraph//lib/active_graph/node/reflection.rb#26
  def reflect_on_association(association); end

  private

  # @param macro [Symbol] the association type, :has_many or :has_one
  # @param name [Symbol] the association name
  # @param association_object [ActiveGraph::Node::HasN::Association] the association object created in the course of creating this reflection
  #
  # source://activegraph//lib/active_graph/node/reflection.rb#18
  def create_reflection(macro, name, association_object, model); end
end

# source://activegraph//lib/active_graph/node/rels.rb#2
module ActiveGraph::Node::Rels
  extend ::Forwardable

  # source://activegraph//lib/active_graph/node/rels.rb#6
  def _rels_delegator; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def create_rel(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def node(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def nodes(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def rel(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def rel?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def rels(*args, **_arg1, &block); end
end

# source://activegraph//lib/active_graph/node/scope.rb#2
module ActiveGraph::Node::Scope
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Node::Scope::ClassMethods
end

# source://activegraph//lib/active_graph/node/scope.rb#9
module ActiveGraph::Node::Scope::ClassMethods
  # source://activegraph//lib/active_graph/node/scope.rb#81
  def _call_scope_context(eval_context, *query_params, **kwargs, &proc); end

  # source://activegraph//lib/active_graph/node/scope.rb#91
  def all(new_var = T.unsafe(nil)); end

  # @return [Hash] of scopes available to this model. Keys are scope name, value is scope callable.
  #
  # source://activegraph//lib/active_graph/node/scope.rb#75
  def full_scopes; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/scope.rb#57
  def has_scope?(name); end

  # Similar to ActiveRecord scope
  #
  # @example without argument
  #   class Person
  #   include ActiveGraph::Node
  #   property :name
  #   property :score
  #   has_many :out, :friends, type: :has_friend, model_class: self
  #   scope :top_students, -> { where(score: 42)}") }
  #   end
  #   Person.top_students.to_a
  #   a_person.friends.top_students.to_a
  #   a_person.friends.friends.top_students.to_a
  #   a_person.friends.top_students.friends.to_a
  # @example Argument for scopes
  #   Person.scope :level, ->(num) { where(level_num: num)}
  # @example Argument as a cypher identifier
  #   class Person
  #   include ActiveGraph::Node
  #   property :name
  #   property :score
  #   has_many :out, :friends, type: :has_friend, model_class: self
  #   scope :great_students, ->(identifier) { where("#{identifier}.score > 41") }
  #   end
  #   Person.as(:all_people).great_students(:all_people).to_a
  # @see http://guides.rubyonrails.org/active_record_querying.html#scopes
  #
  # source://activegraph//lib/active_graph/node/scope.rb#39
  def scope(name, proc); end

  # @return [Boolean] true if model has access to scope with this name
  #
  # source://activegraph//lib/active_graph/node/scope.rb#65
  def scope?(name); end

  # @return [Hash] of scopes assigned to this model. Keys are scope name, value is scope callable.
  #
  # source://activegraph//lib/active_graph/node/scope.rb#70
  def scopes; end
end

# source://activegraph//lib/active_graph/node/scope.rb#101
class ActiveGraph::Node::Scope::ScopeEvalContext
  # @return [ScopeEvalContext] a new instance of ScopeEvalContext
  #
  # source://activegraph//lib/active_graph/node/scope.rb#102
  def initialize(target, query_proxy); end

  # source://activegraph//lib/active_graph/node/scope.rb#107
  def identity; end

  # source://activegraph//lib/active_graph/node/scope.rb#112
  def limit(*args); end

  # method_missing is not delegated to super class but to aggregated class
  #
  # source://activegraph//lib/active_graph/node/scope.rb#121
  def method_missing(name, *params, **kwargs, &block); end

  # source://activegraph//lib/active_graph/node/scope.rb#112
  def order(*args); end

  # source://activegraph//lib/active_graph/node/scope.rb#112
  def rel_order(*args); end

  # source://activegraph//lib/active_graph/node/scope.rb#112
  def rel_where(*args); end

  # source://activegraph//lib/active_graph/node/scope.rb#112
  def rel_where_not(*args); end

  # source://activegraph//lib/active_graph/node/scope.rb#112
  def skip(*args); end

  # source://activegraph//lib/active_graph/node/scope.rb#112
  def union(*args); end

  # source://activegraph//lib/active_graph/node/scope.rb#112
  def where(*args); end

  # source://activegraph//lib/active_graph/node/scope.rb#112
  def where_not(*args); end

  private

  # source://activegraph//lib/active_graph/node/scope.rb#132
  def query_proxy_or_target; end
end

# source://activegraph//lib/active_graph/node/unpersisted.rb#3
module ActiveGraph::Node::Unpersisted
  # source://activegraph//lib/active_graph/node/unpersisted.rb#24
  def clear_deferred_nodes_for_association(association_name); end

  # source://activegraph//lib/active_graph/node/unpersisted.rb#10
  def defer_create(association_name, object, options = T.unsafe(nil)); end

  # The values in this Hash are returned and used outside by reference
  # so any modifications to the Array should be in-place
  #
  # source://activegraph//lib/active_graph/node/unpersisted.rb#6
  def deferred_create_cache; end

  # source://activegraph//lib/active_graph/node/unpersisted.rb#16
  def deferred_nodes_for_association(association_name); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/node/unpersisted.rb#20
  def pending_deferred_creations?; end

  private

  # source://activegraph//lib/active_graph/node/unpersisted.rb#30
  def process_unpersisted_nodes!; end
end

# This mixin replace the original save method and performs validation before the save.
#
# source://activegraph//lib/active_graph/node/validations.rb#4
module ActiveGraph::Node::Validations
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveGraph::Shared::Validations

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveGraph::Node::Validations::ClassMethods

  # @return [Boolean] true if valid
  #
  # source://activegraph//lib/active_graph/node/validations.rb#9
  def valid?(context = T.unsafe(nil)); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# source://activegraph//lib/active_graph/node/validations.rb#15
module ActiveGraph::Node::Validations::ClassMethods
  # source://activegraph//lib/active_graph/node/validations.rb#16
  def validates_uniqueness_of(*attr_names); end
end

# source://activegraph//lib/active_graph/node/validations.rb#21
class ActiveGraph::Node::Validations::UniquenessValidator < ::ActiveModel::EachValidator
  # @return [UniquenessValidator] a new instance of UniquenessValidator
  #
  # source://activegraph//lib/active_graph/node/validations.rb#22
  def initialize(options); end

  # source://activegraph//lib/active_graph/node/validations.rb#32
  def found(record, attribute, value); end

  # source://activegraph//lib/active_graph/node/validations.rb#50
  def message(instance); end

  # source://activegraph//lib/active_graph/node/validations.rb#54
  def scope_conditions(instance, attributes); end

  # source://activegraph//lib/active_graph/node/validations.rb#26
  def validate_each(record, attribute, value); end
end

# source://activegraph//lib/active_graph/node/wrapping.rb#3
module ActiveGraph::Node::Wrapping
  class << self
    # source://activegraph//lib/active_graph/node/wrapping.rb#17
    def class_to_wrap(labels); end

    # source://activegraph//lib/active_graph/node/wrapping.rb#8
    def wrapper(node); end

    private

    # source://activegraph//lib/active_graph/node/wrapping.rb#46
    def association_model_namespace; end

    # source://activegraph//lib/active_graph/node/wrapping.rb#30
    def constant_for_label(label); end

    # source://activegraph//lib/active_graph/node/wrapping.rb#34
    def constantized_label(label); end

    # source://activegraph//lib/active_graph/node/wrapping.rb#26
    def load_classes_from_labels(labels); end

    # source://activegraph//lib/active_graph/node/wrapping.rb#40
    def populate_constants_for_labels_cache(model_class, labels); end
  end
end

# Only load classes once for performance
#
# source://activegraph//lib/active_graph/node/wrapping.rb#5
ActiveGraph::Node::Wrapping::CONSTANTS_FOR_LABELS_CACHE = T.let(T.unsafe(nil), Hash)

# source://activegraph//lib/active_graph/paginated.rb#2
class ActiveGraph::Paginated
  include ::Enumerable

  # @return [Paginated] a new instance of Paginated
  #
  # source://activegraph//lib/active_graph/paginated.rb#6
  def initialize(items, total, current_page); end

  # source://activegraph//lib/active_graph/paginated.rb#25
  def [](*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute current_page.
  #
  # source://activegraph//lib/active_graph/paginated.rb#4
  def current_page; end

  # source://activegraph//lib/active_graph/paginated.rb#23
  def each(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute items.
  #
  # source://activegraph//lib/active_graph/paginated.rb#4
  def items; end

  # source://activegraph//lib/active_graph/paginated.rb#24
  def pluck(*_arg0, **_arg1, &_arg2); end

  # source://activegraph//lib/active_graph/paginated.rb#25
  def size(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute total.
  #
  # source://activegraph//lib/active_graph/paginated.rb#4
  def total; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/paginated.rb#12
    def create_from(source, page, per_page, order = T.unsafe(nil)); end
  end
end

# Inspired/taken from active_record/migration.rb
#
# source://activegraph//lib/active_graph/error.rb#36
class ActiveGraph::PendingMigrationError < ::ActiveGraph::MigrationError
  # @return [PendingMigrationError] a new instance of PendingMigrationError
  #
  # source://activegraph//lib/active_graph/error.rb#37
  def initialize(migrations); end

  private

  # source://activegraph//lib/active_graph/error.rb#48
  def command_name; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/error.rb#53
  def rails?; end
end

# source://activegraph//lib/active_graph/railtie.rb#12
class ActiveGraph::Railtie < ::Rails::Railtie
  # source://activegraph//lib/active_graph/railtie.rb#13
  def empty_config; end

  # source://activegraph//lib/active_graph/railtie.rb#82
  def final_driver_config!(config); end

  # source://activegraph//lib/active_graph/railtie.rb#98
  def register_neo4j_cypher_logging; end

  # source://activegraph//lib/active_graph/railtie.rb#66
  def setup!(config = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/railtie.rb#86
  def yaml_config_data; end

  # source://activegraph//lib/active_graph/railtie.rb#91
  def yaml_path; end
end

# Raised when Neo4j.rb cannot find record by given id.
#
# source://activegraph//lib/active_graph/error.rb#8
class ActiveGraph::RecordNotFound < ::ActiveGraph::Error
  # @return [RecordNotFound] a new instance of RecordNotFound
  #
  # source://activegraph//lib/active_graph/error.rb#11
  def initialize(message = T.unsafe(nil), model = T.unsafe(nil), primary_key = T.unsafe(nil), id = T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://activegraph//lib/active_graph/error.rb#9
  def id; end

  # Returns the value of attribute model.
  #
  # source://activegraph//lib/active_graph/error.rb#9
  def model; end

  # Returns the value of attribute primary_key.
  #
  # source://activegraph//lib/active_graph/error.rb#9
  def primary_key; end
end

# Makes Neo4j Relationships more or less act like ActiveRecord objects.
# See documentation at https://github.com/neo4jrb/neo4j/wiki/Neo4j%3A%3AActiveRel
#
# source://activegraph//lib/active_graph/relationship.rb#4
module ActiveGraph::Relationship
  include ::ActiveGraph::Shared::Identity
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::Serializers::JSON
  include ::ActiveGraph::Shared
  include ::ActiveGraph::Shared::Initialize
  include ::ActiveGraph::Relationship::Initialize
  include ::ActiveGraph::Shared::Marshal
  include ::ActiveGraph::Shared::SerializedProperties
  include ::ActiveGraph::Shared::MassAssignment
  include ::ActiveModel::AttributeMethods
  include ::ActiveGraph::Shared::Attributes
  include ::ActiveGraph::Shared::TypecastedAttributes
  include ::ActiveModel::Dirty
  include ::ActiveGraph::Shared::Property
  include ::ActiveGraph::Relationship::Property
  include ::ActiveGraph::Shared::Cypher::RelIdentifiers
  include ::ActiveGraph::Shared::Persistence
  include ::ActiveGraph::Relationship::Persistence
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveGraph::Shared::Validations
  include ::ActiveGraph::Relationship::Validations
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveGraph::Shared::Callbacks
  include ::ActiveGraph::Relationship::Callbacks
  include ::ActiveGraph::Relationship::Query
  include ::ActiveGraph::Relationship::Types
  include ::ActiveGraph::Shared::Enum
  include ::ActiveGraph::Shared::PermittedAttributes
  include ::ActiveGraph::Transactions

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::SerializedProperties::ClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Attributes::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::TypecastedAttributes::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Property::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Relationship::Property::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Relationship::Persistence::ClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Relationship::Query::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Relationship::Types::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Enum::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Transactions::ClassMethods

  # source://activegraph//lib/active_graph/relationship.rb#26
  def initialize(from_node = T.unsafe(nil), to_node = T.unsafe(nil), args = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/relationship.rb#41
  def neo4j_obj; end

  # source://activegraph//lib/active_graph/relationship.rb#33
  def node_cypher_representation(node); end

  private

  # source://activegraph//lib/active_graph/relationship.rb#64
  def hash_or_nil(node_or_hash, hash_or_nil); end

  # source://activegraph//lib/active_graph/relationship.rb#60
  def node_or_nil(node); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
    def param_delimiter; end
    def param_delimiter=(value); end
    def param_delimiter?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
    def include_root_in_json; end
    def include_root_in_json?; end
    def param_delimiter=(value); end
  end
end

# source://activegraph//lib/active_graph/relationship/callbacks.rb#3
module ActiveGraph::Relationship::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveGraph::Shared::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activegraph//lib/active_graph/relationship/callbacks.rb#14
  def destroy; end

  # source://activegraph//lib/active_graph/relationship/callbacks.rb#7
  def save(*args); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activegraph//lib/active_graph/relationship.rb#24
class ActiveGraph::Relationship::FrozenRelError < ::ActiveGraph::Error; end

# source://activegraph//lib/active_graph/relationship/initialize.rb#2
module ActiveGraph::Relationship::Initialize
  extend ::ActiveSupport::Concern
  include ::ActiveGraph::Shared::Initialize

  # called when loading the rel from the database
  #
  # @param persisted_rel [ActiveGraph::Embedded::EmbeddedRelationship, Neo4j::Server::CypherRelationship] properties of this relationship
  # @param from_node_id [ActiveGraph::Relationship] The neo_id of the starting node of this rel
  # @param to_node_id [ActiveGraph::Relationship] The neo_id of the ending node of this rel
  # @param type [String] the relationship type
  #
  # source://activegraph//lib/active_graph/relationship/initialize.rb#11
  def init_on_load(persisted_rel, from_node_id, to_node_id, type); end

  # source://activegraph//lib/active_graph/relationship/initialize.rb#19
  def init_on_reload(unwrapped_reloaded); end
end

# source://activegraph//lib/active_graph/relationship.rb#7
ActiveGraph::Relationship::MARSHAL_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/relationship/persistence.rb#2
module ActiveGraph::Relationship::Persistence
  extend ::ActiveSupport::Concern
  include ::ActiveGraph::Shared::Cypher::RelIdentifiers
  include ::ActiveGraph::Shared::Persistence

  mixes_in_class_methods ::ActiveGraph::Relationship::Persistence::ClassMethods

  # Increments concurrently a numeric attribute by a centain amount
  #
  # @param attribute [Symbol, String] name of the attribute to increment
  # @param by [Integer, Float] amount to increment
  #
  # source://activegraph//lib/active_graph/relationship/persistence.rb#42
  def concurrent_increment!(attribute, by = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#91
  def create_method; end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#46
  def create_model; end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#27
  def cypher_identifier; end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#55
  def delete_has_one_rel; end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#11
  def from_node_identifier; end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#19
  def from_node_identifier=(id); end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#60
  def query_as(var); end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#31
  def save(*_arg0); end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#35
  def save!(*args); end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#15
  def to_node_identifier; end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#23
  def to_node_identifier=(id); end

  private

  # source://activegraph//lib/active_graph/relationship/persistence.rb#127
  def _create_rel; end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#97
  def destroy_query; end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#123
  def type_validation_error_message(node, type_class); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/relationship/persistence.rb#112
  def valid_type?(type_object, node); end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#101
  def validate_node_classes!; end
end

# source://activegraph//lib/active_graph/relationship/persistence.rb#66
module ActiveGraph::Relationship::Persistence::ClassMethods
  # Creates a new relationship between objects
  #
  # @param args [Hash] the properties the new relationship should have
  #
  # source://activegraph//lib/active_graph/relationship/persistence.rb#69
  def create(*args); end

  # Same as #create, but raises an error if there is a problem during save.
  #
  # source://activegraph//lib/active_graph/relationship/persistence.rb#74
  def create!(*args); end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#78
  def create_method; end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#82
  def load_entity(id); end

  # source://activegraph//lib/active_graph/relationship/persistence.rb#86
  def query_as(neo_id, var = T.unsafe(nil)); end
end

# source://activegraph//lib/active_graph/relationship/persistence.rb#8
class ActiveGraph::Relationship::Persistence::ModelClassInvalidError < ::RuntimeError; end

# This class builds and executes a Cypher query, using information from the graph objects to determine
#   whether they need to be created simultaneously.
#   It keeps the rel instance from being responsible for inspecting the nodes or talking with Shared::QueryFactory.
#
# source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#5
class ActiveGraph::Relationship::Persistence::QueryFactory
  # @return [QueryFactory] a new instance of QueryFactory
  #
  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#9
  def initialize(from_node, to_node, rel); end

  # TODO: This feels like it should also wrap the rel, but that is handled in ActiveGraph::Relationship::Persistence at the moment.
  # Builds and executes the query using the objects giving during init.
  # It holds the process:
  # * Execute node callbacks if needed
  # * Create and execute the query
  # * Mix the query response into the unpersisted objects given during init
  #
  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#21
  def build!; end

  # Returns the value of attribute from_node.
  #
  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#7
  def from_node; end

  # Returns the value of attribute rel.
  #
  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#7
  def rel; end

  # Returns the value of attribute to_node.
  #
  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#7
  def to_node; end

  # Returns the value of attribute unwrapped_rel.
  #
  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#7
  def unwrapped_rel; end

  private

  # Each node must be either created or matched before the relationship can be created. This class does not know or care about
  #   how that happens, it just knows that it needs a usable ActiveGraph::Core::Query object to do that.
  # This method is "iterative" because it creates one factory for each node but the second builds upon the first.
  #
  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#57
  def iterative_query; end

  # Node callbacks only need to be executed if the node is not persisted. We let the `conditional_callback` method do the work,
  #   we only have to give it the type of callback we expect to be run and the condition which, if true, will prevent it from executing.
  #
  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#37
  def node_before_callbacks!; end

  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#91
  def node_symbols; end

  # Isolates the dependency to the shared class. This has an awareness of ActiveGraph::Core::Query and will match or create
  #   based on the current state of the object passed in.
  #
  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#66
  def query_factory(obj, sym, factory = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#31
  def rel_id; end

  # We only need to return objects from our query that were created during it, otherwise we impact performance.
  #
  # @return [Array<Symbol>] The Cypher identifiers that will be returned from the query.
  #
  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#74
  def unpersisted_return_ids; end

  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#46
  def validate_unpersisted_nodes!; end

  # @param node [ActiveGraph::Node] A node, persisted or unpersisted
  # @param res [Struct] The result of calling `return` on a ActiveGraph::Core::Query object. It responds to the same keys
  #   as our graph objects. If the object is unpersisted and was created during the query, the unwrapped node is mixed
  #   in, making the object reflect as "persisted".
  # @param key [Symbol] :from_node or :to_node, the object to request from the response.
  #
  # source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#85
  def wrap!(node, res, key); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/relationship/persistence/query_factory.rb#6
ActiveGraph::Relationship::Persistence::QueryFactory::NODE_SYMBOLS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/relationship/persistence.rb#9
class ActiveGraph::Relationship::Persistence::RelCreateFailedError < ::RuntimeError; end

# source://activegraph//lib/active_graph/relationship/persistence.rb#7
class ActiveGraph::Relationship::Persistence::RelInvalidError < ::RuntimeError; end

# source://activegraph//lib/active_graph/relationship/property.rb#2
module ActiveGraph::Relationship::Property
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveGraph::Shared::MassAssignment
  include ::ActiveModel::AttributeMethods
  include ::ActiveGraph::Shared::Attributes
  include ::ActiveGraph::Shared::TypecastedAttributes
  include ::ActiveModel::Dirty
  include ::ActiveGraph::Shared::Property

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Attributes::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::TypecastedAttributes::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Property::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Relationship::Property::ClassMethods

  # source://activegraph//lib/active_graph/relationship/property.rb#26
  def initialize(attributes = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/relationship/property.rb#30
  def creates_unique_option; end

  # source://activegraph//lib/active_graph/relationship/property.rb#7
  def end_node; end

  # source://activegraph//lib/active_graph/relationship/property.rb#18
  def end_node_id; end

  # source://activegraph//lib/active_graph/relationship/property.rb#7
  def from_node; end

  # source://activegraph//lib/active_graph/relationship/property.rb#8
  def from_node=(argument); end

  # source://activegraph//lib/active_graph/relationship/property.rb#7
  def start_node; end

  # source://activegraph//lib/active_graph/relationship/property.rb#18
  def start_node_id; end

  # source://activegraph//lib/active_graph/relationship/property.rb#7
  def to_node; end

  # source://activegraph//lib/active_graph/relationship/property.rb#8
  def to_node=(argument); end

  # @return [String] a string representing the relationship type that will be created
  #
  # source://activegraph//lib/active_graph/relationship/property.rb#22
  def type; end

  private

  # source://activegraph//lib/active_graph/relationship/property.rb#86
  def inspect_attributes; end

  # source://activegraph//lib/active_graph/relationship/property.rb#81
  def load_nodes(from_node = T.unsafe(nil), to_node = T.unsafe(nil)); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
  end
end

# source://activegraph//lib/active_graph/relationship/property.rb#34
module ActiveGraph::Relationship::Property::ClassMethods
  include ::ActiveGraph::Shared::Cypher::CreateMethod

  # source://activegraph//lib/active_graph/relationship/property.rb#63
  def _from_class; end

  # source://activegraph//lib/active_graph/relationship/property.rb#63
  def _to_class; end

  # source://activegraph//lib/active_graph/relationship/property.rb#53
  def end_class(argument = T.unsafe(nil)); end

  # Extracts keys from attributes hash which are relationships of the model
  # TODO: Validate separately that relationships are getting the right values?  Perhaps also store the values and persist relationships on save?
  #
  # source://activegraph//lib/active_graph/relationship/property.rb#39
  def extract_association_attributes!(attributes); end

  # source://activegraph//lib/active_graph/relationship/property.rb#53
  def from_class(argument = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/relationship/property.rb#48
  def id_property_name; end

  # source://activegraph//lib/active_graph/relationship/property.rb#74
  def load_entity(id); end

  # source://activegraph//lib/active_graph/relationship/property.rb#53
  def start_class(argument = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/relationship/property.rb#53
  def to_class(argument = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/relationship/property.rb#66
  def valid_class_argument?(class_argument); end
end

# source://activegraph//lib/active_graph/relationship/query.rb#2
module ActiveGraph::Relationship::Query
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Relationship::Query::ClassMethods
end

# source://activegraph//lib/active_graph/relationship/query.rb#7
module ActiveGraph::Relationship::Query::ClassMethods
  # Performs a basic match on the relationship, returning all results.
  # This is not executed lazily, it will immediately return matching objects.
  #
  # source://activegraph//lib/active_graph/relationship/query.rb#34
  def all; end

  # Returns the object with the specified neo4j id.
  #
  # @param id [String, Integer] of node to find
  #
  # source://activegraph//lib/active_graph/relationship/query.rb#10
  def find(id); end

  # Loads the relationship using its neo_id.
  #
  # source://activegraph//lib/active_graph/relationship/query.rb#16
  def find_by_id(key); end

  # source://activegraph//lib/active_graph/relationship/query.rb#38
  def first; end

  # source://activegraph//lib/active_graph/relationship/query.rb#42
  def last; end

  # Performs a very basic match on the relationship.
  # This is not executed lazily, it will immediately return matching objects.
  # To use a string, prefix the property with "r1"
  #
  # @example Match with a string
  #   MyRelClass.where('r1.grade > r1')
  #
  # source://activegraph//lib/active_graph/relationship/query.rb#28
  def where(args = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/relationship/query.rb#57
  def all_query; end

  # source://activegraph//lib/active_graph/relationship/query.rb#78
  def as_constant(given_class); end

  # source://activegraph//lib/active_graph/relationship/query.rb#73
  def cypher_label(dir = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/relationship/query.rb#62
  def cypher_string(dir = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/relationship/query.rb#48
  def deprecation_warning!; end

  # source://activegraph//lib/active_graph/relationship/query.rb#52
  def where_query; end

  # source://activegraph//lib/active_graph/relationship/query.rb#89
  def where_string(args); end
end

# source://activegraph//lib/active_graph/relationship/query.rb#5
class ActiveGraph::Relationship::Query::RecordNotFound < ::ActiveGraph::RecordNotFound; end

# A container for Relationship's :inbound and :outbound methods. It provides lazy loading of nodes.
# It's important (or maybe not really IMPORTANT, but at least worth mentioning) that calling method_missing
# will result in a query to load the node if the node is not already loaded.
#
# source://activegraph//lib/active_graph/relationship/related_node.rb#5
class ActiveGraph::Relationship::RelatedNode
  # Relationship's related nodes can be initialized with nothing, an integer, or a fully wrapped node.
  #
  # Initialization with nothing happens when a new, non-persisted Relationship object is first initialized.
  #
  # Initialization with an integer happens when a relationship is loaded from the database. It loads using the ID
  # because that is provided by the Cypher response and does not require an extra query.
  #
  # @return [RelatedNode] a new instance of RelatedNode
  #
  # source://activegraph//lib/active_graph/relationship/related_node.rb#14
  def initialize(node = T.unsafe(nil)); end

  # Loads the node if needed, then conducts comparison.
  #
  # source://activegraph//lib/active_graph/relationship/related_node.rb#19
  def ==(other); end

  # source://activegraph//lib/active_graph/relationship/related_node.rb#77
  def class; end

  # @param clazz [String, Symbol, Array] An alternate label to use in the event the node is not present or loaded
  #
  # source://activegraph//lib/active_graph/relationship/related_node.rb#40
  def cypher_representation(clazz); end

  # Loads a node from the database or returns the node if already laoded
  #
  # source://activegraph//lib/active_graph/relationship/related_node.rb#30
  def loaded; end

  # @return [Boolean] indicates whether a node has or has not been fully loaded from the database
  #
  # source://activegraph//lib/active_graph/relationship/related_node.rb#56
  def loaded?; end

  # source://activegraph//lib/active_graph/relationship/related_node.rb#64
  def method_missing(*args, **kwargs, &block); end

  # Returns the neo_id of a given node without loading.
  #
  # source://activegraph//lib/active_graph/relationship/related_node.rb#25
  def neo_id; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/relationship/related_node.rb#60
  def set?; end

  private

  # source://activegraph//lib/active_graph/relationship/related_node.rb#83
  def formatted_label_list(list); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/relationship/related_node.rb#72
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/relationship/related_node.rb#87
  def valid_node_param?(node); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/relationship/related_node.rb#6
class ActiveGraph::Relationship::RelatedNode::UnsetRelatedNodeError < ::ActiveGraph::Error
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# provides mapping of type to model name
#
# source://activegraph//lib/active_graph/relationship/types.rb#4
module ActiveGraph::Relationship::Types
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Relationship::Types::ClassMethods
end

# source://activegraph//lib/active_graph/relationship/types.rb#24
module ActiveGraph::Relationship::Types::ClassMethods
  include ::ActiveGraph::Shared::RelTypeConverters

  # source://activegraph//lib/active_graph/relationship/types.rb#57
  def _wrapped_classes; end

  # source://activegraph//lib/active_graph/relationship/types.rb#61
  def add_wrapped_class(type); end

  # source://activegraph//lib/active_graph/relationship/types.rb#27
  def inherited(subclass); end

  # source://activegraph//lib/active_graph/relationship/types.rb#46
  def namespaced_model_name; end

  # When called without arguments, it will return the current setting or supply a default.
  # When called with arguments, it will change the current setting.
  #
  # @param given_type [String] sets the relationship type when creating relationships via this class
  # @param auto [Boolean] Should the given_type be changed in compliance with the gem's rel decorator setting?
  #
  # source://activegraph//lib/active_graph/relationship/types.rb#35
  def type(given_type = T.unsafe(nil), auto = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/relationship/types.rb#66
  def type?; end

  private

  # source://activegraph//lib/active_graph/relationship/types.rb#72
  def assign_type!(given_type, auto); end
end

# WRAPPED_CLASSES maps relationship types to Relationship models.
#
# Typically, it's a 1:1 relationship, with a type having a model of the same name. Sometimes, someone needs to be a precious
# snowflake and have a model name that doesn't match the rel type, so this comes in handy.
#
# As an example, Chris often finds it easier to name models after the classes that use the relationship: `StudentLesson` instead of
# `EnrolledIn`, because it's easier to remember "A student has a relationship to lesson" than "the type of relationship between Student
# and Lesson is 'EnrolledIn'." After all, that is a big part of why we have models, right? To make our lives easier?
#
# A model is added to WRAPPED_CLASSES when it is initalized AND when the `type` class method is called within a model. This means that
# it's possible a model will be added twice: once with the type version of the model name, again with the custom type. deal_with_it.gif.
#
# source://activegraph//lib/active_graph/relationship/types.rb#18
ActiveGraph::Relationship::Types::WRAPPED_CLASSES = T.let(T.unsafe(nil), Hash)

# source://activegraph//lib/active_graph/relationship/validations.rb#3
module ActiveGraph::Relationship::Validations
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveGraph::Shared::Validations

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# source://activegraph//lib/active_graph/relationship/wrapping.rb#3
module ActiveGraph::Relationship::Wrapping
  class << self
    # source://activegraph//lib/active_graph/relationship/wrapping.rb#20
    def class_from_type(type); end

    # source://activegraph//lib/active_graph/relationship/wrapping.rb#5
    def wrapper(rel); end
  end
end

# source://activegraph//lib/active_graph/error.rb#58
class ActiveGraph::Rollback < ::ActiveGraph::Error; end

# source://activegraph//lib/active_graph/schema/operation.rb#2
module ActiveGraph::Schema; end

# source://activegraph//lib/active_graph/schema/operation.rb#65
class ActiveGraph::Schema::ExactIndexOperation < ::ActiveGraph::Schema::Operation
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/schema/operation.rb#74
  def exist?; end

  # source://activegraph//lib/active_graph/schema/operation.rb#70
  def type; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/schema/operation.rb#66
    def incompatible_operation_classes; end
  end
end

# source://activegraph//lib/active_graph/schema/operation.rb#3
class ActiveGraph::Schema::Operation
  # @return [Operation] a new instance of Operation
  #
  # source://activegraph//lib/active_graph/schema/operation.rb#6
  def initialize(label, property, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/schema/operation.rb#25
  def create!; end

  # source://activegraph//lib/active_graph/schema/operation.rb#50
  def default_options; end

  # source://activegraph//lib/active_graph/schema/operation.rb#35
  def drop!; end

  # source://activegraph//lib/active_graph/schema/operation.rb#39
  def drop_incompatible!; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/schema/operation.rb#46
  def exist?; end

  # source://activegraph//lib/active_graph/schema/operation.rb#31
  def incompatible_operation_classes; end

  # Returns the value of attribute label.
  #
  # source://activegraph//lib/active_graph/schema/operation.rb#4
  def label; end

  # source://activegraph//lib/active_graph/schema/operation.rb#21
  def label_object; end

  # Returns the value of attribute options.
  #
  # source://activegraph//lib/active_graph/schema/operation.rb#4
  def options; end

  # Returns the value of attribute property.
  #
  # source://activegraph//lib/active_graph/schema/operation.rb#4
  def property; end

  # source://activegraph//lib/active_graph/schema/operation.rb#54
  def type; end

  private

  # source://activegraph//lib/active_graph/schema/operation.rb#60
  def schema_query(method); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/schema/operation.rb#17
    def incompatible_operation_classes; end
  end
end

# source://activegraph//lib/active_graph/schema/operation.rb#79
class ActiveGraph::Schema::UniqueConstraintOperation < ::ActiveGraph::Schema::Operation
  # source://activegraph//lib/active_graph/schema/operation.rb#88
  def create!; end

  # source://activegraph//lib/active_graph/schema/operation.rb#97
  def default_options; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/schema/operation.rb#93
  def exist?; end

  # source://activegraph//lib/active_graph/schema/operation.rb#84
  def type; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/schema/operation.rb#80
    def incompatible_operation_classes; end
  end
end

# source://activegraph//lib/active_graph/secure_random_ext.rb#4
module ActiveGraph::SecureRandomExt
  # source://activegraph//lib/active_graph/secure_random_ext.rb#5
  def hex(n = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/secure_random_ext.rb#9
  def uuid; end
end

# source://activegraph//lib/active_graph/shared.rb#2
module ActiveGraph::Shared
  extend ::ActiveSupport::Concern
  extend ::ActiveModel::Naming
  include GeneratedInstanceMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::Serializers::JSON

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods
  mixes_in_class_methods ::ActiveModel::Naming
  mixes_in_class_methods ::ActiveGraph::Shared::ClassMethods

  # source://activegraph//lib/active_graph/shared.rb#40
  def declared_properties; end

  # source://activemodel/7.2.2.1/lib/active_model/naming.rb#255
  def model_name(&_arg0); end

  # source://activegraph//lib/active_graph/shared.rb#44
  def neo4j_query(*args); end

  module GeneratedClassMethods
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
    def param_delimiter; end
    def param_delimiter=(value); end
    def param_delimiter?; end
  end

  module GeneratedInstanceMethods
    def include_root_in_json; end
    def include_root_in_json?; end
    def param_delimiter=(value); end
  end
end

# Attributes provides a set of class methods for defining an attributes
# schema and instance methods for reading and writing attributes.
#
# Originally part of ActiveAttr, https://github.com/cgriego/active_attr
#
# @example Usage
#   class Person
#   include ActiveGraph::Shared::Attributes
#   attribute :name
#   end
#
#   person = Person.new
#   person.name = "Ben Poweski"
#
# source://activegraph//lib/active_graph/shared/attributes.rb#15
module ActiveGraph::Shared::Attributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Attributes::ClassMethods

  # Performs equality checking on the result of attributes and its type.
  #
  # @example Compare for equality.
  #   model == other
  # @param other [ActiveAttr::Attributes, Object] The other model to compare
  # @return [true, false] True if attributes are equal and other is instance
  #   of the same Class, false if not.
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#38
  def ==(other); end

  # Write a single attribute to the model's attribute hash.
  #
  # @example Write the attribute with write_attribute
  #   person.write_attribute(:name, "Benjamin")
  # @example Write an attribute with bracket syntax
  #   person[:name] = "Benjamin"
  # @param name [String, Symbol, #to_s] The name of the attribute to update.
  # @param value [Object] The value to set for the attribute.
  # @raise [UnknownAttributeError] if the attribute is unknown
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#64
  def []=(name, value); end

  # Returns a Hash of all attributes
  #
  # @example Get attributes
  #   person.attributes # => {"name"=>"Ben Poweski"}
  # @return [Hash{String => Object}] The Hash of all attributes
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#49
  def attributes; end

  # source://activegraph//lib/active_graph/shared/attributes.rb#71
  def query_attribute(name); end

  # Write a single attribute to the model's attribute hash.
  #
  # @example Write the attribute with write_attribute
  #   person.write_attribute(:name, "Benjamin")
  # @example Write an attribute with bracket syntax
  #   person[:name] = "Benjamin"
  # @param name [String, Symbol, #to_s] The name of the attribute to update.
  # @param value [Object] The value to set for the attribute.
  # @raise [UnknownAttributeError] if the attribute is unknown
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#64
  def write_attribute(name, value); end

  private

  # Read an attribute from the attributes hash
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#80
  def attribute(name); end

  # Write an attribute to the attributes hash
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#86
  def attribute=(name, value); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#105
  def attribute?(name); end

  # Maps all attributes using the given block
  #
  # @example Stringify attributes
  #   person.attributes_map { |name| send(name).to_s }
  # @return [Hash{String => Object}] The Hash of mapped attributes
  # @yield [name] block called to return hash value
  # @yieldparam name [String] The name of the attribute to map.
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#101
  def attributes_map; end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
  end
end

# source://activegraph//lib/active_graph/shared/attributes.rb#21
ActiveGraph::Shared::Attributes::ATTRIBUTES_METHOD_PATTERNS = T.let(T.unsafe(nil), Symbol)

# source://activegraph//lib/active_graph/shared/attributes.rb#109
module ActiveGraph::Shared::Attributes::ClassMethods
  # Defines an attribute
  #
  # For each attribute that is defined, a getter and setter will be
  # added as an instance method to the model. An
  # {AttributeDefinition} instance will be added to result of the
  # attributes class method.
  #
  # @example Define an attribute.
  #   attribute :name
  # @raise [DangerousAttributeError] if the attribute name conflicts with
  #   existing methods
  # @return [AttributeDefinition] Attribute's definition
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#126
  def attribute(name); end

  # Returns an Array of attribute names as Strings
  #
  # @example Get attribute names
  #   Person.attribute_names
  # @return [Array<String>] The attribute names
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#138
  def attribute_names; end

  # Returns a Hash of AttributeDefinition instances
  #
  # @example Get attribute definitions
  #   Person.attributes
  # @return [ActiveSupport::HashWithIndifferentAccess{String => ActiveGraph::Shared::AttributeDefinition}] The Hash of AttributeDefinition instances
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#149
  def attributes; end

  # Determine if a given attribute name is dangerous
  #
  # Some attribute names can cause conflicts with existing methods
  # on an object. For example, an attribute named "timeout" would
  # conflict with the timeout method that Ruby's Timeout library
  # mixes into Object.
  #
  # @example Testing a harmless attribute
  #   Person.dangerous_attribute? :name #=> false
  # @example Testing a dangerous attribute
  #   Person.dangerous_attribute? :nil #=> "nil?"
  # @param name Attribute name
  # @return [false, String] False or the conflicting method name
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#169
  def dangerous_attribute?(name); end

  # Returns the class name plus its attribute names
  #
  # @example Inspect the model's definition.
  #   Person.inspect
  # @return [String] Human-readable presentation of the attributes
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#183
  def inspect; end

  protected

  # Assign a set of attribute definitions, used when subclassing models
  #
  # @param attributes [Array<ActiveGraph::Shared::DeclaredProperties>] The Array of
  #   AttributeDefinition instances
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#195
  def attributes=(attributes); end

  # Overrides ActiveModel::AttributeMethods to backport 3.2 fix
  #
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#200
  def instance_method_already_implemented?(method_name); end

  private

  # Expand an attribute name into its generated methods names
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#207
  def attribute_methods(name); end

  # Ruby inherited hook to assign superclass attributes to subclasses
  #
  # source://activegraph//lib/active_graph/shared/attributes.rb#212
  def inherited(subclass); end
end

# Methods deprecated on the Object class which can be safely overridden
#
# source://activegraph//lib/active_graph/shared/attributes.rb#20
ActiveGraph::Shared::Attributes::DEPRECATED_OBJECT_METHODS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/shared/type_converters.rb#2
class ActiveGraph::Shared::Boolean
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/shared/callbacks.rb#3
module ActiveGraph::Shared::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activegraph//lib/active_graph/shared/callbacks.rb#18
  def initialize(args = T.unsafe(nil)); end

  # Allows you to perform a callback if a condition is not satisfied.
  #
  # @param kind [Symbol] The callback type to execute unless the guard is true
  # @param guard [TrueClass, FalseClass] When this value is true, the block is yielded without executing callbacks.
  #
  # source://activegraph//lib/active_graph/shared/callbacks.rb#40
  def conditional_callback(kind, guard); end

  # source://activegraph//lib/active_graph/shared/callbacks.rb#22
  def destroy; end

  # source://activegraph//lib/active_graph/shared/callbacks.rb#33
  def touch; end

  private

  # source://activegraph//lib/active_graph/shared/callbacks.rb#51
  def create_model; end

  # source://activegraph//lib/active_graph/shared/callbacks.rb#47
  def create_or_update; end

  # source://activegraph//lib/active_graph/shared/callbacks.rb#58
  def update_model(*_arg0); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activegraph//lib/active_graph/shared/callbacks.rb#6
module ActiveGraph::Shared::Callbacks::ClassMethods
  include ::ActiveModel::Callbacks
end

# source://activegraph//lib/active_graph/shared.rb#12
module ActiveGraph::Shared::ClassMethods
  # This should be used everywhere.  Should make it easy
  # to support a driver-per-model system
  #
  # source://activegraph//lib/active_graph/shared.rb#15
  def neo4j_query(*args); end

  # source://activegraph//lib/active_graph/shared.rb#19
  def new_query; end
end

# source://activegraph//lib/active_graph/shared/cypher.rb#2
module ActiveGraph::Shared::Cypher; end

# source://activegraph//lib/active_graph/shared/cypher.rb#3
module ActiveGraph::Shared::Cypher::CreateMethod
  # source://activegraph//lib/active_graph/shared/cypher.rb#4
  def create_method; end

  # source://activegraph//lib/active_graph/shared/cypher.rb#8
  def creates_unique(option = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/cypher.rb#17
  def creates_unique?; end

  # source://activegraph//lib/active_graph/shared/cypher.rb#13
  def creates_unique_option; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/cypher.rb#17
  def unique?; end
end

# source://activegraph//lib/active_graph/shared/cypher.rb#23
module ActiveGraph::Shared::Cypher::RelIdentifiers
  extend ::ActiveSupport::Concern

  # source://activegraph//lib/active_graph/shared/cypher.rb#27
  def from_node_identifier; end

  # source://activegraph//lib/active_graph/shared/cypher.rb#31
  def from_node_identifier=(id); end

  # source://activegraph//lib/active_graph/shared/cypher.rb#27
  def rel_identifier; end

  # source://activegraph//lib/active_graph/shared/cypher.rb#31
  def rel_identifier=(id); end

  # source://activegraph//lib/active_graph/shared/cypher.rb#27
  def to_node_identifier; end

  # source://activegraph//lib/active_graph/shared/cypher.rb#31
  def to_node_identifier=(id); end
end

# The DeclaredPropertyuManager holds details about objects created as a result of calling the #property
# class method on a class that includes ActiveGraph::Node or ActiveGraph::Relationship. There are many options
# that are referenced frequently, particularly during load and save, so this provides easy access and
# a way of separating behavior from the general Active{obj} modules.
#
# See ActiveGraph::Shared::DeclaredProperty for definitions of the property objects themselves.
#
# source://activegraph//lib/active_graph/shared/declared_properties.rb#8
class ActiveGraph::Shared::DeclaredProperties
  include ::ActiveGraph::Shared::TypeConverters

  # Each class that includes ActiveGraph::Node or ActiveGraph::Relationship gets one instance of this class.
  #
  # @param klass [#declared_properties] An object that has the #declared_properties method.
  # @return [DeclaredProperties] a new instance of DeclaredProperties
  #
  # source://activegraph//lib/active_graph/shared/declared_properties.rb#16
  def initialize(klass); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#20
  def [](key); end

  # During object wrap, a hash is needed that contains each declared property with a nil value.
  # The active_attr dependency is capable of providing this but it is expensive and calculated on the fly
  # each time it is called. Rather than rely on that, we build this progressively as properties are registered.
  # When the node or rel is loaded, this is used as a template.
  #
  # source://activegraph//lib/active_graph/shared/declared_properties.rb#69
  def attributes_nil_hash; end

  # During object wrapping, a props hash is built with string keys but ActiveGraph::Core provides symbols.
  # Rather than a `to_s` or `symbolize_keys` during every load, we build a map of symbol-to-string
  # to speed up the process. This increases memory used by the gem but reduces object allocation and GC, so it is faster
  # in practice.
  #
  # source://activegraph//lib/active_graph/shared/declared_properties.rb#82
  def attributes_string_map; end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#45
  def constraint_or_fail!(key, id_property_name, type = T.unsafe(nil)); end

  # The :default option in ActiveGraph::Node#property class method allows for setting a default value instead of
  # nil on declared properties. This holds those values.
  #
  # source://activegraph//lib/active_graph/shared/declared_properties.rb#53
  def declared_property_defaults; end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#12
  def each(*_arg0, **_arg1, &_arg2); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#12
  def each_key(*_arg0, **_arg1, &_arg2); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#12
  def each_pair(*_arg0, **_arg1, &_arg2); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#12
  def each_value(*_arg0, **_arg1, &_arg2); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#39
  def index_or_fail!(key, id_property_name, type = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#61
  def indexed_properties; end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#157
  def inject_defaults!(object, props); end

  # Returns the value of attribute klass.
  #
  # source://activegraph//lib/active_graph/shared/declared_properties.rb#11
  def klass; end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#131
  def magic_typecast_properties; end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#127
  def magic_typecast_properties_keys; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/declared_properties.rb#24
  def property?(key); end

  # #property on an Node or Relationship class. The DeclaredProperty has specifics about the property, but registration
  # makes the management object aware of it. This is necessary for type conversion, defaults, and inclusion in the nil and string hashes.
  #
  # @param property [ActiveGraph::Shared::DeclaredProperty] An instance of DeclaredProperty, created as the result of calling
  #
  # source://activegraph//lib/active_graph/shared/declared_properties.rb#31
  def register(property); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#57
  def registered_properties; end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#109
  def serialize(name, coder = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#119
  def serialized_properties; end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#114
  def serialized_properties=(serialize_hash); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#123
  def serialized_properties_keys; end

  # but when this happens many times while loading many objects, it results in a surprisingly significant slowdown.
  # The branching logic handles what happens if a property can't be found.
  # The first option attempts to find it in the existing hash.
  # The second option checks whether the key is the class's id property and, if it is, the string hash is rebuilt with it to prevent
  # future lookups.
  # The third calls `to_s`. This would happen if undeclared properties are found on the object. We could add them to the string map
  # but that would result in unchecked, un-GCed memory consumption. In the event that someone is adding properties dynamically,
  # maybe through user input, this would be bad.
  #
  # @param k [Symbol] A symbol for which the String representation is sought. This might seem silly -- we could just call #to_s --
  #
  # source://activegraph//lib/active_graph/shared/declared_properties.rb#97
  def string_key(k); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#101
  def unregister(name); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#147
  def value_for_db(key, value); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#152
  def value_for_ruby(key, value); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#136
  def value_for_where(key, value); end

  protected

  # Prevents repeated calls to :_attribute_type, which isn't free and never changes.
  #
  # source://activegraph//lib/active_graph/shared/declared_properties.rb#167
  def fetch_upstream_primitive(attr); end

  private

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#199
  def register_magic_typecaster(property); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/declared_properties.rb#173
  def should_convert_for_where?(key, value); end

  # Typically, this is a node's id property, which will not be registered as other properties are.
  # In the future, this should probably be reworked a bit. This class should either not know or care
  # about the id property or it should be in charge of it. In the meantime, this improves
  # node load performance.
  #
  # @param key [Symbol] An undeclared property value found in the _persisted_obj.properties hash.
  #
  # source://activegraph//lib/active_graph/shared/declared_properties.rb#182
  def string_map_id_property(key); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#189
  def unregister_magic_typecaster(property); end

  # source://activegraph//lib/active_graph/shared/declared_properties.rb#194
  def unregister_property_default(property); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/shared/declared_properties.rb#135
ActiveGraph::Shared::DeclaredProperties::EXCLUDED_TYPES = T.let(T.unsafe(nil), Array)

# Contains methods related to the management
#
# source://activegraph//lib/active_graph/shared/declared_property.rb#3
class ActiveGraph::Shared::DeclaredProperty
  include ::Comparable
  include ::ActiveGraph::Shared::DeclaredProperty::Index

  # @return [DeclaredProperty] a new instance of DeclaredProperty
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#13
  def initialize(name, options = T.unsafe(nil)); end

  # Compare attribute definitions
  #
  # @example
  #   attribute_definition <=> other
  # @param other [ActiveGraph::Shared::DeclaredProperty, Object] The other
  #   attribute definition to compare with.
  # @return [-1, 0, 1, nil]
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#34
  def <=>(other); end

  # source://activegraph//lib/active_graph/shared/declared_property.rb#54
  def [](key); end

  # Returns the value of attribute default_value.
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#10
  def default; end

  # Returns the value of attribute default_value.
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#10
  def default_value; end

  # source://activegraph//lib/active_graph/shared/declared_property.rb#62
  def fail_invalid_options!; end

  # source://activegraph//lib/active_graph/shared/declared_property.rb#40
  def inspect; end

  # Returns the value of attribute magic_typecaster.
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#10
  def magic_typecaster; end

  # Returns the value of attribute name.
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#10
  def name; end

  # Returns the value of attribute name_string.
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#10
  def name_string; end

  # Returns the value of attribute name_sym.
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#10
  def name_sym; end

  # Returns the value of attribute options.
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#10
  def options; end

  # source://activegraph//lib/active_graph/shared/declared_property.rb#58
  def register; end

  # source://activegraph//lib/active_graph/shared/declared_property.rb#46
  def to_s; end

  # source://activegraph//lib/active_graph/shared/declared_property.rb#50
  def to_sym; end

  # Returns the value of attribute type.
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#10
  def type; end

  # Returns the value of attribute typecaster.
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#10
  def typecaster; end

  private

  # source://activegraph//lib/active_graph/shared/declared_property.rb#72
  def option_with_value!(key, value); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#77
  def option_with_value?(key, value); end

  # Tweaks properties
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#82
  def register_magic_properties; end

  # source://activegraph//lib/active_graph/shared/declared_property.rb#93
  def register_magic_typecaster; end

  # source://activegraph//lib/active_graph/shared/declared_property.rb#101
  def register_type_converter; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/declared_property.rb#89
  def timestamp_prop?; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/shared/declared_property.rb#9
ActiveGraph::Shared::DeclaredProperty::ILLEGAL_PROPS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/shared/declared_property.rb#6
class ActiveGraph::Shared::DeclaredProperty::IllegalPropertyError < ::ActiveGraph::Error
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# None of these methods interact with the database. They only keep track of property settings in models.
# It could (should?) handle the actual indexing/constraining, but that's TBD.
#
# source://activegraph//lib/active_graph/shared/declared_property/index.rb#5
module ActiveGraph::Shared::DeclaredProperty::Index
  # source://activegraph//lib/active_graph/shared/declared_property/index.rb#23
  def constraint!(type = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/declared_property/index.rb#14
  def constraint?(type = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/shared/declared_property/index.rb#18
  def index!(type = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/declared_property/index.rb#10
  def index?(type = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/declared_property/index.rb#6
  def index_or_constraint?; end

  # source://activegraph//lib/active_graph/shared/declared_property/index.rb#32
  def unconstraint!(type = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/shared/declared_property/index.rb#28
  def unindex!(type = T.unsafe(nil)); end
end

# source://activegraph//lib/active_graph/shared/enum.rb#2
module ActiveGraph::Shared::Enum
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Shared::Enum::ClassMethods
end

# source://activegraph//lib/active_graph/shared/enum.rb#8
module ActiveGraph::Shared::Enum::ClassMethods
  # Similar to ActiveRecord enum, maps an integer value on the database to
  # a set of enum keys.
  #
  # @example Base example
  #   class Media
  #   include ActiveGraph::Node
  #   enum type: [:image, :video, :unknown]
  #   end
  #   Media.types # => { :images => 0, :video => 1, :unknown => 2 }
  #
  #   media.video!
  #   media.image? # => false
  #   media.type # => :video
  #
  #   Media.videos # => All medias with type = 1 (:video)
  #   Media.where(type: :video) # => All medias with type = 1 (:video)
  # @example Prefix-ing an enum
  #   Media.enum type: [:image, :video, :unknown], _prefix: :enum
  #
  #   media.enum_video!
  #   media.enum_video? # => true
  # @example Suffix-ing an enum
  #   Media.enum type: [:image, :video, :unknown], _suffix: true
  #
  #   media.video_type!
  #   media.video_type? # => true
  # @example Define a custom mapping for keys-numbers
  #   Media.enum type: { image: 1, video: 2, unknown: 3 }
  # @see http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html
  #
  # source://activegraph//lib/active_graph/shared/enum.rb#44
  def enum(**parameters); end

  # Returns the value of attribute neo4j_enum_data.
  #
  # source://activegraph//lib/active_graph/shared/enum.rb#9
  def neo4j_enum_data; end

  protected

  # source://activegraph//lib/active_graph/shared/enum.rb#109
  def build_enum_options(enum_keys, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/shared/enum.rb#152
  def build_method_name(base_name, property_name, options); end

  # source://activegraph//lib/active_graph/shared/enum.rb#103
  def build_property_options(_enum_keys, options = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/shared/enum.rb#159
  def check_enum_method_conflicts!(property_name, method_name); end

  # source://activegraph//lib/active_graph/shared/enum.rb#125
  def define_class_methods(property_name, enum_keys); end

  # source://activegraph//lib/active_graph/shared/enum.rb#119
  def define_enum_methods(property_name, enum_keys, options); end

  # source://activegraph//lib/active_graph/shared/enum.rb#142
  def define_enum_methods_!(property_name, enum_keys, options); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/enum.rb#132
  def define_enum_methods_?(property_name, enum_keys, options); end

  # source://activegraph//lib/active_graph/shared/enum.rb#93
  def define_property(property_name, enum_keys, options); end

  # source://activegraph//lib/active_graph/shared/enum.rb#57
  def normalize_key_list(enum_keys, options); end

  # source://activegraph//lib/active_graph/shared/enum.rb#80
  def split_options_and_parameters(parameters); end
end

# source://activegraph//lib/active_graph/shared/enum.rb#78
ActiveGraph::Shared::Enum::ClassMethods::VALID_OPTIONS_FOR_ENUMS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/shared/enum.rb#5
class ActiveGraph::Shared::Enum::ConflictingEnumMethodError < ::ActiveGraph::Error; end

# source://activegraph//lib/active_graph/shared/enum.rb#6
class ActiveGraph::Shared::Enum::InvalidEnumValueError < ::ActiveGraph::InvalidParameterError; end

# source://activegraph//lib/active_graph/shared/filtered_hash.rb#2
class ActiveGraph::Shared::FilteredHash
  # @return [FilteredHash] a new instance of FilteredHash
  #
  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#10
  def initialize(base, instructions); end

  # Returns the value of attribute base.
  #
  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#8
  def base; end

  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#17
  def filtered_base; end

  # Returns the value of attribute instructions.
  #
  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#8
  def instructions; end

  # Returns the value of attribute instructions_type.
  #
  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#8
  def instructions_type; end

  private

  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#47
  def filter(filter_keys, key); end

  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#37
  def filtered_base_by_hash; end

  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#28
  def filtered_base_by_symbol; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#43
  def key?(filter_keys, key); end

  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#52
  def keys_array(key); end

  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#75
  def valid_hash_instructions; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#67
  def valid_hash_instructions?(instructions); end

  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#71
  def valid_symbol_instructions; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#63
  def valid_symbol_instructions?(instructions); end

  # source://activegraph//lib/active_graph/shared/filtered_hash.rb#56
  def validate_instructions!(instructions); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/shared/filtered_hash.rb#3
class ActiveGraph::Shared::FilteredHash::InvalidHashFilterType < ::ActiveGraph::Error
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/shared/filtered_hash.rb#5
ActiveGraph::Shared::FilteredHash::VALID_HASH_INSTRUCTIONS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/shared/filtered_hash.rb#6
ActiveGraph::Shared::FilteredHash::VALID_INSTRUCTIONS_TYPES = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/shared/filtered_hash.rb#4
ActiveGraph::Shared::FilteredHash::VALID_SYMBOL_INSTRUCTIONS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/shared/identity.rb#3
module ActiveGraph::Shared::Identity
  # source://activegraph//lib/active_graph/shared/identity.rb#4
  def ==(other); end

  # source://activegraph//lib/active_graph/shared/identity.rb#4
  def eql?(other); end

  # source://activegraph//lib/active_graph/shared/identity.rb#29
  def hash; end

  # source://activegraph//lib/active_graph/shared/identity.rb#20
  def id; end

  # @return [Integer, nil] the neo4j id of the node if persisted or nil
  #
  # source://activegraph//lib/active_graph/shared/identity.rb#16
  def neo_id; end

  # Returns an Enumerable of all (primary) key attributes
  # or nil if model.persisted? is false
  #
  # source://activegraph//lib/active_graph/shared/identity.rb#11
  def to_key; end
end

# source://activegraph//lib/active_graph/shared/initialize.rb#2
module ActiveGraph::Shared::Initialize
  extend ::ActiveSupport::Concern

  # Implements the ActiveGraph::Node#wrapper and ActiveGraph::Relationship#wrapper method
  # so that we don't have to care if the node is wrapped or not.
  #
  # @return self
  #
  # source://activegraph//lib/active_graph/shared/initialize.rb#8
  def wrapper; end

  private

  # We should be using #clear_changes_information
  # but right now we don't use `ActiveModel` attributes correctly and so it doesn't work
  # Once we set @attribute correctly from using class ActiveModel::Attribute
  # we will no longer need to explicitly call following method and can safely remove it
  #
  # source://activegraph//lib/active_graph/shared/initialize.rb#33
  def changed_attributes_clear!; end

  # Once we set @attribute correctly from using class ActiveModel::Attribute
  # we will no longer need to explicitly call following method and can safely remove it
  #
  # source://activegraph//lib/active_graph/shared/initialize.rb#50
  def changed_attributes_selective_clear!(hash_to_clear); end

  # source://activegraph//lib/active_graph/shared/initialize.rb#14
  def convert_and_assign_attributes(properties); end

  # source://activegraph//lib/active_graph/shared/initialize.rb#22
  def stringify_attributes!(attr, properties); end
end

# source://activegraph//lib/active_graph/shared/marshal.rb#3
module ActiveGraph::Shared::Marshal
  extend ::ActiveSupport::Concern

  # source://activegraph//lib/active_graph/shared/marshal.rb#6
  def marshal_dump; end

  # source://activegraph//lib/active_graph/shared/marshal.rb#10
  def marshal_load(array); end

  private

  # source://activegraph//lib/active_graph/shared/marshal.rb#18
  def marshal_instance_variables; end
end

# MassAssignment allows you to bulk set and update attributes
#
# Including MassAssignment into your model gives it a set of mass assignment
# methods, similar to those found in ActiveRecord.
#
# Originally part of ActiveAttr, https://github.com/cgriego/active_attr
#
# @example Usage
#   class Person
#   include ActiveGraph::Shared::MassAssignment
#   end
#
# source://activegraph//lib/active_graph/shared/mass_assignment.rb#13
module ActiveGraph::Shared::MassAssignment
  extend ::ActiveSupport::Concern

  # Initialize a model with a set of attributes
  #
  # @example Initializing with a hash
  #   person = Person.new(:first_name => "Chris", :last_name => "Griego")
  #   person.first_name #=> "Chris"
  #   person.last_name #=> "Griego"
  # @param new_attributes [Hash{#to_s => Object}, #each] Attributes used to
  #   populate the model
  #
  # source://activegraph//lib/active_graph/shared/mass_assignment.rb#58
  def initialize(attributes = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/shared/mass_assignment.rb#36
  def add_undeclared_property(_, _); end

  # Mass update a model's attributes
  #
  # @example Assigning a hash
  #   person.assign_attributes(:first_name => "Chris", :last_name => "Griego")
  #   person.first_name #=> "Chris"
  #   person.last_name #=> "Griego"
  # @param new_attributes [Hash{#to_s => Object}, #each] Attributes used to
  #   populate the model
  #
  # source://activegraph//lib/active_graph/shared/mass_assignment.rb#24
  def assign_attributes(new_attributes = T.unsafe(nil)); end

  # Mass update a model's attributes
  #
  # @example Assigning a hash
  #   person.attributes = { :first_name => "Chris", :last_name => "Griego" }
  #   person.first_name #=> "Chris"
  #   person.last_name #=> "Griego"
  # @param new_attributes [Hash{#to_s => Object}, #each] Attributes used to
  #   populate the model
  #
  # source://activegraph//lib/active_graph/shared/mass_assignment.rb#46
  def attributes=(new_attributes); end
end

# source://activegraph//lib/active_graph/shared/node_query_factory.rb#2
class ActiveGraph::Shared::NodeQueryFactory < ::ActiveGraph::Shared::QueryFactory
  protected

  # source://activegraph//lib/active_graph/shared/node_query_factory.rb#9
  def create_query; end

  # source://activegraph//lib/active_graph/shared/node_query_factory.rb#5
  def match_string; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/shared/permitted_attributes.rb#2
module ActiveGraph::Shared::PermittedAttributes
  include ::ActiveModel::ForbiddenAttributesProtection
  extend ::ActiveSupport::Concern

  # source://activegraph//lib/active_graph/shared/permitted_attributes.rb#11
  def attributes=(attributes); end

  # source://activegraph//lib/active_graph/shared/permitted_attributes.rb#6
  def process_attributes(attributes); end

  protected

  # Check if an argument is a string or an ActionController::Parameters
  #
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/permitted_attributes.rb#19
  def hash_or_parameter?(args); end

  # source://activegraph//lib/active_graph/shared/permitted_attributes.rb#23
  def sanitize_input_parameters(attributes); end
end

# source://activegraph//lib/active_graph/shared/persistence.rb#3
module ActiveGraph::Shared::Persistence
  extend ::ActiveSupport::Concern

  # source://activegraph//lib/active_graph/shared/persistence.rb#100
  def apply_default_values; end

  # source://activegraph//lib/active_graph/shared/persistence.rb#216
  def cache_key; end

  # Increments concurrently a numeric attribute by a centain amount
  #
  # @param _attribute [Symbol, String] name of the attribute to increment
  # @param _by [Integer, Float] amount to increment
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#67
  def concurrent_increment!(_attribute, _by = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/shared/persistence.rb#87
  def create_or_update; end

  # source://activegraph//lib/active_graph/shared/persistence.rb#124
  def destroy; end

  # Returns +true+ if the object was destroyed.
  #
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#141
  def destroyed?; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#134
  def exist?; end

  # source://activegraph//lib/active_graph/shared/persistence.rb#155
  def freeze; end

  # @return [Boolean] true if the attributes hash has been frozen
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#151
  def frozen?; end

  # Increments a numeric attribute by a centain amount
  #
  # @param attribute [Symbol, String] name of the attribute to increment
  # @param by [Integer, Float] amount to increment
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#51
  def increment(attribute, by = T.unsafe(nil)); end

  # Convenience method to increment numeric attribute and #save at the same time
  #
  # @param attribute [Symbol, String] name of the attribute to increment
  # @param by [Integer, Float] amount to increment
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#60
  def increment!(attribute, by = T.unsafe(nil)); end

  # Returns +true+ if the record hasn't been saved to Neo4j yet.
  #
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#118
  def new?; end

  # Returns +true+ if the record hasn't been saved to Neo4j yet.
  #
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#118
  def new_record?; end

  # Returns +true+ if the record is persisted, i.e. it's not a new record and it was not destroyed
  #
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#113
  def persisted?; end

  # @return [Hash] all defined and none nil properties
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#146
  def props; end

  # Returns a hash containing:
  # * All properties and values for insertion in the database
  # * A `uuid` (or equivalent) key and value
  # * Timestamps, if the class is set to include them.
  # Note that the UUID is added to the hash but is not set on the node.
  # The timestamps, by comparison, are set on the node prior to addition in this hash.
  #
  # @return [Hash]
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#31
  def props_for_create; end

  # @return [Hash] Given a node's state, will call the appropriate `props_for_{action}` method.
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#8
  def props_for_persistence; end

  # @return [Hash] Properties and values, type-converted and timestamped for the database.
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#40
  def props_for_update; end

  # source://activegraph//lib/active_graph/shared/persistence.rb#160
  def reload; end

  # source://activegraph//lib/active_graph/shared/persistence.rb#171
  def reload_from_database; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#20
  def skip_update?; end

  # source://activegraph//lib/active_graph/shared/persistence.rb#107
  def touch; end

  # Updates this resource with all the attributes from the passed-in Hash and requests that the record be saved.
  # If saving fails because the resource is invalid then false will be returned.
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#178
  def update(attributes); end

  # Same as {#update_attributes}, but raises an exception if saving fails.
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#208
  def update!(attributes); end

  # Convenience method to set attribute and #save at the same time
  #
  # @param attribute [Symbol, String] of the attribute to update
  # @param value [Object] to set
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#74
  def update_attribute(attribute, value); end

  # Convenience method to set attribute and #save! at the same time
  #
  # @param attribute [Symbol, String] of the attribute to update
  # @param value [Object] to set
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#82
  def update_attribute!(attribute, value); end

  # Updates this resource with all the attributes from the passed-in Hash and requests that the record be saved.
  # If saving fails because the resource is invalid then false will be returned.
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#178
  def update_attributes(attributes); end

  # Same as {#update_attributes}, but raises an exception if saving fails.
  #
  # source://activegraph//lib/active_graph/shared/persistence.rb#208
  def update_attributes!(attributes); end

  # source://activegraph//lib/active_graph/shared/persistence.rb#188
  def update_column(field, value); end

  # source://activegraph//lib/active_graph/shared/persistence.rb#194
  def update_columns(hash); end

  # source://activegraph//lib/active_graph/shared/persistence.rb#194
  def update_db_properties(hash); end

  # source://activegraph//lib/active_graph/shared/persistence.rb#188
  def update_db_property(field, value); end

  # source://activegraph//lib/active_graph/shared/persistence.rb#12
  def update_model; end

  protected

  # source://activegraph//lib/active_graph/shared/persistence.rb#228
  def increment_by_query!(match_query, attribute, by, element_name = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/shared/persistence.rb#260
  def inject_timestamps!; end

  # source://activegraph//lib/active_graph/shared/persistence.rb#252
  def model_cache_key; end

  # source://activegraph//lib/active_graph/shared/persistence.rb#248
  def props_for_db(props_hash); end

  # source://activegraph//lib/active_graph/shared/persistence.rb#266
  def set_timestamps; end

  # source://activegraph//lib/active_graph/shared/persistence.rb#256
  def update_magic_properties; end
end

# source://activegraph//lib/active_graph/shared/property.rb#2
module ActiveGraph::Shared::Property
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveGraph::Shared::MassAssignment
  include ::ActiveModel::AttributeMethods
  include ::ActiveGraph::Shared::Attributes
  include ::ActiveGraph::Shared::TypecastedAttributes
  include ::ActiveModel::Dirty

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Attributes::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::TypecastedAttributes::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Property::ClassMethods

  # source://activegraph//lib/active_graph/shared/property.rb#34
  def initialize(attributes = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/shared/property.rb#52
  def [](name); end

  # Returns the value of attribute _persisted_obj.
  #
  # source://activegraph//lib/active_graph/shared/property.rb#12
  def _persisted_obj; end

  # source://activegraph//lib/active_graph/shared/property.rb#47
  def inject_defaults!(starting_props); end

  # source://activegraph//lib/active_graph/shared/property.rb#25
  def inspect; end

  # TODO: Set @attribute correctly using class ActiveModel::Attribute, and after that
  # remove mutations_from_database and other ActiveModel::Dirty overrided methods
  #
  # source://activegraph//lib/active_graph/shared/property.rb#20
  def mutations_from_database; end

  # source://activegraph//lib/active_graph/shared/property.rb#52
  def read_attribute(name); end

  # source://activegraph//lib/active_graph/shared/property.rb#62
  def reload_properties!(properties); end

  # source://activegraph//lib/active_graph/shared/property.rb#57
  def send_props(hash); end

  # source://activegraph//lib/active_graph/shared/property.rb#45
  def undeclared_properties=(_); end

  private

  # source://activegraph//lib/active_graph/shared/property.rb#79
  def extract_writer_methods!(attributes); end

  # source://activegraph//lib/active_graph/shared/property.rb#119
  def instantiate_object(field, values_with_empty_parameters); end

  # Gives support for Rails date_select, datetime_select, time_select helpers.
  #
  # source://activegraph//lib/active_graph/shared/property.rb#90
  def process_attributes(attributes = T.unsafe(nil)); end

  # source://activegraph//lib/active_graph/shared/property.rb#108
  def process_multiparameter_attributes(multi_parameter_attributes, new_attributes); end

  # Changes attributes hash to remove relationship keys
  # Raises an error if there are any keys left which haven't been defined as properties on the model
  # TODO: use declared_properties instead of self.attributes
  #
  # source://activegraph//lib/active_graph/shared/property.rb#72
  def validate_attributes!(attributes); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
  end
end

# source://activegraph//lib/active_graph/shared/property.rb#126
module ActiveGraph::Shared::Property::ClassMethods
  extend ::Forwardable

  # an extra call to a slow dependency method.
  #
  # @return [Hash] A frozen hash of all model properties with nil values. It is used during node loading and prevents
  #
  # source://activegraph//lib/active_graph/shared/property.rb#205
  def attributes_nil_hash; end

  # source://activegraph//lib/active_graph/shared/property.rb#177
  def build_property(name, options); end

  # source://activegraph//lib/active_graph/shared/property.rb#199
  def declared_properties; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def declared_property_defaults(*args, **_arg1, &block); end

  # source://activegraph//lib/active_graph/shared/property.rb#209
  def extract_association_attributes!(props); end

  # @param name [Symbol] The property name
  # @param attr_def [ActiveGraph::Shared::AttributeDefinition] A cloned AttributeDefinition to reuse
  # @param options [Hash] An options hash to use in the new property definition
  #
  # source://activegraph//lib/active_graph/shared/property.rb#171
  def inherit_property(name, attr_def, options = T.unsafe(nil)); end

  # Defines a property on the class
  #
  # See active_attr gem for allowed options, e.g which type
  # Notice, in ActiveGraph you don't have to declare properties before using them, see the ActiveGraph::Coree api.
  #
  # @example Without type
  #   class Person
  #   # declare a property which can have any value
  #   property :name
  #   end
  # @example With type and a default value
  #   class Person
  #   # declare a property which can have any value
  #   property :score, type: Integer, default: 0
  #   end
  # @example With an index
  #   class Person
  #   # declare a property which can have any value
  #   property :name, index: :exact
  #   end
  # @example With a constraint
  #   class Person
  #   # declare a property which can have any value
  #   property :name, constraint: :unique
  #   end
  #
  # source://activegraph//lib/active_graph/shared/property.rb#160
  def property(name, options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def serialize(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def serialized_properties(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def serialized_properties=(*args, **_arg1, &block); end

  # source://activegraph//lib/active_graph/shared/property.rb#193
  def undef_property(name); end

  private

  # source://activegraph//lib/active_graph/shared/property.rb#215
  def attribute!(name); end

  # source://activegraph//lib/active_graph/shared/property.rb#230
  def constraint_or_index(name, options); end

  # source://activegraph//lib/active_graph/shared/property.rb#241
  def undef_constraint_or_index(name); end
end

# source://activegraph//lib/active_graph/shared/property.rb#131
ActiveGraph::Shared::Property::ClassMethods::VALID_PROPERTY_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/shared/property.rb#88
ActiveGraph::Shared::Property::DATE_KEY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activegraph//lib/active_graph/shared/property.rb#10
class ActiveGraph::Shared::Property::MultiparameterAssignmentError < ::ActiveGraph::Error; end

# This list should not be statically created. All types which have converters should by type casted
#
# source://activegraph//lib/active_graph/shared/property.rb#15
ActiveGraph::Shared::Property::NEO4J_DRIVER_DATA_TYPES = T.let(T.unsafe(nil), Array)

# source://activegraph//lib/active_graph/shared/property.rb#9
class ActiveGraph::Shared::Property::UndefinedPropertyError < ::ActiveGraph::Error; end

# Acts as a bridge between the node and rel models and ActiveGraph::Core::Query.
# If the object is persisted, it returns a query matching; otherwise, it returns a query creating it.
# This class does not execute queries, so it keeps no record of what identifiers have been set or what has happened in previous factories.
#
# source://activegraph//lib/active_graph/shared/query_factory.rb#5
class ActiveGraph::Shared::QueryFactory
  # @return [QueryFactory] a new instance of QueryFactory
  #
  # source://activegraph//lib/active_graph/shared/query_factory.rb#8
  def initialize(graph_object, identifier); end

  # source://activegraph//lib/active_graph/shared/query_factory.rb#38
  def base_query; end

  # @param query [ActiveGraph::Core::Query] An instance of ActiveGraph::Core::Query upon which methods will be chained.
  #
  # source://activegraph//lib/active_graph/shared/query_factory.rb#33
  def base_query=(query); end

  # Returns the value of attribute graph_object.
  #
  # source://activegraph//lib/active_graph/shared/query_factory.rb#6
  def graph_object; end

  # Returns the value of attribute identifier.
  #
  # source://activegraph//lib/active_graph/shared/query_factory.rb#6
  def identifier; end

  # source://activegraph//lib/active_graph/shared/query_factory.rb#28
  def query; end

  protected

  # source://activegraph//lib/active_graph/shared/query_factory.rb#44
  def create_query; end

  # source://activegraph//lib/active_graph/shared/query_factory.rb#54
  def identifier_id; end

  # source://activegraph//lib/active_graph/shared/query_factory.rb#58
  def identifier_params; end

  # source://activegraph//lib/active_graph/shared/query_factory.rb#48
  def match_query; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/query_factory.rb#13
    def create(graph_object, identifier); end

    # source://activegraph//lib/active_graph/shared/query_factory.rb#17
    def factory_for(graph_obj); end
  end
end

# source://activegraph//lib/active_graph/shared/rel_query_factory.rb#2
class ActiveGraph::Shared::RelQueryFactory < ::ActiveGraph::Shared::QueryFactory
  protected

  # source://activegraph//lib/active_graph/shared/rel_query_factory.rb#9
  def create_query; end

  # source://activegraph//lib/active_graph/shared/rel_query_factory.rb#5
  def match_string; end

  private

  # source://activegraph//lib/active_graph/shared/rel_query_factory.rb#19
  def filtered_props; end

  # source://activegraph//lib/active_graph/shared/rel_query_factory.rb#43
  def namespace; end

  # source://activegraph//lib/active_graph/shared/rel_query_factory.rb#27
  def params(create_props); end

  # source://activegraph//lib/active_graph/shared/rel_query_factory.rb#35
  def pattern(create_props); end

  # source://activegraph//lib/active_graph/shared/rel_query_factory.rb#23
  def query_string(create_props); end

  # source://activegraph//lib/active_graph/shared/rel_query_factory.rb#39
  def scoped(key); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/rel_query_factory.rb#31
  def unique?; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# This module controls changes to relationship type based on ActiveGraph::Config.transform_rel_type.
# It's used whenever a rel type is automatically determined based on Relationship model name or
# association type.
#
# source://activegraph//lib/active_graph/shared/rel_type_converters.rb#5
module ActiveGraph::Shared::RelTypeConverters
  # source://activegraph//lib/active_graph/shared/rel_type_converters.rb#6
  def decorated_rel_type(type); end

  class << self
    # @param type [String, Symbol] The raw string or symbol to be used as the basis of the relationship type
    # @return [String] A string that conforms to the set rel type conversion setting.
    #
    # source://activegraph//lib/active_graph/shared/rel_type_converters.rb#25
    def decorated_rel_type(type); end

    # Determines how relationship types should look when inferred based on association or Relationship model name.
    # With the exception of `:none`, all options will call `underscore`, so `ThisClass` becomes `this_class`, with capitalization
    # determined by the specific option passed.
    # Valid options:
    # * :upcase - `:this_class`, `ThisClass`, `thiS_claSs` (if you don't like yourself) becomes `THIS_CLASS`
    # * :downcase - same as above, only... downcased.
    # * :legacy - downcases and prepends `#`, so ThisClass becomes `#this_class`
    # * :none - uses the string version of whatever is passed with no modifications
    #
    # source://activegraph//lib/active_graph/shared/rel_type_converters.rb#19
    def rel_transformer; end
  end
end

# This module adds the `serialize` class method. It lets you store hashes and arrays in Neo4j properties.
# Be aware that you won't be able to search within serialized properties and stuff use indexes. If you do a regex search for portion of a string
# property, the search happens in Cypher and you may take a performance hit.
#
# See type_converters.rb for the serialization process.
#
# source://activegraph//lib/active_graph/shared/serialized_properties.rb#7
module ActiveGraph::Shared::SerializedProperties
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Shared::SerializedProperties::ClassMethods

  # source://activegraph//lib/active_graph/shared/serialized_properties.rb#14
  def serializable_hash(*args); end

  # source://activegraph//lib/active_graph/shared/serialized_properties.rb#10
  def serialized_properties; end
end

# source://activegraph//lib/active_graph/shared/serialized_properties.rb#19
module ActiveGraph::Shared::SerializedProperties::ClassMethods
  # source://activegraph//lib/active_graph/shared/serialized_properties.rb#25
  def inherit_serialized_properties(other); end

  # source://activegraph//lib/active_graph/shared/serialized_properties.rb#20
  def inherited(other); end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#4
module ActiveGraph::Shared::TypeConverters
  # Modifies a hash's values to be of types acceptable to Neo4j or matching what the user defined using `type` in property definitions.
  #
  # @param obj [ActiveGraph::Shared::Property] A node or rel that mixes in the Property module
  # @param medium [Symbol] Indicates the type of conversion to perform.
  # @param properties [Hash] A hash of symbol-keyed properties for conversion.
  #
  # source://activegraph//lib/active_graph/shared/type_converters.rb#329
  def convert_properties_to(obj, medium, properties); end

  # Converts a single property from its current format to its db- or Ruby-expected output type.
  #
  # @param key [Symbol] A property declared on the model
  # @param value The value intended for conversion
  # @param direction [Symbol] Either :to_ruby or :to_db, indicates the type of conversion to perform
  #
  # source://activegraph//lib/active_graph/shared/type_converters.rb#347
  def convert_property(key, value, direction); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/type_converters.rb#351
  def supports_array?(key); end

  # source://activegraph//lib/active_graph/shared/type_converters.rb#360
  def typecast_attribute(typecaster, value); end

  # source://activegraph//lib/active_graph/shared/type_converters.rb#356
  def typecaster_for(value); end

  private

  # source://activegraph//lib/active_graph/shared/type_converters.rb#366
  def converted_property(type, value, direction); end

  # If the attribute is to be typecast using a custom converter, which converter should it use? If no, returns the type to find a native serializer.
  #
  # source://activegraph//lib/active_graph/shared/type_converters.rb#372
  def primitive_type(attr); end

  # Returns true if the property isn't defined in the model or if it is nil
  #
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/type_converters.rb#384
  def skip_conversion?(obj, attr, value); end

  class << self
    # source://activegraph//lib/active_graph/shared/type_converters.rb#416
    def converter_for(type); end

    # Attempts to determine whether conversion should be skipped because the object is already of the anticipated output type.
    #
    # @param found_converter [#convert_type] An object that responds to #convert_type, hinting that it is a type converter.
    # @param value The value for conversion.
    # @return [Boolean]
    #
    # source://activegraph//lib/active_graph/shared/type_converters.rb#423
    def formatted_for_db?(found_converter, value); end

    # @private
    #
    # source://activegraph//lib/active_graph/shared/type_converters.rb#389
    def included(_); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#428
    def register_converter(converter); end

    # @param direction [Symbol] either :to_ruby or :to_other
    #
    # source://activegraph//lib/active_graph/shared/type_converters.rb#408
    def to_other(direction, value, type); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#396
    def typecast_attribute(typecaster, value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#402
    def typecaster_for(primitive_type); end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#9
class ActiveGraph::Shared::TypeConverters::BaseConverter
  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/type_converters.rb#16
  def supports_array?; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # @return [Boolean]
    #
    # source://activegraph//lib/active_graph/shared/type_converters.rb#11
    def converted?(value); end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#66
class ActiveGraph::Shared::TypeConverters::BigDecimalConverter < ::ActiveGraph::Shared::TypeConverters::BaseConverter
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#68
    def convert_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#72
    def db_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#76
    def to_db(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#87
    def to_ruby(value); end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#7
class ActiveGraph::Shared::TypeConverters::Boolean
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#188
class ActiveGraph::Shared::TypeConverters::BooleanConverter < ::ActiveGraph::Shared::TypeConverters::BaseConverter
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#200
    def convert_type; end

    # @return [Boolean]
    #
    # source://activegraph//lib/active_graph/shared/type_converters.rb#192
    def converted?(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#196
    def converted_values; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#200
    def db_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#206
    def to_db(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#206
    def to_ruby(value); end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#189
ActiveGraph::Shared::TypeConverters::BooleanConverter::FALSE_VALUES = T.let(T.unsafe(nil), Set)

# source://activegraph//lib/active_graph/shared/type_converters.rb#5
ActiveGraph::Shared::TypeConverters::CONVERTERS = T.let(T.unsafe(nil), Hash)

# Converts Java long types to Date objects. Must be timezone UTC.
#
# source://activegraph//lib/active_graph/shared/type_converters.rb#112
class ActiveGraph::Shared::TypeConverters::DateConverter < ::ActiveGraph::Shared::TypeConverters::BaseConverter
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#114
    def convert_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#118
    def db_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#122
    def to_db(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#122
    def to_ruby(value); end
  end
end

# Converts DateTime objects to and from Java long types. Must be timezone UTC.
#
# source://activegraph//lib/active_graph/shared/type_converters.rb#131
class ActiveGraph::Shared::TypeConverters::DateTimeConverter < ::ActiveGraph::Shared::TypeConverters::BaseConverter
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#133
    def convert_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#137
    def db_type; end

    # Converts the given DateTime (UTC) value to an Integer.
    # DateTime values are automatically converted to UTC.
    #
    # source://activegraph//lib/active_graph/shared/type_converters.rb#143
    def to_db(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#152
    def to_ruby(value); end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#268
class ActiveGraph::Shared::TypeConverters::EnumConverter
  # @return [EnumConverter] a new instance of EnumConverter
  #
  # source://activegraph//lib/active_graph/shared/type_converters.rb#269
  def initialize(enum_keys, options); end

  # source://activegraph//lib/active_graph/shared/type_converters.rb#294
  def call(value); end

  # source://activegraph//lib/active_graph/shared/type_converters.rb#290
  def convert_type; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/type_converters.rb#278
  def converted?(value); end

  # source://activegraph//lib/active_graph/shared/type_converters.rb#286
  def db_type; end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/shared/type_converters.rb#282
  def supports_array?; end

  # source://activegraph//lib/active_graph/shared/type_converters.rb#300
  def to_db(value); end

  # source://activegraph//lib/active_graph/shared/type_converters.rb#294
  def to_ruby(value); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#48
class ActiveGraph::Shared::TypeConverters::FloatConverter < ::ActiveGraph::Shared::TypeConverters::BaseConverter
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#50
    def convert_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#54
    def db_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#58
    def to_db(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#58
    def to_ruby(value); end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#21
class ActiveGraph::Shared::TypeConverters::IntegerConverter < ::ActiveGraph::Shared::TypeConverters::BaseConverter
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#29
    def convert_type; end

    # @return [Boolean]
    #
    # source://activegraph//lib/active_graph/shared/type_converters.rb#25
    def converted?(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#33
    def db_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#37
    def to_db(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#42
    def to_ruby(value); end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#22
ActiveGraph::Shared::TypeConverters::IntegerConverter::NEO4J_LARGEST_INT = T.let(T.unsafe(nil), Integer)

# source://activegraph//lib/active_graph/shared/type_converters.rb#23
ActiveGraph::Shared::TypeConverters::IntegerConverter::NEO4J_SMALLEST_INT = T.let(T.unsafe(nil), Integer)

# Converts hash to/from JSON
#
# source://activegraph//lib/active_graph/shared/type_converters.rb#244
class ActiveGraph::Shared::TypeConverters::JSONConverter < ::ActiveGraph::Shared::TypeConverters::BaseConverter
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#250
    def convert_type; end

    # @return [Boolean]
    #
    # source://activegraph//lib/active_graph/shared/type_converters.rb#246
    def converted?(_value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#254
    def db_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#258
    def to_db(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#262
    def to_ruby(value); end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#313
class ActiveGraph::Shared::TypeConverters::ObjectConverter < ::ActiveGraph::Shared::TypeConverters::BaseConverter
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#315
    def convert_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#319
    def to_ruby(value); end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#93
class ActiveGraph::Shared::TypeConverters::StringConverter < ::ActiveGraph::Shared::TypeConverters::BaseConverter
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#95
    def convert_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#99
    def db_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#103
    def to_db(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#103
    def to_ruby(value); end
  end
end

# source://activegraph//lib/active_graph/shared/type_converters.rb#170
class ActiveGraph::Shared::TypeConverters::TimeConverter < ::ActiveGraph::Shared::TypeConverters::BaseConverter
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#172
    def convert_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#176
    def db_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#180
    def to_db(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#180
    def to_ruby(value); end
  end
end

# Converts hash to/from YAML
#
# source://activegraph//lib/active_graph/shared/type_converters.rb#223
class ActiveGraph::Shared::TypeConverters::YAMLConverter < ::ActiveGraph::Shared::TypeConverters::BaseConverter
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#225
    def convert_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#229
    def db_type; end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#233
    def to_db(value); end

    # source://activegraph//lib/active_graph/shared/type_converters.rb#237
    def to_ruby(value); end
  end
end

# TypecastedAttributes allows types to be declared for your attributes
#
# Types are declared by passing the :type option to the attribute class
# method. After a type is declared, attribute readers will convert any
# assigned attribute value to the declared type. If the assigned value
# cannot be cast, nil will be returned instead. You can access the original
# assigned value using the before_type_cast methods.
#
# See {Typecasting} for the currently supported types.
#
# Originally part of ActiveAttr, https://github.com/cgriego/active_attr
#
# @example Usage
#   class Person
#   include ActiveGraph::Shared::TypecastedAttributes
#   attribute :age, :type => Integer
#   end
#
#   person = Person.new
#   person.age = "29"
#   person.age #=> 29
#   person.age_before_type_cast #=> "29"
#
# source://activegraph//lib/active_graph/shared/typecasted_attributes.rb#24
module ActiveGraph::Shared::TypecastedAttributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods
  include ::ActiveGraph::Shared::Attributes

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::Attributes::ClassMethods
  mixes_in_class_methods ::ActiveGraph::Shared::TypecastedAttributes::ClassMethods

  # Read the raw attribute value
  #
  # @example Reading a raw age value
  #   person.age = "29"
  #   person.attribute_before_type_cast(:age) #=> "29"
  # @param name [String, Symbol, #to_s] Attribute name
  # @return [Object, nil] The attribute value before typecasting
  #
  # source://activegraph//lib/active_graph/shared/typecasted_attributes.rb#41
  def attribute_before_type_cast(name); end

  private

  # Calculates an attribute type
  #
  # @private
  #
  # source://activegraph//lib/active_graph/shared/typecasted_attributes.rb#60
  def _attribute_type(attribute_name); end

  # Resolve an attribute typecaster
  #
  # @private
  #
  # source://activegraph//lib/active_graph/shared/typecasted_attributes.rb#67
  def _attribute_typecaster(attribute_name); end

  # Reads the attribute and typecasts the result
  #
  # source://activegraph//lib/active_graph/shared/typecasted_attributes.rb#49
  def attribute(name); end

  # source://activegraph//lib/active_graph/shared/typecasted_attributes.rb#53
  def typecast_attribute(typecaster, value); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns=(value); end
    def attribute_method_patterns?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_patterns; end
    def attribute_method_patterns?; end
  end
end

# source://activegraph//lib/active_graph/shared/typecasted_attributes.rb#74
module ActiveGraph::Shared::TypecastedAttributes::ClassMethods
  # Calculates an attribute type
  #
  # @private
  #
  # source://activegraph//lib/active_graph/shared/typecasted_attributes.rb#90
  def _attribute_type(attribute_name); end

  # Returns the class name plus its attribute names and types
  #
  # @example Inspect the model's definition.
  #   Person.inspect
  # @return [String] Human-readable presentation of the attributes
  #
  # source://activegraph//lib/active_graph/shared/typecasted_attributes.rb#81
  def inspect; end

  # source://activegraph//lib/active_graph/shared/typecasted_attributes.rb#94
  def typecast_attribute(typecaster, value); end
end

# This module provides a convenient way of registering a custom Typecasting class. Custom Typecasters all follow a simple pattern.
#
# EXAMPLE:
#
# .. code-block:: ruby
#
#   class RangeConverter
#     class << self
#       def primitive_type
#         String
#       end
#
#       def convert_type
#         Range
#       end
#
#       def to_db(value)
#         value.to_s
#       end
#
#       def to_ruby(value)
#         ends = value.to_s.split('..').map { |d| Integer(d) }
#         ends[0]..ends[1]
#       end
#       alias_method :call, :to_ruby
#     end
#
#     include ActiveGraph::Shared::Typecaster
#   end
#
# This would allow you to use `property :my_prop, type: Range` in a model.
# Each method and the `alias_method` call is required. Make sure the module inclusion happens at the end of the file.
#
# `primitive_type` is used to fool ActiveAttr's type converters, which only recognize a few basic Ruby classes.
#
# `convert_type` must match the constant given to the `type` option.
#
# `to_db` provides logic required to transform your value into the class defined by `primitive_type`
#
# `to_ruby` provides logic to transform the DB-provided value back into the class expected by code using the property.
# In other words, it should match the `convert_type`.
#
# Note that `alias_method` is used to make `to_ruby` respond to `call`. This is to provide compatibility with ActiveAttr.
#
# source://activegraph//lib/active_graph/shared/typecaster.rb#47
module ActiveGraph::Shared::Typecaster
  class << self
    # @private
    #
    # source://activegraph//lib/active_graph/shared/typecaster.rb#48
    def included(other); end
  end
end

# source://activegraph//lib/active_graph/shared/validations.rb#3
module ActiveGraph::Shared::Validations
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods

  # Implements the ActiveModel::Validation hook method.
  #
  # @see http://rubydoc.info/docs/rails/ActiveModel/Validations:read_attribute_for_validation
  #
  # source://activegraph//lib/active_graph/shared/validations.rb#8
  def read_attribute_for_validation(key); end

  # The validation process on save can be skipped by passing false. The regular Model#save method is
  # replaced with this when the validations module is mixed in, which it is by default.
  #
  # @option options
  # @param options [Hash] the options to create a message with.
  # @return [Boolean] true if it saved it successfully
  #
  # source://activegraph//lib/active_graph/shared/validations.rb#17
  def save(options = T.unsafe(nil)); end

  # @return [Boolean] true if valid
  #
  # source://activegraph//lib/active_graph/shared/validations.rb#22
  def valid?(context = T.unsafe(nil)); end

  private

  # source://activegraph//lib/active_graph/shared/validations.rb#30
  def perform_validations(options = T.unsafe(nil)); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# This mixin includes timestamps in the included class
#
# source://activegraph//lib/active_graph/timestamps.rb#3
module ActiveGraph::Timestamps
  extend ::ActiveSupport::Concern
  include ::ActiveGraph::Timestamps::Created
  include ::ActiveGraph::Timestamps::Updated
end

# This mixin includes a created_at timestamp property
#
# source://activegraph//lib/active_graph/timestamps/created.rb#4
module ActiveGraph::Timestamps::Created
  extend ::ActiveSupport::Concern
end

# This mixin includes a updated_at timestamp property
#
# source://activegraph//lib/active_graph/timestamps/updated.rb#4
module ActiveGraph::Timestamps::Updated
  extend ::ActiveSupport::Concern
end

# source://activegraph//lib/active_graph/transaction.rb#2
module ActiveGraph::Transaction
  # source://activegraph//lib/active_graph/transaction.rb#8
  def after_commit(&block); end

  # source://activegraph//lib/active_graph/transaction.rb#12
  def apply_callbacks; end

  # source://activegraph//lib/active_graph/transaction.rb#3
  def rollback; end

  private

  # source://activegraph//lib/active_graph/transaction.rb#18
  def after_commit_registry; end
end

# source://activegraph//lib/active_graph/transactions.rb#4
module ActiveGraph::Transactions
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveGraph::Transactions::ClassMethods
end

# source://activegraph//lib/active_graph/transactions.rb#0
module ActiveGraph::Transactions::ClassMethods
  # source://activegraph//lib/active_graph/transactions.rb#31
  def lock_node(node); end

  # source://activegraph//lib/active_graph/transactions.rb#25
  def read_transaction(**config, &block); end

  # source://activegraph//lib/active_graph/transactions.rb#12
  def session(**session_config); end

  # source://activegraph//lib/active_graph/transactions.rb#21
  def transaction(**config, &block); end

  # source://activegraph//lib/active_graph/transactions.rb#21
  def write_transaction(**config, &block); end

  private

  # source://activegraph//lib/active_graph/transactions.rb#45
  def run_transaction_work(session, method, **config, &block); end

  # source://activegraph//lib/active_graph/transactions.rb#37
  def send_transaction(method, **config, &block); end
end

# source://activegraph//lib/active_graph/type_converters.rb#2
module ActiveGraph::TypeConverters
  include ::ActiveGraph::Shared::TypeConverters
end

# This mixin allows storage and update of undeclared properties in the included class
#
# source://activegraph//lib/active_graph/undeclared_properties.rb#3
module ActiveGraph::UndeclaredProperties
  extend ::ActiveSupport::Concern

  # source://activegraph//lib/active_graph/undeclared_properties.rb#13
  def [](name); end

  # source://activegraph//lib/active_graph/undeclared_properties.rb#22
  def []=(name, value); end

  # source://activegraph//lib/active_graph/undeclared_properties.rb#49
  def add_undeclared_property(name, value); end

  # source://activegraph//lib/active_graph/undeclared_properties.rb#35
  def props_for_create; end

  # source://activegraph//lib/active_graph/undeclared_properties.rb#39
  def props_for_update; end

  # source://activegraph//lib/active_graph/undeclared_properties.rb#13
  def read_attribute(name); end

  # source://activegraph//lib/active_graph/undeclared_properties.rb#18
  def read_undeclared_property(name); end

  # @return [Boolean]
  #
  # source://activegraph//lib/active_graph/undeclared_properties.rb#31
  def skip_update?; end

  # source://activegraph//lib/active_graph/undeclared_properties.rb#43
  def undeclared_properties!; end

  # source://activegraph//lib/active_graph/undeclared_properties.rb#10
  def validate_attributes!(_); end

  # source://activegraph//lib/active_graph/undeclared_properties.rb#22
  def write_attribute(name, value); end
end

# source://activegraph//lib/active_graph/error.rb#29
class ActiveGraph::UnknownAttributeError < ::NoMethodError; end

# source://activegraph//lib/active_graph/error.rb#33
class ActiveGraph::UnknownMigrationVersionError < ::ActiveGraph::MigrationError; end

# source://activegraph//lib/active_graph/error.rb#26
class ActiveGraph::UnknownTypeConverterError < ::ActiveGraph::Error; end

# source://activegraph//lib/active_graph/version.rb#2
ActiveGraph::VERSION = T.let(T.unsafe(nil), String)

class Neo4j::Driver::Internal::InternalEntity
  include ::ActiveGraph::Core::Entity
  include ::ActiveGraph::Core::Wrappable
  extend ::ActiveGraph::Core::Wrappable::ClassMethods
end

class Neo4j::Driver::Internal::InternalNode < ::Neo4j::Driver::Internal::InternalEntity
  include ::ActiveGraph::Core::Node
end

class Neo4j::Driver::Internal::InternalRecord
  include ::ActiveGraph::Core::Record
end

class Neo4j::Driver::Internal::InternalResult
  include ::ActiveGraph::Core::Result
end

class Neo4j::Driver::Internal::InternalTransaction
  include ::ActiveGraph::Transaction
end

class Rails::Generators::GeneratedAttribute
  include ::ActiveGraph::Generators::GeneratedAttribute
end

module SecureRandom
  extend ::ActiveGraph::SecureRandomExt
end
