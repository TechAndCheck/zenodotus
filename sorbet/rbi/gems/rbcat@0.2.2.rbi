# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rbcat` gem.
# Please instead update this file by running `bin/tapioca gem rbcat`.


# source://rbcat//lib/rbcat/version.rb#1
module Rbcat
  class << self
    # source://rbcat//lib/rbcat.rb#9
    def colorize(string, options = T.unsafe(nil)); end

    # Returns the value of attribute configuration.
    #
    # source://rbcat//lib/rbcat/configuration.rb#5
    def configuration; end

    # Sets the attribute configuration
    #
    # @param value the value to set the attribute configuration to.
    #
    # source://rbcat//lib/rbcat/configuration.rb#5
    def configuration=(_arg0); end

    # @yield [configuration]
    #
    # source://rbcat//lib/rbcat/configuration.rb#8
    def configure; end
  end
end

# source://rbcat//lib/rbcat/cli.rb#7
class Rbcat::CLI
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://rbcat//lib/rbcat/cli.rb#8
    def start(args); end

    private

    # source://rbcat//lib/rbcat/cli.rb#23
    def create_colorizer_options(options); end

    # source://rbcat//lib/rbcat/cli.rb#40
    def parse_options(args); end
  end
end

# source://rbcat//lib/rbcat/colorizer.rb#2
class Rbcat::Colorizer
  class << self
    # source://rbcat//lib/rbcat/colorizer.rb#9
    def colorize(string, predefined: T.unsafe(nil), rules: T.unsafe(nil), order: T.unsafe(nil)); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://rbcat//lib/rbcat/colorizer.rb#3
    def print_colors; end

    # source://rbcat//lib/rbcat/colorizer.rb#39
    def uncolorize(string); end

    private

    # @raise [ConfigurationError]
    #
    # source://rbcat//lib/rbcat/colorizer.rb#44
    def create_config(predefined, rules, order); end

    # source://rbcat//lib/rbcat/colorizer.rb#78
    def deep_merge(hash, other_hash); end
  end
end

# source://rbcat//lib/rbcat/colors.rb#4
module Rbcat::Colors; end

# source://rbcat//lib/rbcat/colors.rb#5
Rbcat::Colors::DEFAULT = T.let(T.unsafe(nil), Hash)

# source://rbcat//lib/rbcat/configuration.rb#13
class Rbcat::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://rbcat//lib/rbcat/configuration.rb#16
  def initialize; end

  # Returns the value of attribute order.
  #
  # source://rbcat//lib/rbcat/configuration.rb#14
  def order; end

  # Sets the attribute order
  #
  # @param value the value to set the attribute order to.
  #
  # source://rbcat//lib/rbcat/configuration.rb#14
  def order=(_arg0); end

  # Returns the value of attribute predefined.
  #
  # source://rbcat//lib/rbcat/configuration.rb#14
  def predefined; end

  # Sets the attribute predefined
  #
  # @param value the value to set the attribute predefined to.
  #
  # source://rbcat//lib/rbcat/configuration.rb#14
  def predefined=(_arg0); end

  # Returns the value of attribute rules.
  #
  # source://rbcat//lib/rbcat/configuration.rb#14
  def rules; end

  # Sets the attribute rules
  #
  # @param value the value to set the attribute rules to.
  #
  # source://rbcat//lib/rbcat/configuration.rb#14
  def rules=(_arg0); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://rbcat//lib/rbcat/configuration.rb#2
class Rbcat::ConfigurationError < ::StandardError
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://rbcat//lib/rbcat/rules.rb#2
module Rbcat::Rules; end

# source://rbcat//lib/rbcat/rules.rb#3
Rbcat::Rules::JSONHASH = T.let(T.unsafe(nil), Hash)

# source://rbcat//lib/rbcat/rules.rb#30
Rbcat::Rules::LOGGER = T.let(T.unsafe(nil), Hash)

# source://rbcat//lib/rbcat/version.rb#2
Rbcat::VERSION = T.let(T.unsafe(nil), String)
