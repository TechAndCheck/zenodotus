# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `acts-as-taggable-on` gem.
# Please instead update this file by running `bin/tapioca gem acts-as-taggable-on`.


class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Access
  include ::ActiveModel::Serialization
  include ::ActsAsTaggableOn::Tagger
  extend ::ActsAsTaggableOn::Taggable
  extend ::ActsAsTaggableOn::Tagger::ClassMethods
end

# This module is deprecated and will be removed in the incoming versions
#
# source://acts-as-taggable-on//lib/acts-as-taggable-on/engine.rb#3
module ActsAsTaggableOn
  class << self
    # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#36
    def glue; end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#27
    def method_missing(method_name, *args, &block); end

    # @return [Boolean]
    #
    # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#32
    def respond_to?(method_name, include_private = T.unsafe(nil)); end

    # @yield [@configuration]
    #
    # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#22
    def setup; end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#42
class ActsAsTaggableOn::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#49
  def initialize; end

  # Returns the value of attribute base_class.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#47
  def base_class; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#101
  def base_class=(base_class); end

  # Returns the value of attribute default_parser.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def default_parser; end

  # Sets the attribute default_parser
  #
  # @param value the value to set the attribute default_parser to.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def default_parser=(_arg0); end

  # Returns the value of attribute delimiter.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#47
  def delimiter; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#67
  def delimiter=(string); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#76
  def force_binary_collation=(force_bin); end

  # Returns the value of attribute force_lowercase.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def force_lowercase; end

  # Sets the attribute force_lowercase
  #
  # @param value the value to set the attribute force_lowercase to.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def force_lowercase=(_arg0); end

  # Returns the value of attribute force_parameterize.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def force_parameterize; end

  # Sets the attribute force_parameterize
  #
  # @param value the value to set the attribute force_parameterize to.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def force_parameterize=(_arg0); end

  # Returns the value of attribute remove_unused_tags.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def remove_unused_tags; end

  # Sets the attribute remove_unused_tags
  #
  # @param value the value to set the attribute remove_unused_tags to.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def remove_unused_tags=(_arg0); end

  # Returns the value of attribute strict_case_match.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#47
  def strict_case_match; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#63
  def strict_case_match=(force_cs); end

  # Returns the value of attribute taggings_table.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def taggings_table; end

  # Sets the attribute taggings_table
  #
  # @param value the value to set the attribute taggings_table to.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def taggings_table=(_arg0); end

  # Returns the value of attribute tags_counter.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def tags_counter; end

  # Sets the attribute tags_counter
  #
  # @param value the value to set the attribute tags_counter to.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def tags_counter=(_arg0); end

  # Returns the value of attribute tags_table.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def tags_table; end

  # Sets the attribute tags_table
  #
  # @param value the value to set the attribute tags_table to.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#43
  def tags_table=(_arg0); end

  class << self
    # source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#89
    def apply_binary_collation(bincoll); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# Returns a new TagList using the given tag string.
#
# Example:
#   tag_list = ActsAsTaggableOn::DefaultParser.parse("One , Two,  Three")
#   tag_list # ["One", "Two", "Three"]
#
# source://acts-as-taggable-on//lib/acts-as-taggable-on/default_parser.rb#10
class ActsAsTaggableOn::DefaultParser < ::ActsAsTaggableOn::GenericParser
  # private
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/default_parser.rb#39
  def delimiter; end

  # (             # Tag start delimiter ($1)
  # \A       |  # Either string start or
  # #{delimiter}        # a delimiter
  # )
  # \s*"          # quote (") optionally preceded by whitespace
  # (.*?)         # Tag ($2)
  # "\s*          # quote (") optionally followed by whitespace
  # (?=           # Tag end delimiter (not consumed; is zero-length lookahead)
  # #{delimiter}\s*  |  # Either a delimiter optionally followed by whitespace or
  # \z          # string end
  # )
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/default_parser.rb#58
  def double_quote_pattern; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/default_parser.rb#11
  def parse; end

  # (             # Tag start delimiter ($1)
  # \A       |  # Either string start or
  # #{delimiter}        # a delimiter
  # )
  # \s*'          # quote (') optionally preceded by whitespace
  # (.*?)         # Tag ($2)
  # '\s*          # quote (') optionally followed by whitespace
  # (?=           # Tag end delimiter (not consumed; is zero-length lookahead)
  # #{delimiter}\s*  | d # Either a delimiter optionally followed by whitespace or
  # \z          # string end
  # )
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/default_parser.rb#73
  def single_quote_pattern; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on.rb#19
class ActsAsTaggableOn::DuplicateTagError < ::StandardError
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/engine.rb#4
class ActsAsTaggableOn::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# Returns a new TagList using the given tag string.
#
# Example:
# tag_list = ActsAsTaggableOn::GenericParser.new.parse("One , Two, Three")
# tag_list # ["One", "Two", "Three"]
#
# source://acts-as-taggable-on//lib/acts-as-taggable-on/generic_parser.rb#10
class ActsAsTaggableOn::GenericParser
  # @return [GenericParser] a new instance of GenericParser
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/generic_parser.rb#11
  def initialize(tag_list); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/generic_parser.rb#15
  def parse; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#4
class ActsAsTaggableOn::Tag < ::ActiveRecord::Base
  include ::ActsAsTaggableOn::Tag::GeneratedAttributeMethods
  include ::ActsAsTaggableOn::Tag::GeneratedAssociationMethods

  # INSTANCE METHODS:
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#102
  def ==(other); end

  # source://activerecord/7.2.2.1/lib/active_record/autosave_association.rb#162
  def autosave_associated_records_for_taggings(*args); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#110
  def count; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#106
  def to_s; end

  # source://activerecord/7.2.2.1/lib/active_record/autosave_association.rb#162
  def validate_associated_records_for_taggings(*args); end

  # monkey patch this method if don't need name uniqueness validation
  #
  # @return [Boolean]
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#18
  def validates_name_uniqueness?; end

  class << self
    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activerecord/7.2.2.1/lib/active_record/counter_cache.rb#9
    def _counter_cache_columns; end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
    def _validators; end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/enum.rb#167
    def defined_enums; end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#77
    def find_or_create_all_with_like_by_name(*list); end

    # CLASS METHODS:
    #
    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#69
    def find_or_create_with_like_by_name(name); end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#55
    def for_context(context); end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#61
    def for_tenant(tenant); end

    # source://activerecord/7.2.2.1/lib/active_record/scoping/named.rb#174
    def least_used(*args, **_arg1); end

    # source://activerecord/7.2.2.1/lib/active_record/scoping/named.rb#174
    def most_used(*args, **_arg1); end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#26
    def named(name); end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#34
    def named_any(list); end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#41
    def named_like(name); end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#47
    def named_like_any(list); end

    private

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#129
    def as_8bit_ascii(string); end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#125
    def binary; end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#117
    def comparable_name(str); end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#137
    def sanitize_sql_for_named_any(tag); end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#133
    def unicode_downcase(string); end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#0
module ActsAsTaggableOn::Tag::GeneratedAssociationMethods
  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/collection_association.rb#62
  def tagging_ids; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/collection_association.rb#72
  def tagging_ids=(ids); end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/association.rb#103
  def taggings; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/association.rb#111
  def taggings=(value); end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tag.rb#0
module ActsAsTaggableOn::Tag::GeneratedAttributeMethods; end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#6
class ActsAsTaggableOn::TagList < ::Array
  # @return [TagList] a new instance of TagList
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#9
  def initialize(*args); end

  # Concatenation --- Returns a new tag list built by concatenating the
  # two tag lists together to produce a third tag list.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#37
  def +(other); end

  # Append---Add the tag to the tag_list. This
  # expression returns the tag_list itself, so several appends
  # may be chained together.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#31
  def <<(obj); end

  # Add tags to the tag_list. Duplicate or blank tags will be ignored.
  # Use the <tt>:parse</tt> option to add an unparsed tag string.
  #
  # Example:
  #   tag_list.add("Fun", "Happy")
  #   tag_list.add("Fun, Happy", :parse => true)
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#21
  def add(*names); end

  # Appends the elements of +other_tag_list+ to +self+.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#42
  def concat(other_tag_list); end

  # Returns the value of attribute owner.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#7
  def owner; end

  # Sets the attribute owner
  #
  # @param value the value to set the attribute owner to.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#7
  def owner=(_arg0); end

  # Returns the value of attribute parser.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#7
  def parser; end

  # Sets the attribute parser
  #
  # @param value the value to set the attribute parser to.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#7
  def parser=(_arg0); end

  # Remove specific tags from the tag_list.
  # Use the <tt>:parse</tt> option to add an unparsed tag string.
  #
  # Example:
  #   tag_list.remove("Sad", "Lonely")
  #   tag_list.remove("Sad, Lonely", :parse => true)
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#54
  def remove(*names); end

  # Transform the tag_list into a tag string suitable for editing in a form.
  # The tags are joined with <tt>TagList.delimiter</tt> and quoted if necessary.
  #
  # Example:
  #   tag_list = TagList.new("Round", "Square,Cube")
  #   tag_list.to_s # 'Round, "Square,Cube"'
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#67
  def to_s; end

  private

  # Convert everything to string, remove whitespace, duplicates, and blanks.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#81
  def clean!; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tag_list.rb#92
  def extract_and_apply_options!(args); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable.rb#4
module ActsAsTaggableOn::Taggable
  # This is an alias for calling <tt>acts_as_ordered_taggable_on :tags</tt>.
  #
  # Example:
  #   class Book < ActiveRecord::Base
  #     acts_as_ordered_taggable
  #   end
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable.rb#27
  def acts_as_ordered_taggable; end

  # Make a model taggable on specified contexts
  # and preserves the order in which tags are created
  #
  # Example:
  #   class User < ActiveRecord::Base
  #     acts_as_ordered_taggable_on :languages, :skills
  #   end
  #
  # @param tag_types [Array] An array of taggable contexts
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable.rb#54
  def acts_as_ordered_taggable_on(*tag_types); end

  # This is an alias for calling <tt>acts_as_taggable_on :tags</tt>.
  #
  # Example:
  #   class Book < ActiveRecord::Base
  #     acts_as_taggable
  #   end
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable.rb#16
  def acts_as_taggable; end

  # Make a model taggable on specified contexts.
  #
  # Example:
  #   class User < ActiveRecord::Base
  #     acts_as_taggable_on :languages, :skills
  #   end
  #
  # @param tag_types [Array] An array of taggable contexts
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable.rb#40
  def acts_as_taggable_on(*tag_types); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable.rb#58
  def acts_as_taggable_tenant(tenant); end

  # @return [Boolean]
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable.rb#5
  def taggable?; end

  private

  # Make a model taggable on specified contexts
  # and optionally preserves the order in which tags are created
  #
  # Separate methods used above for backwards compatibility
  # so that the original acts_as_taggable_on method is unaffected
  # as it's not possible to add another argument to the method
  # without the tag_types being enclosed in square brackets
  #
  # NB: method overridden in core module in order to create tag type
  #     associations and methods after this logic has executed
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable.rb#87
  def taggable_on(preserve_tag_order, *tag_types); end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/caching.rb#5
module ActsAsTaggableOn::Taggable::Caching
  extend ::ActiveSupport::Concern

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/caching.rb#32
  def save_cached_tag_list; end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/caching.rb#0
module ActsAsTaggableOn::Taggable::Caching::ClassMethods
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/caching.rb#22
  def acts_as_taggable_on(*args); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/caching.rb#27
  def caching_tag_list_on?(context); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/caching.rb#14
  def initialize_tags_cache; end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#5
module ActsAsTaggableOn::Taggable::Collection
  extend ::ActiveSupport::Concern

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#205
  def tag_counts_on(context, options = T.unsafe(nil)); end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#209
module ActsAsTaggableOn::Taggable::Collection::CalculationMethods
  # Rails 5 TODO: Remove options argument as soon we remove support to
  # activerecord-deprecated_finders.
  # See https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/calculations.rb#L38
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#213
  def count(column_name = T.unsafe(nil), _options = T.unsafe(nil)); end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#0
module ActsAsTaggableOn::Taggable::Collection::ClassMethods
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#35
  def acts_as_taggable_on(*args); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#94
  def all_tag_counts(options = T.unsafe(nil)); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#59
  def all_tags(options = T.unsafe(nil)); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#13
  def initialize_acts_as_taggable_on_collection; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#140
  def safe_to_sql(relation); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#40
  def tag_counts_on(context, options = T.unsafe(nil)); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#44
  def tags_on(context, options = T.unsafe(nil)); end

  private

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#152
  def generate_tagging_scope_in_clause(tagging_scope, table_name, primary_key); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#199
  def tag_scope_joins(tag_scope, tagging_scope); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/collection.rb#166
  def tagging_conditions(options); end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#8
module ActsAsTaggableOn::Taggable::Core
  extend ::ActiveSupport::Concern

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#139
  def add_custom_context(value); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#170
  def all_tags_list_on(context); end

  # Returns all tags of a given context
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#181
  def all_tags_on(context); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#145
  def cached_tag_list_on(context); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#131
  def custom_contexts; end

  # all column names are necessary for PostgreSQL group clause
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#127
  def grouped_column_names_for(object); end

  # @return [Boolean]
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#135
  def is_taggable?; end

  # Find existing tags or create non-existing tags
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#236
  def load_tags(tag_list); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#225
  def reload(*args); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#240
  def save_tags; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#207
  def set_tag_list_on(context, new_list); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#154
  def tag_list_cache_on(context); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#149
  def tag_list_cache_set_on(context); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#165
  def tag_list_on(context); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#221
  def taggable_tenant; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#217
  def tagging_contexts; end

  # Returns all tags that are not owned of a given context
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#197
  def tags_on(context); end

  private

  # Filters the tag lists from the attribute names.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#307
  def attributes_for_create(attribute_names); end

  # Filters the tag lists from the attribute names.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#301
  def attributes_for_update(attribute_names); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#296
  def ensure_included_cache_methods!; end

  # Override this hook if you wish to subclass {ActsAsTaggableOn::Tag} --
  # context is provided so that you may conditionally use a Tag subclass
  # only for some contexts.
  #
  # @example Custom Tag class for one context
  #   class Company < ActiveRecord::Base
  #   acts_as_taggable_on :markets, :locations
  #
  #   def find_or_create_tags_from_list_with_context(tag_list, context)
  #   if context.to_sym == :markets
  #   MarketTag.find_or_create_all_with_like_by_name(tag_list)
  #   else
  #   super
  #   end
  #   end
  # @param tag_list [Array<String>] Tags to find or create
  # @param context [Symbol] The tag context for the tag_list
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#331
  def find_or_create_tags_from_list_with_context(tag_list, _context); end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#0
module ActsAsTaggableOn::Taggable::Core::ClassMethods
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#82
  def grouped_column_names_for(object); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#20
  def initialize_acts_as_taggable_on_core; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#117
  def is_taggable?; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#121
  def taggable_mixin; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#76
  def taggable_on(preserve_tag_order, *tag_types); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/core.rb#107
  def tagged_with(tags, options = T.unsafe(nil)); end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/ownership.rb#5
module ActsAsTaggableOn::Taggable::Ownership
  extend ::ActiveSupport::Concern

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/ownership.rb#60
  def cached_owned_tag_list_on(context); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/ownership.rb#67
  def owner_tag_list_on(owner, context); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/ownership.rb#31
  def owner_tags(owner); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/ownership.rb#52
  def owner_tags_on(owner, context); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/ownership.rb#83
  def reload(*args); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/ownership.rb#91
  def save_owned_tags; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/ownership.rb#75
  def set_owner_tag_list_on(owner, context, new_list); end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/ownership.rb#0
module ActsAsTaggableOn::Taggable::Ownership::ClassMethods
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/ownership.rb#15
  def acts_as_taggable_on(*args); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/ownership.rb#20
  def initialize_acts_as_taggable_on_ownership; end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#5
module ActsAsTaggableOn::Taggable::Related
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#33
  def find_matching_contexts(search_context, result_context, options = T.unsafe(nil)); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#37
  def find_matching_contexts_for(klass, search_context, result_context, options = T.unsafe(nil)); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#41
  def matching_contexts_for(search_context, result_context, klass, _options = T.unsafe(nil)); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#50
  def related_tags_for(context, klass, options = T.unsafe(nil)); end

  private

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#62
  def exclude_self(klass, id); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#67
  def group_columns(klass); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#75
  def related_where(klass, conditions); end

  class << self
    # @private
    #
    # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#6
    def included(base); end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#11
module ActsAsTaggableOn::Taggable::Related::ClassMethods
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#27
  def acts_as_taggable_on(*args); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/related.rb#12
  def initialize_acts_as_taggable_on_related; end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tag_list_type.rb#5
class ActsAsTaggableOn::Taggable::TagListType < ::ActiveModel::Type::Value
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#5
module ActsAsTaggableOn::Taggable::TaggedWithQuery
  class << self
    # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query.rb#11
    def build(taggable_model, tag_model, tagging_model, tag_list, options); end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/all_tags_query.rb#6
class ActsAsTaggableOn::Taggable::TaggedWithQuery::AllTagsQuery < ::ActsAsTaggableOn::Taggable::TaggedWithQuery::QueryBase
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/all_tags_query.rb#7
  def build; end

  private

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/all_tags_query.rb#82
  def by_taggable; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/all_tags_query.rb#17
  def each_tag_in_list; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/all_tags_query.rb#65
  def match_all_on_conditions; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/all_tags_query.rb#38
  def on_conditions(tag, tagging_alias); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/all_tags_query.rb#98
  def order_conditions; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/all_tags_query.rb#108
  def tagging_alias(tag); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/all_tags_query.rb#88
  def tags_that_matches_count; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/any_tags_query.rb#6
class ActsAsTaggableOn::Taggable::TaggedWithQuery::AnyTagsQuery < ::ActsAsTaggableOn::Taggable::TaggedWithQuery::QueryBase
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/any_tags_query.rb#7
  def build; end

  private

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/any_tags_query.rb#63
  def alias_name(tag_list); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/any_tags_query.rb#16
  def all_fields; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/any_tags_query.rb#24
  def at_least_one_tag; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/any_tags_query.rb#20
  def model_has_at_least_one_tag; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/any_tags_query.rb#53
  def order_conditions; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/exclude_tags_query.rb#6
class ActsAsTaggableOn::Taggable::TaggedWithQuery::ExcludeTagsQuery < ::ActsAsTaggableOn::Taggable::TaggedWithQuery::QueryBase
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/exclude_tags_query.rb#7
  def build; end

  private

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/exclude_tags_query.rb#56
  def match_all_on_conditions; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/exclude_tags_query.rb#31
  def owning_to_tagger; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/exclude_tags_query.rb#16
  def tags_not_in_list; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/exclude_tags_query.rb#73
  def tags_that_matches_count; end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#6
class ActsAsTaggableOn::Taggable::TaggedWithQuery::QueryBase
  # @return [QueryBase] a new instance of QueryBase
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#7
  def initialize(taggable_model, tag_model, tagging_model, tag_list, options); end

  private

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#71
  def adjust_taggings_alias(taggings_alias); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#57
  def escaped_tag(tag); end

  # Returns the value of attribute options.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#17
  def options; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#23
  def tag_arel_table; end

  # Returns the value of attribute tag_list.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#17
  def tag_list; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#31
  def tag_match_type(tag); end

  # Returns the value of attribute tag_model.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#17
  def tag_model; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#19
  def taggable_arel_table; end

  # Returns the value of attribute taggable_model.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#17
  def taggable_model; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#27
  def tagging_arel_table; end

  # Returns the value of attribute tagging_model.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#17
  def tagging_model; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#42
  def tags_match_type; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/taggable/tagged_with_query/query_base.rb#62
  def wildcard_escaped_tag(tag); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#4
module ActsAsTaggableOn::Tagger
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActsAsTaggableOn::Tagger::ClassMethods
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#0
module ActsAsTaggableOn::Tagger::ClassMethods
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#16
  def acts_as_tagger(opts = T.unsafe(nil)); end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#37
  def is_tagger?; end

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#37
  def tagger?; end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#44
module ActsAsTaggableOn::Tagger::InstanceMethods
  # @return [Boolean]
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#70
  def is_tagger?; end

  # Tag a taggable model with tags that are owned by the tagger.
  #
  # Example:
  #   @user.tag(@photo, :with => "paris, normandy", :on => :locations)
  #
  # @param taggable The object that will be tagged
  # @param options [Hash] An hash with options. Available options are:
  #   * <tt>:with</tt> - The tags that you want to
  #   * <tt>:on</tt>   - The context on which you want to tag
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#55
  def tag(taggable, opts = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#70
  def tagger?; end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#77
module ActsAsTaggableOn::Tagger::SingletonMethods
  # @return [Boolean]
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#78
  def is_tagger?; end

  # @return [Boolean]
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tagger.rb#78
  def tagger?; end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tagging.rb#4
class ActsAsTaggableOn::Tagging < ::ActiveRecord::Base
  include ::ActsAsTaggableOn::Tagging::GeneratedAttributeMethods
  include ::ActsAsTaggableOn::Tagging::GeneratedAssociationMethods

  # source://activerecord/7.2.2.1/lib/active_record/autosave_association.rb#162
  def autosave_associated_records_for_tag(*args); end

  # source://activerecord/7.2.2.1/lib/active_record/autosave_association.rb#162
  def autosave_associated_records_for_taggable(*args); end

  # source://activerecord/7.2.2.1/lib/active_record/autosave_association.rb#162
  def autosave_associated_records_for_tagger(*args); end

  private

  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tagging.rb#30
  def remove_unused_tags; end

  class << self
    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.2.2.1/lib/active_record/scoping/named.rb#174
    def by_context(*args, **_arg1); end

    # source://activerecord/7.2.2.1/lib/active_record/scoping/named.rb#174
    def by_contexts(*args, **_arg1); end

    # source://activerecord/7.2.2.1/lib/active_record/scoping/named.rb#174
    def by_tenant(*args, **_arg1); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/counter_cache.rb#10
    def counter_cached_association_names; end

    # source://activerecord/7.2.2.1/lib/active_record/enum.rb#167
    def defined_enums; end

    # source://activerecord/7.2.2.1/lib/active_record/scoping/named.rb#174
    def not_owned(*args, **_arg1); end

    # source://activerecord/7.2.2.1/lib/active_record/scoping/named.rb#174
    def owned_by(*args, **_arg1); end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tagging.rb#7
ActsAsTaggableOn::Tagging::DEFAULT_CONTEXT = T.let(T.unsafe(nil), String)

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tagging.rb#0
module ActsAsTaggableOn::Tagging::GeneratedAssociationMethods
  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/singular_association.rb#32
  def build_tag(*args, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/singular_association.rb#36
  def create_tag(*args, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/singular_association.rb#40
  def create_tag!(*args, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/singular_association.rb#19
  def reload_tag; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/singular_association.rb#19
  def reload_taggable; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/singular_association.rb#19
  def reload_tagger; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/singular_association.rb#23
  def reset_tag; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/singular_association.rb#23
  def reset_taggable; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/singular_association.rb#23
  def reset_tagger; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/association.rb#103
  def tag; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/association.rb#111
  def tag=(value); end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/belongs_to.rb#146
  def tag_changed?; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/belongs_to.rb#150
  def tag_previously_changed?; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/association.rb#103
  def taggable; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/association.rb#111
  def taggable=(value); end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/belongs_to.rb#146
  def taggable_changed?; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/belongs_to.rb#150
  def taggable_previously_changed?; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/association.rb#103
  def tagger; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/association.rb#111
  def tagger=(value); end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/belongs_to.rb#146
  def tagger_changed?; end

  # source://activerecord/7.2.2.1/lib/active_record/associations/builder/belongs_to.rb#150
  def tagger_previously_changed?; end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tagging.rb#0
module ActsAsTaggableOn::Tagging::GeneratedAttributeMethods; end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/tags_helper.rb#4
module ActsAsTaggableOn::TagsHelper
  # See the wiki for an example using tag_cloud.
  #
  # source://acts-as-taggable-on//lib/acts-as-taggable-on/tags_helper.rb#6
  def tag_cloud(tags, classes); end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/utils.rb#6
module ActsAsTaggableOn::Utils
  class << self
    # Use ActsAsTaggableOn::Tag connection
    #
    # source://acts-as-taggable-on//lib/acts-as-taggable-on/utils.rb#9
    def connection; end

    # escape _ and % characters in strings, since these are wildcards in SQL.
    #
    # source://acts-as-taggable-on//lib/acts-as-taggable-on/utils.rb#30
    def escape_like(str); end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/utils.rb#25
    def like_operator; end

    # source://acts-as-taggable-on//lib/acts-as-taggable-on/utils.rb#21
    def sha_prefix(string); end

    # @return [Boolean]
    #
    # source://acts-as-taggable-on//lib/acts-as-taggable-on/utils.rb#17
    def using_mysql?; end

    # @return [Boolean]
    #
    # source://acts-as-taggable-on//lib/acts-as-taggable-on/utils.rb#13
    def using_postgresql?; end
  end
end

# source://acts-as-taggable-on//lib/acts-as-taggable-on/version.rb#4
ActsAsTaggableOn::VERSION = T.let(T.unsafe(nil), String)
