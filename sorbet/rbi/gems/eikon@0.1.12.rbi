# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `eikon` gem.
# Please instead update this file by running `bin/tapioca gem eikon`.


# source://eikon//lib/eikon/version.rb#3
module Eikon
  class << self
    # source://eikon//lib/eikon.rb#17
    sig { params(filename: T.untyped).returns(::String) }
    def dhash_for_image(filename); end

    # source://eikon//lib/eikon.rb#25
    sig do
      params(
        filename: ::String,
        number_of_frames: ::Integer
      ).returns(T::Array[T::Hash[::String, T.any(::Integer, ::String)]])
    end
    def dhash_for_video(filename, number_of_frames = T.unsafe(nil)); end

    # source://eikon//lib/eikon.rb#33
    sig { params(filename_1: ::String, filename_2: ::String).returns(::Integer) }
    def distance_between_files(filename_1, filename_2); end
  end
end

# source://eikon//lib/eikon/comparator.rb#6
class Eikon::Comparator
  class << self
    # source://eikon//lib/eikon/comparator.rb#9
    sig { params(dhash_1: ::String, dhash_2: ::String).returns(::Integer) }
    def compare(dhash_1, dhash_2); end
  end
end

# source://eikon//lib/eikon.rb#14
class Eikon::Error < ::StandardError; end

# source://eikon//lib/eikon/image_processor.rb#6
class Eikon::ImageProcessor
  # source://eikon//lib/eikon/image_processor.rb#18
  sig { params(filename: ::String).void }
  def initialize(filename); end

  # source://eikon//lib/eikon/image_processor.rb#12
  sig { returns(::String) }
  def byte_array; end

  # source://eikon//lib/eikon/image_processor.rb#15
  sig { returns(::String) }
  def filename; end

  # source://eikon//lib/eikon/image_processor.rb#39
  sig { returns(::NilClass) }
  def generate_byte_array; end

  # source://eikon//lib/eikon/image_processor.rb#25
  sig { returns(::NilClass) }
  def preprocess_image; end
end

# source://eikon//lib/eikon/version.rb#4
Eikon::VERSION = T.let(T.unsafe(nil), String)

# source://eikon//lib/eikon/video_processor.rb#7
class Eikon::VideoProcessor
  # source://eikon//lib/eikon/video_processor.rb#14
  sig { params(file_name: ::String).void }
  def initialize(file_name); end

  # source://eikon//lib/eikon/video_processor.rb#11
  sig { returns(::String) }
  def file_name; end

  # source://eikon//lib/eikon/video_processor.rb#78
  sig { params(folder_path: ::String).returns(T::Array[T::Hash[::String, T.any(::Integer, ::String)]]) }
  def get_frames_dhash(folder_path); end

  # Note, this isn't guranteed to give the number of frames since we remove blank images
  #
  # source://eikon//lib/eikon/video_processor.rb#20
  sig { params(number_of_frames: ::Integer).returns(::String) }
  def split_video_into_images(number_of_frames = T.unsafe(nil)); end

  private

  # source://eikon//lib/eikon/video_processor.rb#92
  sig { params(file_name: ::String).returns(::String) }
  def get_file_name(file_name); end

  # source://eikon//lib/eikon/video_processor.rb#113
  sig { params(folder_path: ::String).void }
  def remove_blank_shots(folder_path); end

  # source://eikon//lib/eikon/video_processor.rb#100
  sig { void }
  def setup_tmp_folder; end
end
