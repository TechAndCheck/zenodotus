# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ferrum` gem.
# Please instead update this file by running `bin/tapioca gem ferrum`.


# RemoteObjectId is from a JavaScript world, and corresponds to any JavaScript
# object, including JS wrappers for DOM nodes. There is a way to convert between
# node ids and remote object ids (DOM.requestNode and DOM.resolveNode).
#
# NodeId is used for inspection, when backend tracks the node and sends updates to
# the frontend. If you somehow got NodeId over protocol, backend should have
# pushed to the frontend all of it's ancestors up to the Document node via
# DOM.setChildNodes. After that, frontend is always kept up-to-date about anything
# happening to the node.
#
# BackendNodeId is just a unique identifier for a node. Obtaining it does not send
# any updates, for example, the node may be destroyed without any notification.
# This is a way to keep a reference to the Node, when you don't necessarily want
# to keep track of it. One example would be linking to the node from performance
# data (e.g. relayout root node). BackendNodeId may be either resolved to
# inspected node (DOM.pushNodesByBackendIdsToFrontend) or described in more
# details (DOM.describeNode).
#
# source://ferrum//lib/ferrum/utils/platform.rb#3
module Ferrum; end

# source://ferrum//lib/ferrum/errors.rb#8
class Ferrum::BinaryNotFoundError < ::Ferrum::Error; end

# source://ferrum//lib/ferrum/browser/subscriber.rb#4
class Ferrum::Browser
  extend ::Forwardable

  # @return [Browser] a new instance of Browser
  #
  # source://ferrum//lib/ferrum/browser.rb#40
  def initialize(options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def add_script_tag(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def add_style_tag(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def at_css(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def at_xpath(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def back(*args, **_arg1, &block); end

  # Returns the value of attribute base_url.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def base_url; end

  # source://ferrum//lib/ferrum/browser.rb#82
  def base_url=(value); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def body(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def bypass_csp(*args, **_arg1, &block); end

  # Returns the value of attribute client.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def client; end

  # source://ferrum//lib/ferrum/browser.rb#121
  def command(*args); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def content=(*args, **_arg1, &block); end

  # Returns the value of attribute contexts.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def contexts; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cookies(*args, **_arg1, &block); end

  # source://ferrum//lib/ferrum/browser.rb#149
  def crash; end

  # source://ferrum//lib/ferrum/browser.rb#91
  def create_page(new_context: T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def create_target(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def css(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def current_title(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def current_url(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_context(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_user_agent(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def doctype(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def evaluate(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def evaluate_async(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def evaluate_func(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def evaluate_on(*args, **_arg1, &block); end

  # source://ferrum//lib/ferrum/browser.rb#113
  def evaluate_on_new_document(expression); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def execute(*args, **_arg1, &block); end

  # source://ferrum//lib/ferrum/browser.rb#107
  def extensions; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def forward(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def frame_by(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def frames(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def go(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def go_to(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def goto(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def headers(*args, **_arg1, &block); end

  # Returns the value of attribute js_errors.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def js_errors; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def keyboard(*args, **_arg1, &block); end

  # Returns the value of attribute logger.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def logger; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def main_frame(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def mhtml(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def mouse(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def network(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def on(*args, **_arg1, &block); end

  # Returns the value of attribute options.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def options; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def page(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def pages(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def pdf(*args, **_arg1, &block); end

  # Returns the value of attribute pending_connection_errors.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def pending_connection_errors; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def playback_rate(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def playback_rate=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def position(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def position=(*args, **_arg1, &block); end

  # Returns the value of attribute process.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def process; end

  # Returns the value of attribute proxy_options.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def proxy_options; end

  # Returns the value of attribute proxy_server.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def proxy_server; end

  # source://ferrum//lib/ferrum/browser.rb#138
  def quit; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def refresh(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def reload(*args, **_arg1, &block); end

  # source://ferrum//lib/ferrum/browser.rb#128
  def reset; end

  # source://ferrum//lib/ferrum/browser.rb#144
  def resize(**options); end

  # source://ferrum//lib/ferrum/browser.rb#133
  def restart; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def screenshot(*args, **_arg1, &block); end

  # Returns the value of attribute slowmo.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def slowmo; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def stop(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def targets(*args, **_arg1, &block); end

  # source://ferrum//lib/ferrum/browser.rb#117
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value the value to set the attribute timeout to.
  #
  # source://ferrum//lib/ferrum/browser.rb#38
  def timeout=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def title(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def url(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def viewport_size(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def wait_for_reload(*args, **_arg1, &block); end

  # Returns the value of attribute window_size.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def window_size; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def windows(*args, **_arg1, &block); end

  # Returns the value of attribute ws_max_receive_size.
  #
  # source://ferrum//lib/ferrum/browser.rb#35
  def ws_max_receive_size; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def xpath(*args, **_arg1, &block); end

  private

  # source://ferrum//lib/ferrum/browser.rb#155
  def start; end
end

# source://ferrum//lib/ferrum/browser.rb#17
Ferrum::Browser::BASE_URL_SCHEMA = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/browser/binary.rb#5
module Ferrum::Browser::Binary
  private

  # source://ferrum//lib/ferrum/browser/binary.rb#12
  def all(commands); end

  # source://ferrum//lib/ferrum/browser/binary.rb#16
  def enum(commands); end

  # source://ferrum//lib/ferrum/browser/binary.rb#8
  def find(commands); end

  # source://ferrum//lib/ferrum/browser/binary.rb#31
  def lazy_find(cmds); end

  # source://ferrum//lib/ferrum/browser/binary.rb#22
  def prepare_paths; end

  class << self
    # source://ferrum//lib/ferrum/browser/binary.rb#12
    def all(commands); end

    # source://ferrum//lib/ferrum/browser/binary.rb#16
    def enum(commands); end

    # source://ferrum//lib/ferrum/browser/binary.rb#8
    def find(commands); end

    # source://ferrum//lib/ferrum/browser/binary.rb#31
    def lazy_find(cmds); end

    # @raise [EmptyPathError]
    #
    # source://ferrum//lib/ferrum/browser/binary.rb#22
    def prepare_paths; end
  end
end

# source://ferrum//lib/ferrum/browser/client.rb#8
class Ferrum::Browser::Client
  # @return [Client] a new instance of Client
  #
  # source://ferrum//lib/ferrum/browser/client.rb#11
  def initialize(browser, ws_url, id_starts_with: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/browser/client.rb#66
  def close; end

  # @raise [DeadBrowserError]
  #
  # source://ferrum//lib/ferrum/browser/client.rb#37
  def command(method, params = T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/browser/client.rb#53
  def on(event, &block); end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/browser/client.rb#62
  def subscribed?(event); end

  private

  # source://ferrum//lib/ferrum/browser/client.rb#75
  def build_message(method, params); end

  # source://ferrum//lib/ferrum/browser/client.rb#79
  def next_command_id; end

  # source://ferrum//lib/ferrum/browser/client.rb#83
  def raise_browser_error(error); end
end

# source://ferrum//lib/ferrum/browser/client.rb#9
Ferrum::Browser::Client::INTERRUPTIONS = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/browser/command.rb#5
class Ferrum::Browser::Command
  # @raise [BinaryNotFoundError]
  # @return [Command] a new instance of Command
  #
  # source://ferrum//lib/ferrum/browser/command.rb#27
  def initialize(defaults, options, user_data_dir); end

  # Returns the value of attribute defaults.
  #
  # source://ferrum//lib/ferrum/browser/command.rb#25
  def defaults; end

  # Returns the value of attribute options.
  #
  # source://ferrum//lib/ferrum/browser/command.rb#25
  def options; end

  # Returns the value of attribute path.
  #
  # source://ferrum//lib/ferrum/browser/command.rb#25
  def path; end

  # source://ferrum//lib/ferrum/browser/command.rb#42
  def to_a; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/browser/command.rb#38
  def xvfb?; end

  private

  # source://ferrum//lib/ferrum/browser/command.rb#48
  def merge_options; end

  class << self
    # Currently only these browsers support CDP:
    # https://github.com/cyrus-and/chrome-remote-interface#implementations
    #
    # source://ferrum//lib/ferrum/browser/command.rb#12
    def build(options, user_data_dir); end
  end
end

# source://ferrum//lib/ferrum/browser/command.rb#6
Ferrum::Browser::Command::NOT_FOUND = T.let(T.unsafe(nil), String)

# source://ferrum//lib/ferrum/browser.rb#15
Ferrum::Browser::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://ferrum//lib/ferrum/browser/options/base.rb#7
module Ferrum::Browser::Options; end

# source://ferrum//lib/ferrum/browser/options/base.rb#8
class Ferrum::Browser::Options::Base
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://ferrum//lib/ferrum/browser/options/base.rb#26
  def detect_path; end

  # source://ferrum//lib/ferrum/browser/options/base.rb#22
  def except(*keys); end

  # @raise [NotImplementedError]
  #
  # source://ferrum//lib/ferrum/browser/options/base.rb#34
  def merge_default(flags, options); end

  # @raise [NotImplementedError]
  #
  # source://ferrum//lib/ferrum/browser/options/base.rb#30
  def merge_required(flags, options, user_data_dir); end

  # source://ferrum//lib/ferrum/browser/options/base.rb#18
  def to_h; end

  class << self
    # source://ferrum//lib/ferrum/browser/options/base.rb#14
    def options; end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://ferrum//lib/ferrum/browser/options/base.rb#9
Ferrum::Browser::Options::Base::BROWSER_HOST = T.let(T.unsafe(nil), String)

# source://ferrum//lib/ferrum/browser/options/base.rb#10
Ferrum::Browser::Options::Base::BROWSER_PORT = T.let(T.unsafe(nil), String)

# source://ferrum//lib/ferrum/browser/options/chrome.rb#6
class Ferrum::Browser::Options::Chrome < ::Ferrum::Browser::Options::Base
  # source://ferrum//lib/ferrum/browser/options/chrome.rb#71
  def merge_default(flags, options); end

  # source://ferrum//lib/ferrum/browser/options/chrome.rb#61
  def merge_required(flags, options, user_data_dir); end
end

# source://ferrum//lib/ferrum/browser/options/chrome.rb#7
Ferrum::Browser::Options::Chrome::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://ferrum//lib/ferrum/browser/options/chrome.rb#49
Ferrum::Browser::Options::Chrome::LINUX_BIN_PATH = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/browser/options/chrome.rb#45
Ferrum::Browser::Options::Chrome::MAC_BIN_PATH = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/browser/options/chrome.rb#55
Ferrum::Browser::Options::Chrome::PLATFORM_PATH = T.let(T.unsafe(nil), Hash)

# source://ferrum//lib/ferrum/browser/options/chrome.rb#51
Ferrum::Browser::Options::Chrome::WINDOWS_BIN_PATH = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/browser/options/firefox.rb#6
class Ferrum::Browser::Options::Firefox < ::Ferrum::Browser::Options::Base
  # source://ferrum//lib/ferrum/browser/options/firefox.rb#32
  def merge_default(flags, options); end

  # source://ferrum//lib/ferrum/browser/options/firefox.rb#25
  def merge_required(flags, options, user_data_dir); end
end

# source://ferrum//lib/ferrum/browser/options/firefox.rb#7
Ferrum::Browser::Options::Firefox::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://ferrum//lib/ferrum/browser/options/firefox.rb#14
Ferrum::Browser::Options::Firefox::LINUX_BIN_PATH = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/browser/options/firefox.rb#11
Ferrum::Browser::Options::Firefox::MAC_BIN_PATH = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/browser/options/firefox.rb#19
Ferrum::Browser::Options::Firefox::PLATFORM_PATH = T.let(T.unsafe(nil), Hash)

# source://ferrum//lib/ferrum/browser/options/firefox.rb#15
Ferrum::Browser::Options::Firefox::WINDOWS_BIN_PATH = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/browser/process.rb#15
class Ferrum::Browser::Process
  extend ::Forwardable

  # @return [Process] a new instance of Process
  #
  # source://ferrum//lib/ferrum/browser/process.rb#63
  def initialize(options); end

  # Returns the value of attribute browser_version.
  #
  # source://ferrum//lib/ferrum/browser/process.rb#20
  def browser_version; end

  # Returns the value of attribute command.
  #
  # source://ferrum//lib/ferrum/browser/process.rb#20
  def command; end

  # Returns the value of attribute default_user_agent.
  #
  # source://ferrum//lib/ferrum/browser/process.rb#20
  def default_user_agent; end

  # Returns the value of attribute host.
  #
  # source://ferrum//lib/ferrum/browser/process.rb#20
  def host; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def path(*args, **_arg1, &block); end

  # Returns the value of attribute pid.
  #
  # source://ferrum//lib/ferrum/browser/process.rb#20
  def pid; end

  # Returns the value of attribute port.
  #
  # source://ferrum//lib/ferrum/browser/process.rb#20
  def port; end

  # Returns the value of attribute protocol_version.
  #
  # source://ferrum//lib/ferrum/browser/process.rb#20
  def protocol_version; end

  # source://ferrum//lib/ferrum/browser/process.rb#121
  def restart; end

  # source://ferrum//lib/ferrum/browser/process.rb#84
  def start; end

  # source://ferrum//lib/ferrum/browser/process.rb#110
  def stop; end

  # Returns the value of attribute v8_version.
  #
  # source://ferrum//lib/ferrum/browser/process.rb#20
  def v8_version; end

  # Returns the value of attribute webkit_version.
  #
  # source://ferrum//lib/ferrum/browser/process.rb#20
  def webkit_version; end

  # Returns the value of attribute ws_url.
  #
  # source://ferrum//lib/ferrum/browser/process.rb#20
  def ws_url; end

  # Returns the value of attribute xvfb.
  #
  # source://ferrum//lib/ferrum/browser/process.rb#20
  def xvfb; end

  private

  # source://ferrum//lib/ferrum/browser/process.rb#180
  def close_io(*ios); end

  # source://ferrum//lib/ferrum/browser/process.rb#128
  def kill(pid); end

  # source://ferrum//lib/ferrum/browser/process.rb#167
  def parse_browser_versions; end

  # @raise [ProcessTimeoutError]
  #
  # source://ferrum//lib/ferrum/browser/process.rb#137
  def parse_ws_url(read_io, timeout); end

  # source://ferrum//lib/ferrum/browser/process.rb#132
  def remove_user_data_dir; end

  # source://ferrum//lib/ferrum/browser/process.rb#161
  def ws_url=(url); end

  class << self
    # source://ferrum//lib/ferrum/browser/process.rb#53
    def directory_remover(path); end

    # source://ferrum//lib/ferrum/browser/process.rb#31
    def process_killer(pid); end

    # source://ferrum//lib/ferrum/browser/process.rb#27
    def start(*args); end
  end
end

# source://ferrum//lib/ferrum/browser/process.rb#16
Ferrum::Browser::Process::KILL_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://ferrum//lib/ferrum/browser/process.rb#18
Ferrum::Browser::Process::PROCESS_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://ferrum//lib/ferrum/browser/process.rb#17
Ferrum::Browser::Process::WAIT_KILLED = T.let(T.unsafe(nil), Float)

# source://ferrum//lib/ferrum/browser/subscriber.rb#5
class Ferrum::Browser::Subscriber
  include ::Concurrent::Async
  extend ::Concurrent::Async::ClassMethods

  # @return [Subscriber] a new instance of Subscriber
  #
  # source://ferrum//lib/ferrum/browser/subscriber.rb#12
  def initialize; end

  # source://ferrum//lib/ferrum/browser/subscriber.rb#26
  def call(message); end

  # source://ferrum//lib/ferrum/browser/subscriber.rb#17
  def on(event, &block); end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/browser/subscriber.rb#22
  def subscribed?(event); end

  class << self
    # source://ferrum//lib/ferrum/browser/subscriber.rb#8
    def build(size); end

    def original_new(*_arg0); end
  end
end

# source://ferrum//lib/ferrum/browser.rb#16
Ferrum::Browser::WINDOW_SIZE = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/browser/web_socket.rb#9
class Ferrum::Browser::WebSocket
  # @return [WebSocket] a new instance of WebSocket
  #
  # source://ferrum//lib/ferrum/browser/web_socket.rb#15
  def initialize(url, max_receive_size, logger); end

  # source://ferrum//lib/ferrum/browser/web_socket.rb#86
  def close; end

  # Returns the value of attribute messages.
  #
  # source://ferrum//lib/ferrum/browser/web_socket.rb#13
  def messages; end

  # source://ferrum//lib/ferrum/browser/web_socket.rb#67
  def on_close(_event); end

  # source://ferrum//lib/ferrum/browser/web_socket.rb#54
  def on_message(event); end

  # source://ferrum//lib/ferrum/browser/web_socket.rb#49
  def on_open(_event); end

  # source://ferrum//lib/ferrum/browser/web_socket.rb#72
  def send_message(data); end

  # Returns the value of attribute url.
  #
  # source://ferrum//lib/ferrum/browser/web_socket.rb#13
  def url; end

  # source://ferrum//lib/ferrum/browser/web_socket.rb#80
  def write(data); end
end

# source://ferrum//lib/ferrum/browser/web_socket.rb#11
Ferrum::Browser::WebSocket::SKIP_LOGGING_SCREENSHOTS = T.let(T.unsafe(nil), TrueClass)

# source://ferrum//lib/ferrum/browser/web_socket.rb#10
Ferrum::Browser::WebSocket::WEBSOCKET_BUG_SLEEP = T.let(T.unsafe(nil), Float)

# source://ferrum//lib/ferrum/browser/xvfb.rb#5
class Ferrum::Browser::Xvfb
  # @raise [BinaryNotFoundError]
  # @return [Xvfb] a new instance of Xvfb
  #
  # source://ferrum//lib/ferrum/browser/xvfb.rb#15
  def initialize(options); end

  # Returns the value of attribute display_id.
  #
  # source://ferrum//lib/ferrum/browser/xvfb.rb#13
  def display_id; end

  # Returns the value of attribute pid.
  #
  # source://ferrum//lib/ferrum/browser/xvfb.rb#13
  def pid; end

  # Returns the value of attribute screen_size.
  #
  # source://ferrum//lib/ferrum/browser/xvfb.rb#13
  def screen_size; end

  # source://ferrum//lib/ferrum/browser/xvfb.rb#23
  def start; end

  # source://ferrum//lib/ferrum/browser/xvfb.rb#28
  def to_env; end

  class << self
    # source://ferrum//lib/ferrum/browser/xvfb.rb#9
    def start(*args); end
  end
end

# source://ferrum//lib/ferrum/browser/xvfb.rb#6
Ferrum::Browser::Xvfb::NOT_FOUND = T.let(T.unsafe(nil), String)

# source://ferrum//lib/ferrum/errors.rb#80
class Ferrum::BrowserError < ::Ferrum::Error
  # @return [BrowserError] a new instance of BrowserError
  #
  # source://ferrum//lib/ferrum/errors.rb#83
  def initialize(response); end

  # source://ferrum//lib/ferrum/errors.rb#88
  def code; end

  # source://ferrum//lib/ferrum/errors.rb#92
  def data; end

  # Returns the value of attribute response.
  #
  # source://ferrum//lib/ferrum/errors.rb#81
  def response; end
end

# source://ferrum//lib/ferrum/context.rb#6
class Ferrum::Context
  # @return [Context] a new instance of Context
  #
  # source://ferrum//lib/ferrum/context.rb#11
  def initialize(browser, contexts, id); end

  # source://ferrum//lib/ferrum/context.rb#58
  def add_target(params); end

  # source://ferrum//lib/ferrum/context.rb#43
  def create_page; end

  # @raise [NoSuchTargetError]
  #
  # source://ferrum//lib/ferrum/context.rb#47
  def create_target; end

  # source://ferrum//lib/ferrum/context.rb#19
  def default_target; end

  # source://ferrum//lib/ferrum/context.rb#71
  def delete_target(target_id); end

  # source://ferrum//lib/ferrum/context.rb#75
  def dispose; end

  # Returns the value of attribute id.
  #
  # source://ferrum//lib/ferrum/context.rb#9
  def id; end

  # source://ferrum//lib/ferrum/context.rb#83
  def inspect; end

  # source://ferrum//lib/ferrum/context.rb#23
  def page; end

  # source://ferrum//lib/ferrum/context.rb#27
  def pages; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/context.rb#79
  def target?(target_id); end

  # Returns the value of attribute targets.
  #
  # source://ferrum//lib/ferrum/context.rb#9
  def targets; end

  # source://ferrum//lib/ferrum/context.rb#67
  def update_target(target_id, params); end

  # When we call `page` method on target it triggers ruby to connect to given
  # page by WebSocket, if there are many opened windows but we need only one
  # it makes more sense to get and connect to the needed one only which
  # usually is the last one.
  #
  # @raise [ArgumentError]
  #
  # source://ferrum//lib/ferrum/context.rb#35
  def windows(pos = T.unsafe(nil), size = T.unsafe(nil)); end
end

# source://ferrum//lib/ferrum/context.rb#7
Ferrum::Context::POSITION = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/contexts.rb#6
class Ferrum::Contexts
  # @return [Contexts] a new instance of Contexts
  #
  # source://ferrum//lib/ferrum/contexts.rb#9
  def initialize(browser); end

  # Returns the value of attribute contexts.
  #
  # source://ferrum//lib/ferrum/contexts.rb#7
  def contexts; end

  # source://ferrum//lib/ferrum/contexts.rb#26
  def create; end

  # source://ferrum//lib/ferrum/contexts.rb#16
  def default_context; end

  # source://ferrum//lib/ferrum/contexts.rb#34
  def dispose(context_id); end

  # source://ferrum//lib/ferrum/contexts.rb#20
  def find_by(target_id:); end

  # source://ferrum//lib/ferrum/contexts.rb#42
  def reset; end

  # source://ferrum//lib/ferrum/contexts.rb#47
  def size; end

  private

  # source://ferrum//lib/ferrum/contexts.rb#81
  def discover; end

  # source://ferrum//lib/ferrum/contexts.rb#53
  def subscribe; end
end

# source://ferrum//lib/ferrum/cookies.rb#4
class Ferrum::Cookies
  # @return [Cookies] a new instance of Cookies
  #
  # source://ferrum//lib/ferrum/cookies.rb#53
  def initialize(page); end

  # source://ferrum//lib/ferrum/cookies.rb#62
  def [](name); end

  # source://ferrum//lib/ferrum/cookies.rb#57
  def all; end

  # source://ferrum//lib/ferrum/cookies.rb#94
  def clear; end

  # Supports :url, :domain and :path options
  #
  # source://ferrum//lib/ferrum/cookies.rb#83
  def remove(name:, **options); end

  # source://ferrum//lib/ferrum/cookies.rb#66
  def set(options); end

  private

  # source://ferrum//lib/ferrum/cookies.rb#101
  def default_domain; end
end

# source://ferrum//lib/ferrum/cookies.rb#5
class Ferrum::Cookies::Cookie
  # @return [Cookie] a new instance of Cookie
  #
  # source://ferrum//lib/ferrum/cookies.rb#8
  def initialize(attributes); end

  # Returns the value of attribute attributes.
  #
  # source://ferrum//lib/ferrum/cookies.rb#6
  def attributes; end

  # source://ferrum//lib/ferrum/cookies.rb#20
  def domain; end

  # source://ferrum//lib/ferrum/cookies.rb#48
  def expires; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/cookies.rb#40
  def httponly?; end

  # source://ferrum//lib/ferrum/cookies.rb#12
  def name; end

  # source://ferrum//lib/ferrum/cookies.rb#24
  def path; end

  # source://ferrum//lib/ferrum/cookies.rb#28
  def samesite; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/cookies.rb#36
  def secure?; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/cookies.rb#44
  def session?; end

  # source://ferrum//lib/ferrum/cookies.rb#32
  def size; end

  # source://ferrum//lib/ferrum/cookies.rb#16
  def value; end
end

# source://ferrum//lib/ferrum/errors.rb#74
class Ferrum::CoordinatesNotFoundError < ::Ferrum::Error
  # @return [CoordinatesNotFoundError] a new instance of CoordinatesNotFoundError
  #
  # source://ferrum//lib/ferrum/errors.rb#75
  def initialize(message = T.unsafe(nil)); end
end

# source://ferrum//lib/ferrum/frame/runtime.rb#6
class Ferrum::CyclicObject
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://ferrum//lib/ferrum/frame/runtime.rb#9
  def inspect; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://ferrum//lib/ferrum/errors.rb#53
class Ferrum::DeadBrowserError < ::Ferrum::Error
  # @return [DeadBrowserError] a new instance of DeadBrowserError
  #
  # source://ferrum//lib/ferrum/errors.rb#54
  def initialize(message = T.unsafe(nil)); end
end

# source://ferrum//lib/ferrum/dialog.rb#4
class Ferrum::Dialog
  # @return [Dialog] a new instance of Dialog
  #
  # source://ferrum//lib/ferrum/dialog.rb#7
  def initialize(page, params); end

  # source://ferrum//lib/ferrum/dialog.rb#13
  def accept(prompt_text = T.unsafe(nil)); end

  # Returns the value of attribute default_prompt.
  #
  # source://ferrum//lib/ferrum/dialog.rb#5
  def default_prompt; end

  # source://ferrum//lib/ferrum/dialog.rb#20
  def dismiss; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/dialog.rb#24
  def match?(regexp); end

  # Returns the value of attribute message.
  #
  # source://ferrum//lib/ferrum/dialog.rb#5
  def message; end
end

# source://ferrum//lib/ferrum/errors.rb#9
class Ferrum::EmptyPathError < ::Ferrum::Error; end

# source://ferrum//lib/ferrum/errors.rb#4
class Ferrum::Error < ::StandardError; end

# source://ferrum//lib/ferrum/frame/dom.rb#21
class Ferrum::Frame
  include ::Ferrum::Frame::DOM
  include ::Ferrum::Frame::Runtime

  # @return [Frame] a new instance of Frame
  #
  # source://ferrum//lib/ferrum/frame.rb#20
  def initialize(id, page, parent_id = T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/frame.rb#45
  def content=(html); end

  # @raise [NoExecutionContextError]
  #
  # source://ferrum//lib/ferrum/frame.rb#55
  def execution_id; end

  # source://ferrum//lib/ferrum/frame.rb#62
  def execution_id=(value); end

  # Returns the value of attribute id.
  #
  # source://ferrum//lib/ferrum/frame.rb#17
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  #
  # source://ferrum//lib/ferrum/frame.rb#17
  def id=(_arg0); end

  # source://ferrum//lib/ferrum/frame.rb#70
  def inspect; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/frame.rb#41
  def main?; end

  # Returns the value of attribute name.
  #
  # source://ferrum//lib/ferrum/frame.rb#17
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://ferrum//lib/ferrum/frame.rb#17
  def name=(_arg0); end

  # Returns the value of attribute page.
  #
  # source://ferrum//lib/ferrum/frame.rb#18
  def page; end

  # Returns the value of attribute parent_id.
  #
  # source://ferrum//lib/ferrum/frame.rb#18
  def parent_id; end

  # source://ferrum//lib/ferrum/frame.rb#45
  def set_content(html); end

  # Returns the value of attribute state.
  #
  # source://ferrum//lib/ferrum/frame.rb#18
  def state; end

  # @raise [ArgumentError]
  #
  # source://ferrum//lib/ferrum/frame.rb#27
  def state=(value); end

  # source://ferrum//lib/ferrum/frame.rb#37
  def title; end

  # source://ferrum//lib/ferrum/frame.rb#33
  def url; end
end

# source://ferrum//lib/ferrum/frame/dom.rb#22
module Ferrum::Frame::DOM
  # source://ferrum//lib/ferrum/frame/dom.rb#79
  def at_css(selector, within: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/frame/dom.rb#57
  def at_xpath(selector, within: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/frame/dom.rb#35
  def body; end

  # source://ferrum//lib/ferrum/frame/dom.rb#68
  def css(selector, within: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/frame/dom.rb#27
  def current_title; end

  # source://ferrum//lib/ferrum/frame/dom.rb#23
  def current_url; end

  # source://ferrum//lib/ferrum/frame/dom.rb#31
  def doctype; end

  # source://ferrum//lib/ferrum/frame/dom.rb#39
  def xpath(selector, within: T.unsafe(nil)); end
end

# source://ferrum//lib/ferrum/frame/runtime.rb#15
module Ferrum::Frame::Runtime
  # source://ferrum//lib/ferrum/frame/runtime.rb#90
  def add_script_tag(url: T.unsafe(nil), path: T.unsafe(nil), content: T.unsafe(nil), type: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/frame/runtime.rb#104
  def add_style_tag(url: T.unsafe(nil), path: T.unsafe(nil), content: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/frame/runtime.rb#48
  def evaluate(expression, *args); end

  # source://ferrum//lib/ferrum/frame/runtime.rb#53
  def evaluate_async(expression, wait, *args); end

  # source://ferrum//lib/ferrum/frame/runtime.rb#79
  def evaluate_func(expression, *args, on: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/frame/runtime.rb#83
  def evaluate_on(node:, expression:, by_value: T.unsafe(nil), wait: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/frame/runtime.rb#73
  def execute(expression, *args); end

  private

  # source://ferrum//lib/ferrum/frame/runtime.rb#120
  def call(expression:, arguments: T.unsafe(nil), on: T.unsafe(nil), wait: T.unsafe(nil), handle: T.unsafe(nil), **options); end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/frame/runtime.rb#228
  def cyclic?(object_id); end

  # source://ferrum//lib/ferrum/frame/runtime.rb#261
  def cyclic_object; end

  # FIXME: We should have a central place to handle all type of errors
  #
  # source://ferrum//lib/ferrum/frame/runtime.rb#150
  def handle_error(response); end

  # source://ferrum//lib/ferrum/frame/runtime.rb#162
  def handle_response(response); end

  # source://ferrum//lib/ferrum/frame/runtime.rb#202
  def prepare_args(args); end

  # source://ferrum//lib/ferrum/frame/runtime.rb#215
  def reduce_props(object_id, to); end
end

# source://ferrum//lib/ferrum/frame/runtime.rb#16
Ferrum::Frame::Runtime::INTERMITTENT_ATTEMPTS = T.let(T.unsafe(nil), Integer)

# source://ferrum//lib/ferrum/frame/runtime.rb#17
Ferrum::Frame::Runtime::INTERMITTENT_SLEEP = T.let(T.unsafe(nil), Float)

# source://ferrum//lib/ferrum/frame/runtime.rb#40
Ferrum::Frame::Runtime::LINK_TAG = T.let(T.unsafe(nil), String)

# source://ferrum//lib/ferrum/frame/runtime.rb#19
Ferrum::Frame::Runtime::SCRIPT_SRC_TAG = T.let(T.unsafe(nil), String)

# source://ferrum//lib/ferrum/frame/runtime.rb#26
Ferrum::Frame::Runtime::SCRIPT_TEXT_TAG = T.let(T.unsafe(nil), String)

# source://ferrum//lib/ferrum/frame/runtime.rb#33
Ferrum::Frame::Runtime::STYLE_TAG = T.let(T.unsafe(nil), String)

# source://ferrum//lib/ferrum/frame.rb#11
Ferrum::Frame::STATE_VALUES = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/headers.rb#4
class Ferrum::Headers
  # @return [Headers] a new instance of Headers
  #
  # source://ferrum//lib/ferrum/headers.rb#5
  def initialize(page); end

  # source://ferrum//lib/ferrum/headers.rb#24
  def add(headers, permanent: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/headers.rb#19
  def clear; end

  # source://ferrum//lib/ferrum/headers.rb#10
  def get; end

  # source://ferrum//lib/ferrum/headers.rb#14
  def set(headers); end

  private

  # source://ferrum//lib/ferrum/headers.rb#41
  def set_overrides(user_agent: T.unsafe(nil), accept_language: T.unsafe(nil), platform: T.unsafe(nil)); end
end

# source://ferrum//lib/ferrum/errors.rb#106
class Ferrum::JavaScriptError < ::Ferrum::BrowserError
  # @return [JavaScriptError] a new instance of JavaScriptError
  #
  # source://ferrum//lib/ferrum/errors.rb#109
  def initialize(response, stack_trace = T.unsafe(nil)); end

  # Returns the value of attribute class_name.
  #
  # source://ferrum//lib/ferrum/errors.rb#107
  def class_name; end

  # Returns the value of attribute message.
  #
  # source://ferrum//lib/ferrum/errors.rb#107
  def message; end

  # Returns the value of attribute stack_trace.
  #
  # source://ferrum//lib/ferrum/errors.rb#107
  def stack_trace; end
end

# source://ferrum//lib/ferrum/keyboard.rb#6
class Ferrum::Keyboard
  # @return [Keyboard] a new instance of Keyboard
  #
  # source://ferrum//lib/ferrum/keyboard.rb#29
  def initialize(page); end

  # source://ferrum//lib/ferrum/keyboard.rb#33
  def down(key); end

  # source://ferrum//lib/ferrum/keyboard.rb#58
  def modifiers(keys); end

  # source://ferrum//lib/ferrum/keyboard.rb#46
  def type(*keys); end

  # source://ferrum//lib/ferrum/keyboard.rb#40
  def up(key); end

  private

  # source://ferrum//lib/ferrum/keyboard.rb#108
  def combine_strings(keys); end

  # source://ferrum//lib/ferrum/keyboard.rb#64
  def normalize_keys(keys, pressed_keys = T.unsafe(nil), memo = T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/keyboard.rb#115
  def to_options(hash); end
end

# source://ferrum//lib/ferrum/keyboard.rb#7
Ferrum::Keyboard::KEYS = T.let(T.unsafe(nil), Hash)

# source://ferrum//lib/ferrum/keyboard.rb#10
Ferrum::Keyboard::KEYS_MAPPING = T.let(T.unsafe(nil), Hash)

# source://ferrum//lib/ferrum/keyboard.rb#8
Ferrum::Keyboard::MODIFIERS = T.let(T.unsafe(nil), Hash)

# source://ferrum//lib/ferrum/mouse.rb#4
class Ferrum::Mouse
  # @return [Mouse] a new instance of Mouse
  #
  # source://ferrum//lib/ferrum/mouse.rb#8
  def initialize(page); end

  # source://ferrum//lib/ferrum/mouse.rb#17
  def click(x:, y:, delay: T.unsafe(nil), wait: T.unsafe(nil), **options); end

  # source://ferrum//lib/ferrum/mouse.rb#27
  def down(**options); end

  # source://ferrum//lib/ferrum/mouse.rb#35
  def move(x:, y:, steps: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/mouse.rb#13
  def scroll_to(top, left); end

  # source://ferrum//lib/ferrum/mouse.rb#31
  def up(**options); end

  private

  # source://ferrum//lib/ferrum/mouse.rb#57
  def mouse_event(type:, button: T.unsafe(nil), count: T.unsafe(nil), modifiers: T.unsafe(nil), wait: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/mouse.rb#64
  def validate_button(button); end
end

# source://ferrum//lib/ferrum/mouse.rb#5
Ferrum::Mouse::CLICK_WAIT = T.let(T.unsafe(nil), Float)

# source://ferrum//lib/ferrum/mouse.rb#6
Ferrum::Mouse::VALID_BUTTONS = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/network/exchange.rb#4
class Ferrum::Network
  # @return [Network] a new instance of Network
  #
  # source://ferrum//lib/ferrum/network.rb#24
  def initialize(page); end

  # source://ferrum//lib/ferrum/network.rb#88
  def allowlist=(patterns); end

  # @raise [ArgumentError]
  #
  # source://ferrum//lib/ferrum/network.rb#101
  def authorize(user:, password:, type: T.unsafe(nil), &block); end

  # source://ferrum//lib/ferrum/network.rb#136
  def authorized_response(ids, request_id, username, password); end

  # source://ferrum//lib/ferrum/network.rb#82
  def blacklist=(patterns); end

  # source://ferrum//lib/ferrum/network.rb#82
  def blocklist=(patterns); end

  # source://ferrum//lib/ferrum/network.rb#150
  def build_exchange(id); end

  # @raise [ArgumentError]
  #
  # source://ferrum//lib/ferrum/network.rb#70
  def clear(type); end

  # source://ferrum//lib/ferrum/network.rb#154
  def emulate_network_conditions(offline: T.unsafe(nil), latency: T.unsafe(nil), download_throughput: T.unsafe(nil), upload_throughput: T.unsafe(nil), connection_type: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/network.rb#50
  def finished_connections; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network.rb#42
  def idle?(connections = T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/network.rb#94
  def intercept(pattern: T.unsafe(nil), resource_type: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/network.rb#169
  def offline_mode; end

  # source://ferrum//lib/ferrum/network.rb#54
  def pending_connections; end

  # source://ferrum//lib/ferrum/network.rb#58
  def request; end

  # source://ferrum//lib/ferrum/network.rb#62
  def response; end

  # source://ferrum//lib/ferrum/network.rb#146
  def select(request_id); end

  # source://ferrum//lib/ferrum/network.rb#66
  def status; end

  # source://ferrum//lib/ferrum/network.rb#128
  def subscribe; end

  # source://ferrum//lib/ferrum/network.rb#46
  def total_connections; end

  # Returns the value of attribute traffic.
  #
  # source://ferrum//lib/ferrum/network.rb#22
  def traffic; end

  # source://ferrum//lib/ferrum/network.rb#32
  def wait_for_idle(connections: T.unsafe(nil), duration: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/network.rb#88
  def whitelist=(patterns); end

  private

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network.rb#288
  def blacklist?; end

  # @raise [ArgumentError]
  #
  # source://ferrum//lib/ferrum/network.rb#250
  def blacklist_subscribe; end

  # source://ferrum//lib/ferrum/network.rb#222
  def subscribe_loading_failed; end

  # source://ferrum//lib/ferrum/network.rb#215
  def subscribe_loading_finished; end

  # source://ferrum//lib/ferrum/network.rb#235
  def subscribe_log_entry_added; end

  # source://ferrum//lib/ferrum/network.rb#175
  def subscribe_request_will_be_sent; end

  # source://ferrum//lib/ferrum/network.rb#204
  def subscribe_response_received; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network.rb#292
  def whitelist?; end

  # @raise [ArgumentError]
  #
  # source://ferrum//lib/ferrum/network.rb#269
  def whitelist_subscribe; end
end

# source://ferrum//lib/ferrum/network.rb#20
Ferrum::Network::ALLOWED_CONNECTION_TYPE = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/network.rb#17
Ferrum::Network::AUTHORIZE_BLOCK_MISSING = T.let(T.unsafe(nil), String)

# source://ferrum//lib/ferrum/network.rb#13
Ferrum::Network::AUTHORIZE_TYPE = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/network.rb#19
Ferrum::Network::AUTHORIZE_TYPE_WRONG = T.let(T.unsafe(nil), String)

# source://ferrum//lib/ferrum/network/auth_request.rb#5
class Ferrum::Network::AuthRequest
  # @return [AuthRequest] a new instance of AuthRequest
  #
  # source://ferrum//lib/ferrum/network/auth_request.rb#8
  def initialize(page, params); end

  # source://ferrum//lib/ferrum/network/auth_request.rb#34
  def abort; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/auth_request.rb#21
  def auth_challenge?(source); end

  # source://ferrum//lib/ferrum/network/auth_request.rb#29
  def continue(**options); end

  # Returns the value of attribute frame_id.
  #
  # source://ferrum//lib/ferrum/network/auth_request.rb#6
  def frame_id; end

  # Sets the attribute frame_id
  #
  # @param value the value to set the attribute frame_id to.
  #
  # source://ferrum//lib/ferrum/network/auth_request.rb#6
  def frame_id=(_arg0); end

  # source://ferrum//lib/ferrum/network/auth_request.rb#46
  def headers; end

  # source://ferrum//lib/ferrum/network/auth_request.rb#50
  def initial_priority; end

  # source://ferrum//lib/ferrum/network/auth_request.rb#58
  def inspect; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/auth_request.rb#25
  def match?(regexp); end

  # source://ferrum//lib/ferrum/network/auth_request.rb#42
  def method; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/auth_request.rb#17
  def navigation_request?; end

  # source://ferrum//lib/ferrum/network/auth_request.rb#54
  def referrer_policy; end

  # Returns the value of attribute request_id.
  #
  # source://ferrum//lib/ferrum/network/auth_request.rb#6
  def request_id; end

  # Sets the attribute request_id
  #
  # @param value the value to set the attribute request_id to.
  #
  # source://ferrum//lib/ferrum/network/auth_request.rb#6
  def request_id=(_arg0); end

  # Returns the value of attribute resource_type.
  #
  # source://ferrum//lib/ferrum/network/auth_request.rb#6
  def resource_type; end

  # Sets the attribute resource_type
  #
  # @param value the value to set the attribute resource_type to.
  #
  # source://ferrum//lib/ferrum/network/auth_request.rb#6
  def resource_type=(_arg0); end

  # source://ferrum//lib/ferrum/network/auth_request.rb#38
  def url; end
end

# source://ferrum//lib/ferrum/network.rb#12
Ferrum::Network::CLEAR_TYPE = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/network/error.rb#5
class Ferrum::Network::Error
  # Sets the attribute canceled
  #
  # @param value the value to set the attribute canceled to.
  #
  # source://ferrum//lib/ferrum/network/error.rb#6
  def canceled=(_arg0); end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/error.rb#10
  def canceled?; end

  # Returns the value of attribute description.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def description; end

  # Sets the attribute description
  #
  # @param value the value to set the attribute description to.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def description=(_arg0); end

  # Returns the value of attribute error_text.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def error_text; end

  # Sets the attribute error_text
  #
  # @param value the value to set the attribute error_text to.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def error_text=(_arg0); end

  # Returns the value of attribute id.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def id=(_arg0); end

  # Returns the value of attribute monotonic_time.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def monotonic_time; end

  # Sets the attribute monotonic_time
  #
  # @param value the value to set the attribute monotonic_time to.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def monotonic_time=(_arg0); end

  # Returns the value of attribute time.
  #
  # source://ferrum//lib/ferrum/network/error.rb#7
  def time; end

  # Returns the value of attribute timestamp.
  #
  # source://ferrum//lib/ferrum/network/error.rb#7
  def timestamp; end

  # source://ferrum//lib/ferrum/network/error.rb#14
  def timestamp=(value); end

  # Returns the value of attribute type.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def type=(_arg0); end

  # Returns the value of attribute url.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def url; end

  # Sets the attribute url
  #
  # @param value the value to set the attribute url to.
  #
  # source://ferrum//lib/ferrum/network/error.rb#8
  def url=(_arg0); end
end

# source://ferrum//lib/ferrum/network/exchange.rb#5
class Ferrum::Network::Exchange
  # @return [Exchange] a new instance of Exchange
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#9
  def initialize(page, id); end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#21
  def blank?; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#25
  def blocked?; end

  # Returns the value of attribute error.
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#7
  def error; end

  # Sets the attribute error
  #
  # @param value the value to set the attribute error to.
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#7
  def error=(_arg0); end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#29
  def finished?; end

  # Returns the value of attribute id.
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#6
  def id; end

  # source://ferrum//lib/ferrum/network/exchange.rb#45
  def inspect; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#37
  def intercepted?; end

  # Returns the value of attribute intercepted_request.
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#7
  def intercepted_request; end

  # Sets the attribute intercepted_request
  #
  # @param value the value to set the attribute intercepted_request to.
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#7
  def intercepted_request=(_arg0); end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#16
  def navigation_request?(frame_id); end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#33
  def pending?; end

  # Returns the value of attribute request.
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#7
  def request; end

  # Sets the attribute request
  #
  # @param value the value to set the attribute request to.
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#7
  def request=(_arg0); end

  # Returns the value of attribute response.
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#7
  def response; end

  # Sets the attribute response
  #
  # @param value the value to set the attribute response to.
  #
  # source://ferrum//lib/ferrum/network/exchange.rb#7
  def response=(_arg0); end

  # source://ferrum//lib/ferrum/network/exchange.rb#41
  def to_a; end
end

# source://ferrum//lib/ferrum/network/intercepted_request.rb#7
class Ferrum::Network::InterceptedRequest
  # @return [InterceptedRequest] a new instance of InterceptedRequest
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#10
  def initialize(page, params); end

  # source://ferrum//lib/ferrum/network/intercepted_request.rb#52
  def abort; end

  # source://ferrum//lib/ferrum/network/intercepted_request.rb#46
  def continue(**options); end

  # Returns the value of attribute frame_id.
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#8
  def frame_id; end

  # Sets the attribute frame_id
  #
  # @param value the value to set the attribute frame_id to.
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#8
  def frame_id=(_arg0); end

  # source://ferrum//lib/ferrum/network/intercepted_request.rb#65
  def headers; end

  # source://ferrum//lib/ferrum/network/intercepted_request.rb#69
  def initial_priority; end

  # source://ferrum//lib/ferrum/network/intercepted_request.rb#77
  def inspect; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#29
  def match?(regexp); end

  # source://ferrum//lib/ferrum/network/intercepted_request.rb#61
  def method; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#25
  def navigation_request?; end

  # Returns the value of attribute network_id.
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#8
  def network_id; end

  # Sets the attribute network_id
  #
  # @param value the value to set the attribute network_id to.
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#8
  def network_id=(_arg0); end

  # source://ferrum//lib/ferrum/network/intercepted_request.rb#73
  def referrer_policy; end

  # Returns the value of attribute request_id.
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#8
  def request_id; end

  # Sets the attribute request_id
  #
  # @param value the value to set the attribute request_id to.
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#8
  def request_id=(_arg0); end

  # Returns the value of attribute resource_type.
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#8
  def resource_type; end

  # Sets the attribute resource_type
  #
  # @param value the value to set the attribute resource_type to.
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#8
  def resource_type=(_arg0); end

  # source://ferrum//lib/ferrum/network/intercepted_request.rb#33
  def respond(**options); end

  # Returns the value of attribute status.
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#8
  def status; end

  # Sets the attribute status
  #
  # @param value the value to set the attribute status to.
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#8
  def status=(_arg0); end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/intercepted_request.rb#21
  def status?(value); end

  # source://ferrum//lib/ferrum/network/intercepted_request.rb#57
  def url; end

  private

  # source://ferrum//lib/ferrum/network/intercepted_request.rb#87
  def header_array(values); end
end

# source://ferrum//lib/ferrum/network.rb#14
Ferrum::Network::RESOURCE_TYPES = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/network/request.rb#7
class Ferrum::Network::Request
  # @return [Request] a new instance of Request
  #
  # source://ferrum//lib/ferrum/network/request.rb#8
  def initialize(params); end

  # source://ferrum//lib/ferrum/network/request.rb#49
  def body; end

  # source://ferrum//lib/ferrum/network/request.rb#25
  def frame_id; end

  # source://ferrum//lib/ferrum/network/request.rb#41
  def headers; end

  # source://ferrum//lib/ferrum/network/request.rb#13
  def id; end

  # source://ferrum//lib/ferrum/network/request.rb#37
  def method; end

  # source://ferrum//lib/ferrum/network/request.rb#49
  def post_data; end

  # source://ferrum//lib/ferrum/network/request.rb#45
  def time; end

  # source://ferrum//lib/ferrum/network/request.rb#17
  def type; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/request.rb#21
  def type?(value); end

  # source://ferrum//lib/ferrum/network/request.rb#29
  def url; end

  # source://ferrum//lib/ferrum/network/request.rb#33
  def url_fragment; end
end

# source://ferrum//lib/ferrum/network/response.rb#5
class Ferrum::Network::Response
  # @return [Response] a new instance of Response
  #
  # source://ferrum//lib/ferrum/network/response.rb#8
  def initialize(page, params); end

  # source://ferrum//lib/ferrum/network/response.rb#68
  def ==(other); end

  # source://ferrum//lib/ferrum/network/response.rb#55
  def body; end

  # Returns the value of attribute body_size.
  #
  # source://ferrum//lib/ferrum/network/response.rb#6
  def body_size; end

  # See https://crbug.com/883475
  # Sometimes we never get the Network.responseReceived event.
  # See https://crbug.com/764946
  # `Network.loadingFinished` encodedDataLength contains both body and
  # headers sizes received by wire.
  #
  # source://ferrum//lib/ferrum/network/response.rb#51
  def body_size=(size); end

  # source://ferrum//lib/ferrum/network/response.rb#42
  def content_type; end

  # source://ferrum//lib/ferrum/network/response.rb#30
  def headers; end

  # source://ferrum//lib/ferrum/network/response.rb#34
  def headers_size; end

  # source://ferrum//lib/ferrum/network/response.rb#14
  def id; end

  # source://ferrum//lib/ferrum/network/response.rb#72
  def inspect; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/network/response.rb#64
  def main?; end

  # Returns the value of attribute params.
  #
  # source://ferrum//lib/ferrum/network/response.rb#6
  def params; end

  # source://ferrum//lib/ferrum/network/response.rb#22
  def status; end

  # source://ferrum//lib/ferrum/network/response.rb#26
  def status_text; end

  # source://ferrum//lib/ferrum/network/response.rb#38
  def type; end

  # source://ferrum//lib/ferrum/network/response.rb#18
  def url; end
end

# source://ferrum//lib/ferrum/errors.rb#99
class Ferrum::NoExecutionContextError < ::Ferrum::BrowserError
  # @return [NoExecutionContextError] a new instance of NoExecutionContextError
  #
  # source://ferrum//lib/ferrum/errors.rb#100
  def initialize(response = T.unsafe(nil)); end
end

# source://ferrum//lib/ferrum/errors.rb#5
class Ferrum::NoSuchPageError < ::Ferrum::Error; end

# source://ferrum//lib/ferrum/errors.rb#6
class Ferrum::NoSuchTargetError < ::Ferrum::Error; end

# source://ferrum//lib/ferrum/node.rb#4
class Ferrum::Node
  # @return [Node] a new instance of Node
  #
  # source://ferrum//lib/ferrum/node.rb#10
  def initialize(frame, target_id, node_id, description); end

  # source://ferrum//lib/ferrum/node.rb#170
  def ==(other); end

  # source://ferrum//lib/ferrum/node.rb#124
  def [](name); end

  # source://ferrum//lib/ferrum/node.rb#99
  def at_css(selector); end

  # source://ferrum//lib/ferrum/node.rb#95
  def at_xpath(selector); end

  # source://ferrum//lib/ferrum/node.rb#129
  def attribute(name); end

  # source://ferrum//lib/ferrum/node.rb#55
  def blur; end

  # mode: (:left | :right | :double)
  # keys: (:alt, (:ctrl | :control), (:meta | :command), :shift)
  # offset: { :x, :y, :position (:top | :center) }
  #
  # source://ferrum//lib/ferrum/node.rb#66
  def click(mode: T.unsafe(nil), keys: T.unsafe(nil), offset: T.unsafe(nil), delay: T.unsafe(nil)); end

  # Returns a hash of the computed styles for the node
  #
  # source://ferrum//lib/ferrum/node.rb#194
  def computed_style; end

  # source://ferrum//lib/ferrum/node.rb#107
  def css(selector); end

  # Returns the value of attribute description.
  #
  # source://ferrum//lib/ferrum/node.rb#8
  def description; end

  # source://ferrum//lib/ferrum/node.rb#166
  def evaluate(expression); end

  # source://ferrum//lib/ferrum/node.rb#183
  def find_position(x: T.unsafe(nil), y: T.unsafe(nil), position: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/node.rb#30
  def focus; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/node.rb#34
  def focusable?; end

  # source://ferrum//lib/ferrum/node.rb#26
  def frame; end

  # source://ferrum//lib/ferrum/node.rb#22
  def frame_id; end

  # @raise [NotImplementedError]
  #
  # source://ferrum//lib/ferrum/node.rb#87
  def hover; end

  # FIXME: clear API for text and inner_text
  #
  # source://ferrum//lib/ferrum/node.rb#116
  def inner_text; end

  # source://ferrum//lib/ferrum/node.rb#179
  def inspect; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/node.rb#50
  def moving?(delay: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/node.rb#18
  def node?; end

  # Returns the value of attribute node_id.
  #
  # source://ferrum//lib/ferrum/node.rb#8
  def node_id; end

  # Returns the value of attribute page.
  #
  # source://ferrum//lib/ferrum/node.rb#8
  def page; end

  # source://ferrum//lib/ferrum/node.rb#124
  def property(name); end

  # source://ferrum//lib/ferrum/node.rb#145
  def select(*values, by: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/node.rb#91
  def select_file(value); end

  # source://ferrum//lib/ferrum/node.rb#133
  def selected; end

  # Returns the value of attribute tag_name.
  #
  # source://ferrum//lib/ferrum/node.rb#8
  def tag_name; end

  # Returns the value of attribute target_id.
  #
  # source://ferrum//lib/ferrum/node.rb#8
  def target_id; end

  # source://ferrum//lib/ferrum/node.rb#111
  def text; end

  # source://ferrum//lib/ferrum/node.rb#59
  def type(*keys); end

  # source://ferrum//lib/ferrum/node.rb#120
  def value; end

  # source://ferrum//lib/ferrum/node.rb#41
  def wait_for_stop_moving(delay: T.unsafe(nil), attempts: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/node.rb#103
  def xpath(selector); end

  private

  # source://ferrum//lib/ferrum/node.rb#202
  def bounding_rect_coordinates; end

  # @raise [CoordinatesNotFoundError]
  #
  # source://ferrum//lib/ferrum/node.rb#209
  def content_quads; end

  # source://ferrum//lib/ferrum/node.rb#216
  def content_quads_with(delay: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/node.rb#223
  def get_position(points, offset_x, offset_y, position); end

  # source://ferrum//lib/ferrum/node.rb#248
  def to_points(quad); end
end

# source://ferrum//lib/ferrum/node.rb#6
Ferrum::Node::MOVING_WAIT_ATTEMPTS = T.let(T.unsafe(nil), Integer)

# source://ferrum//lib/ferrum/node.rb#5
Ferrum::Node::MOVING_WAIT_DELAY = T.let(T.unsafe(nil), Float)

# source://ferrum//lib/ferrum/errors.rb#59
class Ferrum::NodeMovingError < ::Ferrum::Error
  # @return [NodeMovingError] a new instance of NodeMovingError
  #
  # source://ferrum//lib/ferrum/errors.rb#60
  def initialize(node, prev, current); end

  # source://ferrum//lib/ferrum/errors.rb#67
  def message; end
end

# source://ferrum//lib/ferrum/errors.rb#97
class Ferrum::NodeNotFoundError < ::Ferrum::BrowserError; end

# source://ferrum//lib/ferrum/errors.rb#7
class Ferrum::NotImplementedError < ::Ferrum::Error; end

# source://ferrum//lib/ferrum/page/frames.rb#6
class Ferrum::Page
  include ::Ferrum::Page::Animation
  include ::Ferrum::Page::Screenshot
  include ::Ferrum::Page::Frames
  include ::Ferrum::Page::Stream
  extend ::Forwardable

  # @return [Page] a new instance of Page
  #
  # source://ferrum//lib/ferrum/page.rb#52
  def initialize(target_id, browser); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def add_script_tag(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def add_style_tag(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def at_css(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def at_xpath(*args, **_arg1, &block); end

  # source://ferrum//lib/ferrum/page.rb#147
  def back; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def body(*args, **_arg1, &block); end

  # Returns the value of attribute browser.
  #
  # source://ferrum//lib/ferrum/page.rb#47
  def browser; end

  # source://ferrum//lib/ferrum/page.rb#161
  def bypass_csp(enabled: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/page.rb#105
  def close; end

  # source://ferrum//lib/ferrum/page.rb#174
  def command(method, wait: T.unsafe(nil), slowmoable: T.unsafe(nil), **params); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def content=(*args, **_arg1, &block); end

  # source://ferrum//lib/ferrum/page.rb#79
  def context; end

  # Returns the value of attribute cookies.
  #
  # source://ferrum//lib/ferrum/page.rb#47
  def cookies; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def css(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def current_title(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def current_url(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def doctype(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def evaluate(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def evaluate_async(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def evaluate_func(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def evaluate_on(*args, **_arg1, &block); end

  # Returns the value of attribute event.
  #
  # source://ferrum//lib/ferrum/page.rb#47
  def event; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def execute(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def execution_id(*args, **_arg1, &block); end

  # source://ferrum//lib/ferrum/page.rb#151
  def forward; end

  # source://ferrum//lib/ferrum/page.rb#83
  def go(url = T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/page.rb#83
  def go_to(url = T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/page.rb#83
  def goto(url = T.unsafe(nil)); end

  # Returns the value of attribute headers.
  #
  # source://ferrum//lib/ferrum/page.rb#47
  def headers; end

  # Returns the value of attribute keyboard.
  #
  # source://ferrum//lib/ferrum/page.rb#47
  def keyboard; end

  # Returns the value of attribute mouse.
  #
  # source://ferrum//lib/ferrum/page.rb#47
  def mouse; end

  # Returns the value of attribute network.
  #
  # source://ferrum//lib/ferrum/page.rb#47
  def network; end

  # source://ferrum//lib/ferrum/page.rb#192
  def on(name, &block); end

  # source://ferrum//lib/ferrum/page.rb#128
  def position; end

  # source://ferrum//lib/ferrum/page.rb#132
  def position=(options); end

  # Returns the value of attribute referrer.
  #
  # source://ferrum//lib/ferrum/page.rb#46
  def referrer; end

  # Sets the attribute referrer
  #
  # @param value the value to set the attribute referrer to.
  #
  # source://ferrum//lib/ferrum/page.rb#46
  def referrer=(_arg0); end

  # source://ferrum//lib/ferrum/page.rb#138
  def refresh; end

  # source://ferrum//lib/ferrum/page.rb#138
  def reload; end

  # source://ferrum//lib/ferrum/page.rb#111
  def resize(width: T.unsafe(nil), height: T.unsafe(nil), fullscreen: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/page.rb#170
  def set_window_bounds(bounds = T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/page.rb#143
  def stop; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/page.rb#217
  def subscribed?(event); end

  # Returns the value of attribute target_id.
  #
  # source://ferrum//lib/ferrum/page.rb#47
  def target_id; end

  # source://ferrum//lib/ferrum/page.rb#75
  def timeout; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def title(*args, **_arg1, &block); end

  # Returns the value of attribute tracing.
  #
  # source://ferrum//lib/ferrum/page.rb#47
  def tracing; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def url(*args, **_arg1, &block); end

  # source://ferrum//lib/ferrum/page.rb#155
  def wait_for_reload(sec = T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/page.rb#166
  def window_id; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def xpath(*args, **_arg1, &block); end

  private

  # source://ferrum//lib/ferrum/page.rb#325
  def combine_url!(url_or_path); end

  # source://ferrum//lib/ferrum/page.rb#336
  def document_node_id; end

  # source://ferrum//lib/ferrum/page.rb#311
  def history_navigate(delta:); end

  # source://ferrum//lib/ferrum/page.rb#298
  def inject_extensions; end

  # source://ferrum//lib/ferrum/page.rb#252
  def prepare_page; end

  # source://ferrum//lib/ferrum/page.rb#223
  def subscribe; end
end

# source://ferrum//lib/ferrum/page/animation.rb#5
module Ferrum::Page::Animation
  # source://ferrum//lib/ferrum/page/animation.rb#6
  def playback_rate; end

  # source://ferrum//lib/ferrum/page/animation.rb#10
  def playback_rate=(value); end
end

# source://ferrum//lib/ferrum/page.rb#21
class Ferrum::Page::Event < ::Concurrent::Event
  # source://ferrum//lib/ferrum/page.rb#22
  def iteration; end

  # source://ferrum//lib/ferrum/page.rb#26
  def reset; end
end

# source://ferrum//lib/ferrum/page/frames.rb#7
module Ferrum::Page::Frames
  # source://ferrum//lib/ferrum/page/frames.rb#14
  def frame_by(id: T.unsafe(nil), name: T.unsafe(nil), execution_id: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/page/frames.rb#10
  def frames; end

  # source://ferrum//lib/ferrum/page/frames.rb#26
  def frames_subscribe; end

  # Returns the value of attribute main_frame.
  #
  # source://ferrum//lib/ferrum/page/frames.rb#8
  def main_frame; end

  private

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/page/frames.rb#136
  def idling?; end

  # source://ferrum//lib/ferrum/page/frames.rb#101
  def subscribe_execution_context_created; end

  # source://ferrum//lib/ferrum/page/frames.rb#121
  def subscribe_execution_context_destroyed; end

  # source://ferrum//lib/ferrum/page/frames.rb#129
  def subscribe_execution_contexts_cleared; end

  # source://ferrum//lib/ferrum/page/frames.rb#43
  def subscribe_frame_attached; end

  # source://ferrum//lib/ferrum/page/frames.rb#58
  def subscribe_frame_navigated; end

  # source://ferrum//lib/ferrum/page/frames.rb#50
  def subscribe_frame_started_loading; end

  # source://ferrum//lib/ferrum/page/frames.rb#67
  def subscribe_frame_stopped_loading; end

  # source://ferrum//lib/ferrum/page/frames.rb#85
  def subscribe_navigated_within_document; end

  # source://ferrum//lib/ferrum/page/frames.rb#91
  def subscribe_request_will_be_sent; end
end

# source://ferrum//lib/ferrum/page.rb#19
Ferrum::Page::GOTO_WAIT = T.let(T.unsafe(nil), Float)

# source://ferrum//lib/ferrum/page/screenshot.rb#7
module Ferrum::Page::Screenshot
  # source://ferrum//lib/ferrum/page/screenshot.rb#59
  def document_size; end

  # source://ferrum//lib/ferrum/page/screenshot.rb#46
  def mhtml(path: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#39
  def pdf(**opts); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#29
  def screenshot(**opts); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#53
  def viewport_size; end

  private

  # source://ferrum//lib/ferrum/page/screenshot.rb#120
  def area_options(full, selector, scale); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#143
  def bounding_rect(selector); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#161
  def capture_screenshot(options, full, background_color); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#74
  def common_options(encoding: T.unsafe(nil), path: T.unsafe(nil), **_); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#110
  def format_options(format, path, quality); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#169
  def maybe_resize_fullscreen(full); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#80
  def pdf_options(**opts); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#68
  def save_file(path, data); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#97
  def screenshot_options(path = T.unsafe(nil), format: T.unsafe(nil), scale: T.unsafe(nil), **options); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#155
  def to_camel_case(option); end

  # source://ferrum//lib/ferrum/page/screenshot.rb#180
  def with_background_color(color); end
end

# source://ferrum//lib/ferrum/page/screenshot.rb#8
Ferrum::Page::Screenshot::DEFAULT_PDF_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://ferrum//lib/ferrum/page/screenshot.rb#15
Ferrum::Page::Screenshot::PAPER_FORMATS = T.let(T.unsafe(nil), Hash)

# source://ferrum//lib/ferrum/page/stream.rb#5
module Ferrum::Page::Stream
  # source://ferrum//lib/ferrum/page/stream.rb#27
  def stream(output:, handle:); end

  # source://ferrum//lib/ferrum/page/stream.rb#8
  def stream_to(path:, encoding:, handle:); end

  # source://ferrum//lib/ferrum/page/stream.rb#16
  def stream_to_file(path:, handle:); end

  # source://ferrum//lib/ferrum/page/stream.rb#21
  def stream_to_memory(encoding:, handle:); end
end

# source://ferrum//lib/ferrum/page/stream.rb#6
Ferrum::Page::Stream::STREAM_CHUNK = T.let(T.unsafe(nil), Integer)

# source://ferrum//lib/ferrum/page/tracing.rb#5
class Ferrum::Page::Tracing
  # @return [Tracing] a new instance of Tracing
  #
  # source://ferrum//lib/ferrum/page/tracing.rb#17
  def initialize(page); end

  # source://ferrum//lib/ferrum/page/tracing.rb#22
  def record(path: T.unsafe(nil), encoding: T.unsafe(nil), timeout: T.unsafe(nil), trace_config: T.unsafe(nil), screenshots: T.unsafe(nil)); end

  private

  # source://ferrum//lib/ferrum/page/tracing.rb#44
  def start(config); end

  # source://ferrum//lib/ferrum/page/tracing.rb#48
  def stop; end

  # source://ferrum//lib/ferrum/page/tracing.rb#66
  def stream_handle(handle); end

  # source://ferrum//lib/ferrum/page/tracing.rb#52
  def subscribe_tracing_complete; end
end

# source://ferrum//lib/ferrum/page/tracing.rb#12
Ferrum::Page::Tracing::DEFAULT_TRACE_CONFIG = T.let(T.unsafe(nil), Hash)

# source://ferrum//lib/ferrum/page/tracing.rb#6
Ferrum::Page::Tracing::EXCLUDED_CATEGORIES = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/page/tracing.rb#8
Ferrum::Page::Tracing::INCLUDED_CATEGORIES = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/page/tracing.rb#7
Ferrum::Page::Tracing::SCREENSHOT_CATEGORIES = T.let(T.unsafe(nil), Array)

# source://ferrum//lib/ferrum/errors.rb#17
class Ferrum::PendingConnectionsError < ::Ferrum::StatusError
  # @return [PendingConnectionsError] a new instance of PendingConnectionsError
  #
  # source://ferrum//lib/ferrum/errors.rb#20
  def initialize(url, pendings = T.unsafe(nil)); end

  # Returns the value of attribute pendings.
  #
  # source://ferrum//lib/ferrum/errors.rb#18
  def pendings; end
end

# source://ferrum//lib/ferrum/errors.rb#44
class Ferrum::ProcessTimeoutError < ::Ferrum::Error
  # @return [ProcessTimeoutError] a new instance of ProcessTimeoutError
  #
  # source://ferrum//lib/ferrum/errors.rb#47
  def initialize(timeout, output); end

  # Returns the value of attribute output.
  #
  # source://ferrum//lib/ferrum/errors.rb#45
  def output; end
end

# source://ferrum//lib/ferrum/proxy.rb#8
class Ferrum::Proxy
  # @return [Proxy] a new instance of Proxy
  #
  # source://ferrum//lib/ferrum/proxy.rb#15
  def initialize(host: T.unsafe(nil), port: T.unsafe(nil), user: T.unsafe(nil), password: T.unsafe(nil)); end

  # Returns the value of attribute host.
  #
  # source://ferrum//lib/ferrum/proxy.rb#13
  def host; end

  # Returns the value of attribute password.
  #
  # source://ferrum//lib/ferrum/proxy.rb#13
  def password; end

  # Returns the value of attribute port.
  #
  # source://ferrum//lib/ferrum/proxy.rb#13
  def port; end

  # source://ferrum//lib/ferrum/proxy.rb#47
  def rotate(host:, port:, user: T.unsafe(nil), password: T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/proxy.rb#24
  def start; end

  # source://ferrum//lib/ferrum/proxy.rb#53
  def stop; end

  # Returns the value of attribute user.
  #
  # source://ferrum//lib/ferrum/proxy.rb#13
  def user; end

  class << self
    # source://ferrum//lib/ferrum/proxy.rb#9
    def start(**args); end
  end
end

# source://ferrum//lib/ferrum/rgba.rb#4
class Ferrum::RGBA
  # @return [RGBA] a new instance of RGBA
  #
  # source://ferrum//lib/ferrum/rgba.rb#5
  def initialize(red, green, blue, alpha); end

  # source://ferrum//lib/ferrum/rgba.rb#14
  def to_h; end

  private

  # Returns the value of attribute alpha.
  #
  # source://ferrum//lib/ferrum/rgba.rb#20
  def alpha; end

  # Sets the attribute alpha
  #
  # @param value the value to set the attribute alpha to.
  #
  # source://ferrum//lib/ferrum/rgba.rb#20
  def alpha=(_arg0); end

  # Returns the value of attribute blue.
  #
  # source://ferrum//lib/ferrum/rgba.rb#20
  def blue; end

  # Sets the attribute blue
  #
  # @param value the value to set the attribute blue to.
  #
  # source://ferrum//lib/ferrum/rgba.rb#20
  def blue=(_arg0); end

  # Returns the value of attribute green.
  #
  # source://ferrum//lib/ferrum/rgba.rb#20
  def green; end

  # Sets the attribute green
  #
  # @param value the value to set the attribute green to.
  #
  # source://ferrum//lib/ferrum/rgba.rb#20
  def green=(_arg0); end

  # Returns the value of attribute red.
  #
  # source://ferrum//lib/ferrum/rgba.rb#20
  def red; end

  # Sets the attribute red
  #
  # @param value the value to set the attribute red to.
  #
  # source://ferrum//lib/ferrum/rgba.rb#20
  def red=(_arg0); end

  # source://ferrum//lib/ferrum/rgba.rb#22
  def validate; end

  # @raise [ArgumentError]
  #
  # source://ferrum//lib/ferrum/rgba.rb#33
  def validate_alpha; end

  # @raise [ArgumentError]
  #
  # source://ferrum//lib/ferrum/rgba.rb#27
  def validate_color(value); end
end

# source://ferrum//lib/ferrum/errors.rb#38
class Ferrum::ScriptTimeoutError < ::Ferrum::Error
  # source://ferrum//lib/ferrum/errors.rb#39
  def message; end
end

# source://ferrum//lib/ferrum/errors.rb#11
class Ferrum::StatusError < ::Ferrum::Error
  # @return [StatusError] a new instance of StatusError
  #
  # source://ferrum//lib/ferrum/errors.rb#12
  def initialize(url, message = T.unsafe(nil)); end
end

# source://ferrum//lib/ferrum/target.rb#4
class Ferrum::Target
  # @return [Target] a new instance of Target
  #
  # source://ferrum//lib/ferrum/target.rb#11
  def initialize(browser, params = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/target.rb#21
  def attached?; end

  # source://ferrum//lib/ferrum/target.rb#52
  def context_id; end

  # source://ferrum//lib/ferrum/target.rb#32
  def id; end

  # source://ferrum//lib/ferrum/target.rb#60
  def maybe_sleep_if_new_window; end

  # source://ferrum//lib/ferrum/target.rb#48
  def opener_id; end

  # source://ferrum//lib/ferrum/target.rb#25
  def page; end

  # You can create page yourself and assign it to target, used in cuprite
  # where we enhance page class and build page ourselves.
  #
  # source://ferrum//lib/ferrum/target.rb#9
  def page=(_arg0); end

  # source://ferrum//lib/ferrum/target.rb#40
  def title; end

  # source://ferrum//lib/ferrum/target.rb#36
  def type; end

  # source://ferrum//lib/ferrum/target.rb#17
  def update(params); end

  # source://ferrum//lib/ferrum/target.rb#44
  def url; end

  # @return [Boolean]
  #
  # source://ferrum//lib/ferrum/target.rb#56
  def window?; end
end

# source://ferrum//lib/ferrum/target.rb#5
Ferrum::Target::NEW_WINDOW_WAIT = T.let(T.unsafe(nil), Float)

# source://ferrum//lib/ferrum/errors.rb#29
class Ferrum::TimeoutError < ::Ferrum::Error
  # source://ferrum//lib/ferrum/errors.rb#30
  def message; end
end

# source://ferrum//lib/ferrum/utils/platform.rb#4
module Ferrum::Utils; end

# source://ferrum//lib/ferrum/utils/attempt.rb#5
module Ferrum::Utils::Attempt
  private

  # source://ferrum//lib/ferrum/utils/attempt.rb#8
  def with_retry(errors:, max:, wait:); end

  class << self
    # source://ferrum//lib/ferrum/utils/attempt.rb#8
    def with_retry(errors:, max:, wait:); end
  end
end

# source://ferrum//lib/ferrum/utils/elapsed_time.rb#7
module Ferrum::Utils::ElapsedTime
  private

  # source://ferrum//lib/ferrum/utils/elapsed_time.rb#14
  def elapsed_time(start = T.unsafe(nil)); end

  # source://ferrum//lib/ferrum/utils/elapsed_time.rb#18
  def monotonic_time; end

  # source://ferrum//lib/ferrum/utils/elapsed_time.rb#10
  def start; end

  # source://ferrum//lib/ferrum/utils/elapsed_time.rb#22
  def timeout?(start, timeout); end

  class << self
    # source://ferrum//lib/ferrum/utils/elapsed_time.rb#14
    def elapsed_time(start = T.unsafe(nil)); end

    # source://ferrum//lib/ferrum/utils/elapsed_time.rb#18
    def monotonic_time; end

    # source://ferrum//lib/ferrum/utils/elapsed_time.rb#10
    def start; end

    # @return [Boolean]
    #
    # source://ferrum//lib/ferrum/utils/elapsed_time.rb#22
    def timeout?(start, timeout); end
  end
end

# source://ferrum//lib/ferrum/utils/platform.rb#5
module Ferrum::Utils::Platform
  private

  # source://ferrum//lib/ferrum/utils/platform.rb#19
  def mac?; end

  # source://ferrum//lib/ferrum/utils/platform.rb#23
  def mri?; end

  # source://ferrum//lib/ferrum/utils/platform.rb#8
  def name; end

  # source://ferrum//lib/ferrum/utils/platform.rb#15
  def windows?; end

  class << self
    # @return [Boolean]
    #
    # source://ferrum//lib/ferrum/utils/platform.rb#19
    def mac?; end

    # @return [Boolean]
    #
    # source://ferrum//lib/ferrum/utils/platform.rb#23
    def mri?; end

    # source://ferrum//lib/ferrum/utils/platform.rb#8
    def name; end

    # @return [Boolean]
    #
    # source://ferrum//lib/ferrum/utils/platform.rb#15
    def windows?; end
  end
end
