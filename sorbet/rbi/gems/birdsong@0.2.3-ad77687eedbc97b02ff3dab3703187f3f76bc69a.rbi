# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `birdsong` gem.
# Please instead update this file by running `bin/tapioca gem birdsong`.


# source://birdsong//lib/birdsong/version.rb#3
module Birdsong
  extend ::Configuration

  class << self
    # source://birdsong//lib/birdsong.rb#82
    def create_temp_storage_location; end

    # Get media from a URL and save to a temp folder set in the configuration under
    # temp_storage_location
    #
    # source://birdsong//lib/birdsong.rb#56
    def retrieve_media(url); end

    # source://zorki/0.1.6-e2e452206a2fdcf5d4c11b383606be4c76d3cbfa/lib/helpers/configuration.rb#16
    def save_media; end

    # source://zorki/0.1.6-e2e452206a2fdcf5d4c11b383606be4c76d3cbfa/lib/helpers/configuration.rb#12
    def save_media=(value); end

    # source://zorki/0.1.6-e2e452206a2fdcf5d4c11b383606be4c76d3cbfa/lib/helpers/configuration.rb#16
    def temp_storage_location; end

    # source://zorki/0.1.6-e2e452206a2fdcf5d4c11b383606be4c76d3cbfa/lib/helpers/configuration.rb#12
    def temp_storage_location=(value); end

    # The general fields to always return for Tweets
    #
    # source://birdsong//lib/birdsong.rb#50
    def tweet_fields; end

    # source://zorki/0.1.6-e2e452206a2fdcf5d4c11b383606be4c76d3cbfa/lib/helpers/configuration.rb#16
    def twitter_bearer_token; end

    # source://zorki/0.1.6-e2e452206a2fdcf5d4c11b383606be4c76d3cbfa/lib/helpers/configuration.rb#12
    def twitter_bearer_token=(value); end

    # The general fields to always return for Users
    #
    # source://birdsong//lib/birdsong.rb#45
    def user_fields; end
  end
end

# source://birdsong//lib/birdsong.rb#22
class Birdsong::AuthorizationError < ::Birdsong::Error; end

# source://birdsong//lib/birdsong.rb#21
class Birdsong::Error < ::StandardError; end

# source://birdsong//lib/birdsong.rb#23
class Birdsong::InvalidIdError < ::Birdsong::Error; end

# source://birdsong//lib/birdsong.rb#24
class Birdsong::InvalidMediaTypeError < ::Birdsong::Error; end

# source://birdsong//lib/birdsong.rb#25
class Birdsong::NoTweetFoundError < ::Birdsong::Error; end

# source://birdsong//lib/birdsong.rb#26
class Birdsong::RateLimitExceeded < ::Birdsong::Error
  # @return [RateLimitExceeded] a new instance of RateLimitExceeded
  #
  # source://birdsong//lib/birdsong.rb#31
  def initialize(rate_limit, rate_remaining, reset_time); end

  # Returns the value of attribute rate_limit.
  #
  # source://birdsong//lib/birdsong.rb#27
  def rate_limit; end

  # Returns the value of attribute rate_remaining.
  #
  # source://birdsong//lib/birdsong.rb#28
  def rate_remaining; end

  # Returns the value of attribute reset_time_left.
  #
  # source://birdsong//lib/birdsong.rb#29
  def reset_time_left; end
end

# source://birdsong//lib/birdsong/scrapers/scraper.rb#36
class Birdsong::Scraper
  include ::Capybara::DSL

  # @return [Scraper] a new instance of Scraper
  #
  # source://birdsong//lib/birdsong/scrapers/scraper.rb#44
  def initialize; end

  # Instagram uses GraphQL (like most of Facebook I think), and returns an object that actually
  # is used to seed the page. We can just parse this for most things.
  #
  # additional_search_params is a comma seperated keys
  # example: `data,xdt_api__v1__media__shortcode__web_info,items`
  #
  # @raise [Birdsong::NoTweetFoundError]
  #
  # source://birdsong//lib/birdsong/scrapers/scraper.rb#55
  def get_content_of_subpage_from_url(url, subpage_search, additional_search_parameters = T.unsafe(nil)); end

  private

  # source://birdsong//lib/birdsong/scrapers/scraper.rb#187
  def fetch_image(url); end

  # source://birdsong//lib/birdsong/scrapers/scraper.rb#143
  def login; end

  # Convert a string to an integer
  #
  # source://birdsong//lib/birdsong/scrapers/scraper.rb#201
  def number_string_to_integer(number_string); end

  # Set the session to use a new user folder in the options!
  # #####################
  #
  # source://birdsong//lib/birdsong/scrapers/scraper.rb#120
  def reset_selenium; end
end

# source://birdsong//lib/birdsong/tweet.rb#4
class Birdsong::Tweet
  # @return [Tweet] a new instance of Tweet
  #
  # source://birdsong//lib/birdsong/tweet.rb#36
  def initialize(tweet_object); end

  # Returns the value of attribute author.
  #
  # source://birdsong//lib/birdsong/tweet.rb#26
  def author; end

  # Returns the value of attribute author_id.
  #
  # source://birdsong//lib/birdsong/tweet.rb#25
  def author_id; end

  # Returns the value of attribute created_at.
  #
  # source://birdsong//lib/birdsong/tweet.rb#22
  def created_at; end

  # Returns the value of attribute id.
  #
  # source://birdsong//lib/birdsong/tweet.rb#21
  def id; end

  # Returns the value of attribute image_file_names.
  #
  # source://birdsong//lib/birdsong/tweet.rb#27
  def image_file_names; end

  # Attributes for after the response is parsed from Twitter
  #
  # source://birdsong//lib/birdsong/tweet.rb#20
  def json; end

  # Returns the value of attribute language.
  #
  # source://birdsong//lib/birdsong/tweet.rb#24
  def language; end

  # Returns the value of attribute text.
  #
  # source://birdsong//lib/birdsong/tweet.rb#23
  def text; end

  # Returns the value of attribute author.
  # Every other gem uses `user` so we can just alias it
  #
  # source://birdsong//lib/birdsong/tweet.rb#26
  def user; end

  # Returns the value of attribute video_file_names.
  #
  # source://birdsong//lib/birdsong/tweet.rb#28
  def video_file_names; end

  # Returns the value of attribute video_file_type.
  #
  # source://birdsong//lib/birdsong/tweet.rb#29
  def video_file_type; end

  # Returns the value of attribute video_preview_image.
  #
  # source://birdsong//lib/birdsong/tweet.rb#30
  def video_preview_image; end

  class << self
    # source://birdsong//lib/birdsong/tweet.rb#5
    def lookup(ids = T.unsafe(nil)); end
  end
end

# source://birdsong//lib/birdsong/scrapers/tweet_scraper.rb#7
class Birdsong::TweetScraper < ::Birdsong::Scraper
  # source://birdsong//lib/birdsong/scrapers/tweet_scraper.rb#8
  def parse(id); end

  # source://birdsong//lib/birdsong/scrapers/tweet_scraper.rb#105
  def take_screenshot; end
end

# source://birdsong//lib/birdsong/user.rb#4
class Birdsong::User
  # @return [User] a new instance of User
  #
  # source://birdsong//lib/birdsong/user.rb#25
  def initialize(user_object); end

  # Returns the value of attribute created_at.
  #
  # source://birdsong//lib/birdsong/user.rb#20
  def created_at; end

  # Returns the value of attribute description.
  #
  # source://birdsong//lib/birdsong/user.rb#13
  def description; end

  # Returns the value of attribute followers_count.
  #
  # source://birdsong//lib/birdsong/user.rb#15
  def followers_count; end

  # Returns the value of attribute following_count.
  #
  # source://birdsong//lib/birdsong/user.rb#16
  def following_count; end

  # Returns the value of attribute id.
  #
  # source://birdsong//lib/birdsong/user.rb#7
  def id; end

  # Attributes for after the response is parsed from Twitter
  #
  # source://birdsong//lib/birdsong/user.rb#6
  def json; end

  # Returns the value of attribute listed_count.
  #
  # source://birdsong//lib/birdsong/user.rb#18
  def listed_count; end

  # Returns the value of attribute location.
  #
  # source://birdsong//lib/birdsong/user.rb#11
  def location; end

  # Returns the value of attribute name.
  #
  # source://birdsong//lib/birdsong/user.rb#8
  def name; end

  # Returns the value of attribute profile_image_file_name.
  #
  # source://birdsong//lib/birdsong/user.rb#21
  def profile_image_file_name; end

  # Returns the value of attribute profile_image_url.
  #
  # source://birdsong//lib/birdsong/user.rb#12
  def profile_image_url; end

  # Returns the value of attribute sign_up_date.
  #
  # source://birdsong//lib/birdsong/user.rb#10
  def sign_up_date; end

  # Returns the value of attribute tweet_count.
  #
  # source://birdsong//lib/birdsong/user.rb#17
  def tweet_count; end

  # Returns the value of attribute url.
  #
  # source://birdsong//lib/birdsong/user.rb#14
  def url; end

  # Returns the value of attribute username.
  #
  # source://birdsong//lib/birdsong/user.rb#9
  def username; end

  # Returns the value of attribute verified.
  #
  # source://birdsong//lib/birdsong/user.rb#19
  def verified; end

  private

  # source://birdsong//lib/birdsong/user.rb#30
  def parse(user_object); end
end

# source://birdsong//lib/birdsong/version.rb#4
Birdsong::VERSION = T.let(T.unsafe(nil), String)

class Selenium::WebDriver::DevTools
  include ::SeleniumMonkeypatch::InstanceMethods
end

# Design taken from https://blog.appsignal.com/2021/08/24/responsible-monkeypatching-in-ruby.html
#
# source://birdsong//lib/birdsong/monkeypatch.rb#6
module SeleniumMonkeypatch
  class << self
    # source://birdsong//lib/birdsong/monkeypatch.rb#11
    def apply_patch; end

    private

    # source://birdsong//lib/birdsong/monkeypatch.rb#25
    def find_class; end

    # source://birdsong//lib/birdsong/monkeypatch.rb#30
    def find_method(class_); end
  end
end

# source://birdsong//lib/birdsong/monkeypatch.rb#37
module SeleniumMonkeypatch::InstanceMethods
  # We're monkeypatching the following method so that Selenium doesn't raise errors when we fail to call `continue` on requests
  #
  # source://birdsong//lib/birdsong/monkeypatch.rb#39
  def send_cmd(method, **params); end
end
