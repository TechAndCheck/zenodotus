# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `xdg` gem.
# Please instead update this file by running `bin/tapioca gem xdg`.


# XDG Base Directory Standard
#
# This provides a conveient library for conforming to the
# XDG Base Directory Standard.
#
#   http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
#
# Some important clarifications, not made clear by the above specification.
#
# The data directories are for "read-only" files. In other words once
# something is put there, it should only be read, and never written to
# by a program. (Generally speaking only users or package managers should
# be adding, changing or removing files from the data locations.)
#
# The config locations are where you store files that may change,
# and effect your applications depending on their content. This is like
# etc/ in the FHS, but alterable by end users and end user programs,
# not just root and sudo admin scripts.
#
# The cache locations stores files that could just as well be deleted
# and everything would still work fine. This is for variable and
# temporary files. Much like var/ and tmp/ in FHS.
#
# The module returns all paths as String.
#
# source://xdg//lib/xdg.rb#26
module XDG
  class << self
    # source://xdg//lib/xdg.rb#40
    def [](*env_path); end
  end
end

# Base Directory Standard
#
# source://xdg//lib/xdg/base_dir.rb#4
class XDG::BaseDir
  include ::Enumerable

  # Initialize new instance of BaseDir class.
  #
  # @return [BaseDir] a new instance of BaseDir
  #
  # source://xdg//lib/xdg/base_dir.rb#31
  def initialize(*env); end

  # Iterate of each directory.
  #
  # source://xdg//lib/xdg/base_dir.rb#92
  def each(&block); end

  # This is same as #environment, but also includes default values.
  # Shortcut for #environment_with_defaults.
  #
  # @return [String] envinronment value.
  #
  # source://xdg//lib/xdg/base_dir.rb#62
  def env; end

  # The environment setting, or it's equivalent when the BaseDir
  # is a combination of environment variables.
  #
  # @return [String] evnironment vsetting
  #
  # source://xdg//lib/xdg/base_dir.rb#55
  def environment; end

  # The environment variables being referenced.
  #
  # @return [Array] list of XDG environment variable names
  #
  # source://xdg//lib/xdg/base_dir.rb#47
  def environment_variables; end

  # This is same as #environment, but also includes default values.
  #
  # @return [String] envinronment value.
  #
  # source://xdg//lib/xdg/base_dir.rb#62
  def environment_with_defaults; end

  # Find a file or directory. This works just like #select
  # except that it returns the first match found.
  #
  # TODO: It would be more efficient to traverse the dirs and use #fnmatch.
  #
  # source://xdg//lib/xdg/base_dir.rb#204
  def find(*glob_and_flags, &block); end

  # Return array of matching files or directories
  # in any of the resource locations, starting with
  # the home directory and searching outward into
  # system directories.
  #
  # Unlike #select, this doesn't take a block and each
  # additional glob argument is treated as a logical-or.
  #
  #   XDG[:DATA].glob("stick/*.rb", "stick/*.yaml")
  #
  # source://xdg//lib/xdg/base_dir.rb#163
  def glob(*glob_and_flags); end

  # Returns an *unexpanded* list of directories.
  #
  # @return [Array<String>] unexpanded directory list
  #
  # source://xdg//lib/xdg/base_dir.rb#99
  def list; end

  # List of directories as Pathanme objects.
  #
  # @return [Array<Pathname>] list of directories as Pathname objects
  #
  # source://xdg//lib/xdg/base_dir.rb#117
  def paths; end

  # Return array of matching files or directories
  # in any of the resource locations, starting with
  # the home directory and searching outward into
  # system directories.
  #
  # String parameters are joined into a pathname
  # while Integers and Symbols treated as flags.
  #
  # For example, the following are equivalent:
  #
  #   XDG::BaseDir[:DATA,:HOME].select('stick/units', File::FNM_CASEFOLD)
  #
  #   XDG::BaseDir[:DATA,:HOME].select('stick', 'units', :casefold)
  #
  # source://xdg//lib/xdg/base_dir.rb#188
  def select(*glob_and_flags, &block); end

  # Number of directory paths.
  #
  # source://xdg//lib/xdg/base_dir.rb#87
  def size; end

  # The common subdirectory.
  #
  # source://xdg//lib/xdg/base_dir.rb#138
  def subdirectory; end

  # Set subdirectory to be applied to all paths.
  #
  # source://xdg//lib/xdg/base_dir.rb#141
  def subdirectory=(path); end

  # Returns a complete list of expanded directories.
  #
  # @return [Array<String>] expanded directory list
  #
  # source://xdg//lib/xdg/base_dir.rb#72
  def to_a; end

  # Returns a complete list of expanded directories.
  # BaseDir is essentially an array.
  #
  # @return [Array<String>] expanded directory list
  #
  # source://xdg//lib/xdg/base_dir.rb#72
  def to_ary; end

  # The first directory converted to a Pathname object.
  #
  # @return [Pathname] pathname of first directory
  #
  # source://xdg//lib/xdg/base_dir.rb#133
  def to_path; end

  # Returns the first directory expanded. Since a environment settings
  # like `*_HOME` will only have one directory entry, this definition
  # of #to_s makes utilizing those more convenient.
  #
  # @return [String] directory
  #
  # source://xdg//lib/xdg/base_dir.rb#126
  def to_s; end

  # Set subdirectory to be applied to all paths and return `self`.
  #
  # @return [BaseDir] self
  #
  # source://xdg//lib/xdg/base_dir.rb#148
  def with_subdirectory(path); end

  private

  # source://xdg//lib/xdg/base_dir.rb#233
  def expand(path); end

  # source://xdg//lib/xdg/base_dir.rb#219
  def parse_arguments(*glob_and_flags); end

  class << self
    # Shortcut for `BaseDir.new`.
    #
    # source://xdg//lib/xdg/base_dir.rb#26
    def [](*env); end

    # If Pathname is referenced the library is automatically loaded.
    #
    # source://xdg//lib/xdg/base_dir.rb#242
    def const_missing(const); end
  end
end

# Standard defaults for locations.
#
# source://xdg//lib/xdg/base_dir.rb#13
XDG::BaseDir::DEFAULTS = T.let(T.unsafe(nil), Hash)

# The BaseDir::Mixin module can be used to add XDG base directory
# methods to your own classes.
#
#     class MyAppConfig
#       include XDG::BaseDir::Mixin
#
#       def subdirectory
#         'myapp'
#       end
#     end
#
#     c = MyAppConfig.new
#
#     c.config.home.list  #=> ['~/.config/myapp']
#
# source://xdg//lib/xdg/base_dir/mixin.rb#19
module XDG::BaseDir::Mixin
  extend ::XDG::BaseDir::Mixin

  # source://xdg//lib/xdg/base_dir/mixin.rb#66
  def cache; end

  # source://xdg//lib/xdg/base_dir/mixin.rb#49
  def config; end

  # source://xdg//lib/xdg/base_dir/mixin.rb#35
  def data; end

  # source://xdg//lib/xdg/base_dir/mixin.rb#30
  def home; end

  # Override this method to change the subdirectory of the mixin.
  #
  # source://xdg//lib/xdg/base_dir/mixin.rb#25
  def subdirectory; end
end

# source://xdg//lib/xdg/version.rb#2
XDG::VERSION = T.let(T.unsafe(nil), String)
