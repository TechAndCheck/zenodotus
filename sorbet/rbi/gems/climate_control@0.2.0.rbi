# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `climate_control` gem.
# Please instead update this file by running `bin/tapioca gem climate_control`.


# source://climate_control//lib/climate_control/environment.rb#4
module ClimateControl
  class << self
    # source://climate_control//lib/climate_control.rb#13
    def env; end

    # source://climate_control//lib/climate_control.rb#9
    def modify(environment_overrides, &block); end
  end
end

# source://climate_control//lib/climate_control/environment.rb#5
class ClimateControl::Environment
  extend ::Forwardable

  # @return [Environment] a new instance of Environment
  #
  # source://climate_control//lib/climate_control/environment.rb#8
  def initialize; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def [](*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def []=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def delete(*args, **_arg1, &block); end

  # source://climate_control//lib/climate_control/environment.rb#15
  def synchronize; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def to_hash(*args, **_arg1, &block); end

  private

  # source://climate_control//lib/climate_control/environment.rb#32
  def env; end
end

# source://climate_control//lib/climate_control/modifier.rb#2
class ClimateControl::Modifier
  # @return [Modifier] a new instance of Modifier
  #
  # source://climate_control//lib/climate_control/modifier.rb#3
  def initialize(env, environment_overrides = T.unsafe(nil), &block); end

  # source://climate_control//lib/climate_control/modifier.rb#9
  def process; end

  private

  # source://climate_control//lib/climate_control/modifier.rb#53
  def cache_environment_after_block; end

  # source://climate_control//lib/climate_control/modifier.rb#67
  def clone_environment; end

  # source://climate_control//lib/climate_control/modifier.rb#34
  def copy_overrides_to_environment; end

  # source://climate_control//lib/climate_control/modifier.rb#57
  def delete_keys_that_do_not_belong; end

  # source://climate_control//lib/climate_control/modifier.rb#49
  def keys_changed_by_block; end

  # source://climate_control//lib/climate_control/modifier.rb#45
  def keys_to_remove; end

  # source://climate_control//lib/climate_control/modifier.rb#24
  def prepare_environment_for_block; end

  # source://climate_control//lib/climate_control/modifier.rb#61
  def revert_changed_keys; end

  # source://climate_control//lib/climate_control/modifier.rb#30
  def run_block; end

  # source://climate_control//lib/climate_control/modifier.rb#71
  def stringify_keys(env); end
end

# source://climate_control//lib/climate_control/modifier.rb#77
class ClimateControl::Modifier::OverlappingKeysWithChangedValues
  # @return [OverlappingKeysWithChangedValues] a new instance of OverlappingKeysWithChangedValues
  #
  # source://climate_control//lib/climate_control/modifier.rb#78
  def initialize(hash_1, hash_2); end

  # source://climate_control//lib/climate_control/modifier.rb#83
  def keys; end

  private

  # source://climate_control//lib/climate_control/modifier.rb#91
  def overlapping_keys; end
end

# source://climate_control//lib/climate_control/errors.rb#2
class ClimateControl::UnassignableValueError < ::ArgumentError; end

# source://climate_control//lib/climate_control/version.rb#2
ClimateControl::VERSION = T.let(T.unsafe(nil), String)
