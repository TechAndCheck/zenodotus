# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `forki` gem.
# Please instead update this file by running `bin/tapioca gem forki`.


# source://forki//lib/forki/version.rb#3
module Forki
  extend ::Configuration

  class << self
    # source://forki//lib/forki.rb#86
    def create_temp_storage_location; end

    # Extract the file extension from a media URL
    # E.g. ".png" from https://scontent-atl3-2.xx.fbcdn.net/v/t39.30808-1.png?stp=dst-png_p148x148
    #
    # source://forki//lib/forki.rb#55
    def extract_file_extension_from_url(url); end

    # Get an image from a URL and save to a temp folder set in the configuration under
    # temp_storage_location
    #
    # source://forki//lib/forki.rb#66
    def retrieve_media(url); end

    # source://forki//lib/forki.rb#92
    def set_logger_level; end

    # source://zorki/0.1.6-e2e452206a2fdcf5d4c11b383606be4c76d3cbfa/lib/helpers/configuration.rb#16
    def temp_storage_location; end

    # source://zorki/0.1.6-e2e452206a2fdcf5d4c11b383606be4c76d3cbfa/lib/helpers/configuration.rb#12
    def temp_storage_location=(value); end
  end
end

# source://forki//lib/forki.rb#39
class Forki::BlockedCredentialsError < ::StandardError
  # source://forki//lib/forki.rb#40
  def initalize(msg = T.unsafe(nil)); end
end

# source://forki//lib/forki.rb#27
class Forki::ContentUnavailableError < ::StandardError
  # @return [ContentUnavailableError] a new instance of ContentUnavailableError
  #
  # source://forki//lib/forki.rb#28
  def initialize(msg = T.unsafe(nil)); end
end

# source://forki//lib/forki.rb#18
class Forki::Error < ::StandardError; end

# source://forki//lib/forki.rb#21
class Forki::InvalidUrlError < ::StandardError
  # @return [InvalidUrlError] a new instance of InvalidUrlError
  #
  # source://forki//lib/forki.rb#22
  def initialize(msg = T.unsafe(nil)); end
end

# source://forki//lib/forki.rb#33
class Forki::MissingCredentialsError < ::StandardError
  # source://forki//lib/forki.rb#34
  def initalize(msg = T.unsafe(nil)); end
end

# source://forki//lib/forki/post.rb#4
class Forki::Post
  # @return [Post] a new instance of Post
  #
  # source://forki//lib/forki/post.rb#29
  def initialize(post_hash = T.unsafe(nil)); end

  # Returns the value of attribute created_at.
  #
  # source://forki//lib/forki/post.rb#10
  def created_at; end

  # Returns the value of attribute has_video.
  #
  # source://forki//lib/forki/post.rb#10
  def has_video; end

  # Returns the value of attribute id.
  #
  # source://forki//lib/forki/post.rb#10
  def id; end

  # Returns the value of attribute image_file.
  #
  # source://forki//lib/forki/post.rb#10
  def image_file; end

  # Returns the value of attribute image_url.
  #
  # source://forki//lib/forki/post.rb#10
  def image_url; end

  # Returns the value of attribute num_comments.
  #
  # source://forki//lib/forki/post.rb#10
  def num_comments; end

  # Returns the value of attribute num_shares.
  #
  # source://forki//lib/forki/post.rb#10
  def num_shares; end

  # Returns the value of attribute num_views.
  #
  # source://forki//lib/forki/post.rb#10
  def num_views; end

  # Returns the value of attribute reactions.
  #
  # source://forki//lib/forki/post.rb#10
  def reactions; end

  # Returns the value of attribute screenshot_file.
  #
  # source://forki//lib/forki/post.rb#10
  def screenshot_file; end

  # Returns the value of attribute text.
  #
  # source://forki//lib/forki/post.rb#10
  def text; end

  # Returns the value of attribute url.
  #
  # source://forki//lib/forki/post.rb#10
  def url; end

  # Returns the value of attribute user.
  #
  # source://forki//lib/forki/post.rb#10
  def user; end

  # Returns the value of attribute video_file.
  #
  # source://forki//lib/forki/post.rb#10
  def video_file; end

  # Returns the value of attribute video_preview_image_file.
  #
  # source://forki//lib/forki/post.rb#10
  def video_preview_image_file; end

  # Returns the value of attribute video_preview_image_url.
  #
  # source://forki//lib/forki/post.rb#10
  def video_preview_image_url; end

  class << self
    # source://forki//lib/forki/post.rb#5
    def lookup(urls = T.unsafe(nil)); end

    private

    # source://forki//lib/forki/post.rb#53
    def scrape(urls); end
  end
end

# source://forki//lib/forki/scrapers/post_scraper.rb#10
class Forki::PostScraper < ::Forki::Scraper
  # source://forki//lib/forki/scrapers/post_scraper.rb#64
  def check_if_post_is_image(graphql_objects); end

  # source://forki//lib/forki/scrapers/post_scraper.rb#79
  def check_if_post_is_in_comment_stream(graphql_objects); end

  # source://forki//lib/forki/scrapers/post_scraper.rb#52
  def check_if_post_is_reel(graphql_object); end

  # source://forki//lib/forki/scrapers/post_scraper.rb#48
  def check_if_post_is_video(graphql_objects); end

  # Extracts data from an image post by parsing GraphQL strings as seen in the video post scraper above
  #
  # source://forki//lib/forki/scrapers/post_scraper.rb#244
  def extract_image_post_data(graphql_object_array); end

  # Extract data from live video post on the watch page
  #
  # source://forki//lib/forki/scrapers/post_scraper.rb#329
  def extract_live_video_post_data_from_watch_page(graphql_strings); end

  # @raise [ContentUnavailableError]
  #
  # source://forki//lib/forki/scrapers/post_scraper.rb#21
  def extract_post_data(graphql_strings); end

  # Returns a hash containing counts of each reaction to a post
  # Takes the edges list and creates a dictionary for each element that looks like: {:num_likes: 1234}
  # Then merges the dictionaries with the inject call
  #
  # source://forki//lib/forki/scrapers/post_scraper.rb#359
  def extract_reaction_counts(reactions_object); end

  # source://forki//lib/forki/scrapers/post_scraper.rb#115
  def extract_video_comment_post_data(graphql_objects); end

  # Unfortunately, there's a taxonomy of video post types, all of which require different parsing methods
  # Specifically, there are normal video posts, video posts from the watch page, and live video posts from the watch page
  # The general strategy for extracting information from each type, though, is to find which of the 30-odd GraphQL strings are relevant
  # After finding those GraphQL strings, we parse them into hashes and extract the information we need
  #
  # source://forki//lib/forki/scrapers/post_scraper.rb#152
  def extract_video_post_data(graphql_strings); end

  # source://forki//lib/forki/scrapers/post_scraper.rb#216
  def extract_video_post_data_alternative(graphql_object_array); end

  # Extract data from a non-live video post on the watch page
  #
  # source://forki//lib/forki/scrapers/post_scraper.rb#299
  def extract_video_post_data_from_watch_page(graphql_strings); end

  # Searches the DOM to finds the number of times a (video) post has been viewed.
  # Returns nil if it can't find a DOM element with the view count
  #
  # source://forki//lib/forki/scrapers/post_scraper.rb#14
  def find_number_of_views; end

  # source://forki//lib/forki/scrapers/post_scraper.rb#44
  def get_graphql_objects(graphql_strings); end

  # @return [Boolean]
  #
  # source://forki//lib/forki/scrapers/post_scraper.rb#96
  def is_post_available?; end

  # Uses GraphQL data and DOM elements to collect information about the current post
  #
  # source://forki//lib/forki/scrapers/post_scraper.rb#379
  def parse(url); end

  # source://forki//lib/forki/scrapers/post_scraper.rb#367
  def take_screenshot; end
end

# source://forki//lib/forki.rb#19
class Forki::RetryableError < ::Forki::Error; end

# source://forki//lib/forki/scrapers/scraper.rb#35
class Forki::Scraper
  include ::Capybara::DSL

  # @return [Scraper] a new instance of Scraper
  #
  # source://forki//lib/forki/scrapers/scraper.rb#38
  def initialize; end

  # Yeah, just use the tmp/ directory that's created during setup
  #
  # source://forki//lib/forki/scrapers/scraper.rb#45
  def download_image(img_elem); end

  # source://forki//lib/forki/scrapers/scraper.rb#64
  def find_graphql_data_closure_index(html_str, start_index); end

  # Returns all GraphQL data objects embedded within a string
  # Finds substrings that look like '"data": {...}' and converts them to hashes
  #
  # source://forki//lib/forki/scrapers/scraper.rb#52
  def find_graphql_data_strings(objs = T.unsafe(nil), html_str); end

  private

  # Logs in to Facebook (if not already logged in)
  #
  # @raise [MissingCredentialsError]
  #
  # source://forki//lib/forki/scrapers/scraper.rb#111
  def login(url = T.unsafe(nil)); end

  # Set the session to use a new user folder in the options!
  # #####################
  #
  # source://forki//lib/forki/scrapers/scraper.rb#88
  def reset_selenium; end

  # Ensures that a valid Facebook url has been provided, and that it points to an available post
  # If either of those two conditions are false, raises an exception
  #
  # @raise [Forki::InvalidUrlError]
  #
  # source://forki//lib/forki/scrapers/scraper.rb#179
  def validate_and_load_page(url); end

  class << self
    # Extracts an integer out of a string describing a number
    # e.g. "4K Comments" returns 4000
    # e.g. "131 Shares" returns 131
    #
    # source://forki//lib/forki/scrapers/scraper.rb#212
    def extract_int_from_num_element(element); end
  end
end

# source://forki//lib/forki.rb#45
class Forki::UnhandledContentError < ::StandardError
  # @return [UnhandledContentError] a new instance of UnhandledContentError
  #
  # source://forki//lib/forki.rb#46
  def initialize(msg = T.unsafe(nil)); end
end

# source://forki//lib/forki/user.rb#4
class Forki::User
  # @return [User] a new instance of User
  #
  # source://forki//lib/forki/user.rb#22
  def initialize(user_hash = T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://forki//lib/forki/user.rb#10
  def id; end

  # Returns the value of attribute name.
  #
  # source://forki//lib/forki/user.rb#10
  def name; end

  # Returns the value of attribute number_of_followers.
  #
  # source://forki//lib/forki/user.rb#10
  def number_of_followers; end

  # Returns the value of attribute number_of_likes.
  #
  # source://forki//lib/forki/user.rb#10
  def number_of_likes; end

  # Returns the value of attribute profile.
  #
  # source://forki//lib/forki/user.rb#10
  def profile; end

  # Returns the value of attribute profile_image_file.
  #
  # source://forki//lib/forki/user.rb#10
  def profile_image_file; end

  # Returns the value of attribute profile_image_url.
  #
  # source://forki//lib/forki/user.rb#10
  def profile_image_url; end

  # Returns the value of attribute profile_link.
  #
  # source://forki//lib/forki/user.rb#10
  def profile_link; end

  # Returns the value of attribute verified.
  #
  # source://forki//lib/forki/user.rb#10
  def verified; end

  class << self
    # source://forki//lib/forki/user.rb#5
    def lookup(urls = T.unsafe(nil)); end

    private

    # source://forki//lib/forki/user.rb#37
    def scrape(urls); end
  end
end

# source://forki//lib/forki/scrapers/user_scraper.rb#4
class Forki::UserScraper < ::Forki::Scraper
  # Returns a hash of details about a Facebook page
  #
  # source://forki//lib/forki/scrapers/user_scraper.rb#83
  def extract_page_details(graphql_strings); end

  # Returns a hash of details about a Facebook user profile
  #
  # source://forki//lib/forki/scrapers/user_scraper.rb#43
  def extract_profile_details(graphql_strings); end

  # source://forki//lib/forki/scrapers/user_scraper.rb#35
  def find_number_followers_for_normal_profile(profile_followers_node); end

  # Finds and returns the number of people who follow the current page
  #
  # source://forki//lib/forki/scrapers/user_scraper.rb#17
  def find_number_of_followers(profile_details_string); end

  # Finds and returns the number of people who like the current page
  #
  # source://forki//lib/forki/scrapers/user_scraper.rb#6
  def find_number_of_likes(profile_details_string); end

  # Uses GraphQL data and DOM elements to collect information about the current user page
  #
  # source://forki//lib/forki/scrapers/user_scraper.rb#102
  def parse(url); end
end

# source://forki//lib/forki/version.rb#4
Forki::VERSION = T.let(T.unsafe(nil), String)

# source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve.rb#1
class VideoSieve
  class << self
    # @return [Boolean]
    #
    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve.rb#2
    def can_process_with_sieve?(graphql_objects); end

    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve.rb#16
    def sieve_class_for_graphql_objects(graphql_objects); end

    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve.rb#6
    def sieve_for_graphql_objects(graphql_objects); end
  end
end

# source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_reel.rb#1
class VideoSieveReel < ::VideoSieve
  class << self
    # To check if it's valid for the inputted graphql objects
    #
    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_reel.rb#3
    def check(graphql_objects); end

    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_reel.rb#70
    def extractor(graphql_objects); end

    # output the expected format of:
    #
    # post_details = {
    #   id: video_object["id"],
    #   num_comments: num_comments,
    #   num_shares: share_count_object.fetch("count", nil),
    #   num_views: feedback_object["comet_ufi_summary_and_actions_renderer"]["feedback"]["video_view_count"],
    #   reshare_warning: feedback_object["comet_ufi_summary_and_actions_renderer"]["feedback"]["should_show_reshare_warning"],
    #   video_preview_image_url: video_object["preferred_thumbnail"]["image"]["uri"],
    #   video_url: video_object["browser_native_hd_url"] || video_object["browser_native_sd_url"],
    #   text: text,
    #   created_at: creation_date,
    #   profile_link: story_node_object["comet_sections"]["context_layout"]["story"]["comet_sections"]["actor_photo"]["story"]["actors"][0]["url"],
    #   has_video: true
    # }
    # post_details[:video_preview_image_file] = Forki.retrieve_media(post_details[:video_preview_image_url])
    # post_details[:video_file] = Forki.retrieve_media(post_details[:video_url])
    # post_details[:reactions] = reaction_counts
    #
    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_reel.rb#31
    def sieve(graphql_objects); end
  end
end

# source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_video_page.rb#1
class VideoSieveVideoPage < ::VideoSieve
  class << self
    # To check if it's valid for the inputted graphql objects
    #
    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_video_page.rb#3
    def check(graphql_objects); end

    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_video_page.rb#62
    def extractor(graphql_objects); end

    # output the expected format of:
    #
    # post_details = {
    #   id: video_object["id"],
    #   num_comments: num_comments,
    #   num_shares: share_count_object.fetch("count", nil),
    #   num_views: feedback_object["comet_ufi_summary_and_actions_renderer"]["feedback"]["video_view_count"],
    #   reshare_warning: feedback_object["comet_ufi_summary_and_actions_renderer"]["feedback"]["should_show_reshare_warning"],
    #   video_preview_image_url: video_object["preferred_thumbnail"]["image"]["uri"],
    #   video_url: video_object["browser_native_hd_url"] || video_object["browser_native_sd_url"],
    #   text: text,
    #   created_at: creation_date,
    #   profile_link: story_node_object["comet_sections"]["context_layout"]["story"]["comet_sections"]["actor_photo"]["story"]["actors"][0]["url"],
    #   has_video: true
    # }
    # post_details[:video_preview_image_file] = Forki.retrieve_media(post_details[:video_preview_image_url])
    # post_details[:video_file] = Forki.retrieve_media(post_details[:video_url])
    # post_details[:reactions] = reaction_counts
    #
    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_video_page.rb#31
    def sieve(graphql_objects); end
  end
end

# This is for the "watch" tab style videos https://www.facebook.com/watch/live/?v=394367115960503
#
# source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_watch_tab.rb#3
class VideoSieveWatchTab < ::VideoSieve
  class << self
    # To check if it's valid for the inputted graphql objects
    #
    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_watch_tab.rb#5
    def check(graphql_objects); end

    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_watch_tab.rb#80
    def extractor(graphql_objects); end

    # output the expected format of:
    #
    # post_details = {
    #   id: video_object["id"],
    #   num_comments: num_comments,
    #   num_shares: share_count_object.fetch("count", nil),
    #   num_views: feedback_object["comet_ufi_summary_and_actions_renderer"]["feedback"]["video_view_count"],
    #   reshare_warning: feedback_object["comet_ufi_summary_and_actions_renderer"]["feedback"]["should_show_reshare_warning"],
    #   video_preview_image_url: video_object["preferred_thumbnail"]["image"]["uri"],
    #   video_url: video_object["browser_native_hd_url"] || video_object["browser_native_sd_url"],
    #   text: text,
    #   created_at: creation_date,
    #   profile_link: story_node_object["comet_sections"]["context_layout"]["story"]["comet_sections"]["actor_photo"]["story"]["actors"][0]["url"],
    #   has_video: true
    # }
    # post_details[:video_preview_image_file] = Forki.retrieve_media(post_details[:video_preview_image_url])
    # post_details[:video_file] = Forki.retrieve_media(post_details[:video_url])
    # post_details[:reactions] = reaction_counts
    #
    # source://forki//lib/forki/scrapers/sieves/video_sieves/video_sieve_watch_tab.rb#41
    def sieve(graphql_objects); end
  end
end
