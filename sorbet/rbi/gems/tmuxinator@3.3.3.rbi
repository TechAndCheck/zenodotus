# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tmuxinator` gem.
# Please instead update this file by running `bin/tapioca gem tmuxinator`.


# source://tmuxinator//lib/tmuxinator.rb#11
module Tmuxinator; end

# source://tmuxinator//lib/tmuxinator/cli.rb#6
class Tmuxinator::Cli < ::Thor
  include ::Thor::Actions
  include ::Tmuxinator::Util

  # source://tmuxinator//lib/tmuxinator/cli.rb#55
  def commands(shell = T.unsafe(nil)); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#69
  def completions(arg); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#163
  def config_path(name, local = T.unsafe(nil)); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#340
  def copy(existing, new); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#178
  def create_project(project_options = T.unsafe(nil)); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#316
  def debug(name = T.unsafe(nil), *args); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#361
  def delete(*projects); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#417
  def doctor; end

  # source://tmuxinator//lib/tmuxinator/cli.rb#154
  def find_project_file(name, local = T.unsafe(nil)); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#171
  def generate_project_file(name, path); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#379
  def implode; end

  # source://tmuxinator//lib/tmuxinator/cli.rb#227
  def kill_project(project); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#398
  def list; end

  # source://tmuxinator//lib/tmuxinator/cli.rb#299
  def local; end

  # source://tmuxinator//lib/tmuxinator/cli.rb#86
  def new(name, session = T.unsafe(nil)); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#95
  def new_project(name); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#100
  def new_project_with_session(name, session); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#203
  def render_project(project); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#221
  def show_continuation_prompt; end

  # source://tmuxinator//lib/tmuxinator/cli.rb#216
  def show_version_warning; end

  # source://tmuxinator//lib/tmuxinator/cli.rb#244
  def start(name = T.unsafe(nil), *args); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#275
  def stop(name = T.unsafe(nil)); end

  # source://tmuxinator//lib/tmuxinator/cli.rb#411
  def version; end

  # source://tmuxinator//lib/tmuxinator/cli.rb#212
  def version_warning?(suppress_flag); end

  class << self
    # This method was defined as something of a workaround...  Previously
    # the conditional contained within was in the executable (i.e.
    # bin/tmuxinator).  It has been moved here so as to be testable. A couple
    # of notes:
    # - ::start (defined in Thor::Base) expects the first argument to be an
    # array or ARGV, not a varargs.  Perhaps ::bootstrap should as well?
    # - ::start has a different purpose from #start and hence a different
    # signature
    #
    # source://tmuxinator//lib/tmuxinator/cli.rb#436
    def bootstrap(args = T.unsafe(nil)); end

    # By default, Thor returns exit(0) when an error occurs.
    # Please see: https://github.com/tmuxinator/tmuxinator/issues/192
    #
    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/cli.rb#9
    def exit_on_failure?; end
  end
end

# source://tmuxinator//lib/tmuxinator/cli.rb#15
Tmuxinator::Cli::COMMANDS = T.let(T.unsafe(nil), Hash)

# source://tmuxinator//lib/tmuxinator/cli.rb#48
Tmuxinator::Cli::RESERVED_COMMANDS = T.let(T.unsafe(nil), Array)

# For future reference: due to how tmuxinator currently consumes
# command-line arguments (see ::bootstrap, below), invocations of Thor's
# base commands (i.e. 'help', etc) can be instead routed to #start (rather
# than to ::start).  In order to prevent this, the THOR_COMMANDS and
# RESERVED_COMMANDS constants have been introduced. The former enumerates
# any/all Thor commands we want to insure get passed through to Thor.start.
# The latter is the superset of the Thor commands and any tmuxinator
# commands, defined in COMMANDS, above.
#
# source://tmuxinator//lib/tmuxinator/cli.rb#47
Tmuxinator::Cli::THOR_COMMANDS = T.let(T.unsafe(nil), Array)

# source://tmuxinator//lib/tmuxinator/config.rb#4
class Tmuxinator::Config
  class << self
    # List of all active tmux sessions
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#130
    def active_sessions; end

    # source://tmuxinator//lib/tmuxinator/config.rb#150
    def config_file_basenames; end

    # Sorted list of all project .yml file basenames, including duplicates
    #
    # @param active filter configs by active project sessions
    # @return [Array<String>] list of project names
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#138
    def configs(active: T.unsafe(nil)); end

    # source://tmuxinator//lib/tmuxinator/config.rb#62
    def default; end

    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#66
    def default?; end

    # source://tmuxinator//lib/tmuxinator/config.rb#54
    def default_or_sample; end

    # source://tmuxinator//lib/tmuxinator/config.rb#82
    def default_path_option; end

    # source://tmuxinator//lib/tmuxinator/config.rb#108
    def default_project(name); end

    # Existent directories which may contain project files
    # Listed in search order
    # Used by `implode` and `list` commands
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#161
    def directories; end

    # The directory (created if needed) in which to store new projects
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#12
    def directory; end

    # $TMUXINATOR_CONFIG (and create directory) or "".
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#42
    def environment; end

    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#50
    def environment?; end

    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#86
    def exist?(name: T.unsafe(nil), path: T.unsafe(nil)); end

    # Pathname of given project searching only global directories
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#98
    def global_project(name); end

    # source://tmuxinator//lib/tmuxinator/config.rb#22
    def home; end

    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#26
    def home?; end

    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#93
    def local?; end

    # source://tmuxinator//lib/tmuxinator/config.rb#104
    def local_project; end

    # Pathname of the given project
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#113
    def project(name); end

    # source://tmuxinator//lib/tmuxinator/config.rb#104
    def project_in_local; end

    # Pathname of given project searching only global directories
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#98
    def project_in_root(name); end

    # The directory (created if needed) in which to store new projects
    # Deprecated methods: ignore the 1st, use the 2nd
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#12
    def root; end

    # source://tmuxinator//lib/tmuxinator/config.rb#58
    def sample; end

    # source://tmuxinator//lib/tmuxinator/config.rb#121
    def stop_template; end

    # source://tmuxinator//lib/tmuxinator/config.rb#117
    def template; end

    # @raise [NO_LOCAL_FILE_MSG]
    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#178
    def valid_local_project?(name); end

    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#169
    def valid_project_config?(project_config); end

    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#185
    def valid_standard_project?(name); end

    # source://tmuxinator//lib/tmuxinator/config.rb#192
    def validate(options = T.unsafe(nil)); end

    # source://tmuxinator//lib/tmuxinator/config.rb#70
    def version; end

    # source://tmuxinator//lib/tmuxinator/config.rb#125
    def wemux_template; end

    # ~/.config/tmuxinator unless $XDG_CONFIG_HOME has been configured to use
    # a custom value. (e.g. if $XDG_CONFIG_HOME is set to ~/my-config, the
    # return value will be ~/my-config/tmuxinator)
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#33
    def xdg; end

    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#37
    def xdg?; end

    private

    # source://tmuxinator//lib/tmuxinator/config.rb#219
    def asset_path(asset); end

    # The first pathname of the project named 'name' found while
    # recursively searching 'directory'
    #
    # source://tmuxinator//lib/tmuxinator/config.rb#225
    def project_in(directory, name); end
  end
end

# source://tmuxinator//lib/tmuxinator/config.rb#5
Tmuxinator::Config::LOCAL_DEFAULTS = T.let(T.unsafe(nil), Array)

# source://tmuxinator//lib/tmuxinator/config.rb#6
Tmuxinator::Config::NO_LOCAL_FILE_MSG = T.let(T.unsafe(nil), String)

# source://tmuxinator//lib/tmuxinator/config.rb#7
Tmuxinator::Config::NO_PROJECT_FOUND_MSG = T.let(T.unsafe(nil), String)

# source://tmuxinator//lib/tmuxinator/config.rb#8
Tmuxinator::Config::TMUX_MASTER_VERSION = T.let(T.unsafe(nil), Float)

# source://tmuxinator//lib/tmuxinator/deprecations.rb#4
module Tmuxinator::Deprecations
  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/deprecations.rb#17
  def cli_args?; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/deprecations.rb#25
  def post?; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/deprecations.rb#21
  def pre?; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/deprecations.rb#13
  def pre_tab?; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/deprecations.rb#9
  def rbenv?; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/deprecations.rb#5
  def rvm?; end
end

# source://tmuxinator//lib/tmuxinator/doctor.rb#4
class Tmuxinator::Doctor
  class << self
    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/doctor.rb#6
    def editor?; end

    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/doctor.rb#10
    def installed?; end

    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/doctor.rb#14
    def shell?; end
  end
end

# source://tmuxinator//lib/tmuxinator/hooks.rb#4
module Tmuxinator::Hooks
  private

  # source://tmuxinator//lib/tmuxinator/hooks.rb#7
  def commands_from(project, hook_name); end

  class << self
    # source://tmuxinator//lib/tmuxinator/hooks.rb#7
    def commands_from(project, hook_name); end
  end
end

# source://tmuxinator//lib/tmuxinator/hooks/project.rb#5
module Tmuxinator::Hooks::Project
  private

  # Commands specified in this hook run when you exit from a project ( aka
  # detach from a tmux session )
  #
  # source://tmuxinator//lib/tmuxinator/hooks/project.rb#31
  def hook_on_project_exit; end

  # Commands specified in this hook run when "tmuxinator start project"
  # command is issued and there is no tmux session available named "project"
  #
  # source://tmuxinator//lib/tmuxinator/hooks/project.rb#17
  def hook_on_project_first_start; end

  # Commands specified in this hook run when "tmuxinator start project"
  # command is issued and there is no tmux session available named "project"
  #
  # source://tmuxinator//lib/tmuxinator/hooks/project.rb#24
  def hook_on_project_restart; end

  # Commands specified in this hook run when "tmuxinator start project"
  # command is issued
  #
  # source://tmuxinator//lib/tmuxinator/hooks/project.rb#10
  def hook_on_project_start; end

  # Command specified in this hook run when "tmuxinator stop project"
  # command is issued
  #
  # source://tmuxinator//lib/tmuxinator/hooks/project.rb#38
  def hook_on_project_stop; end

  class << self
    # Commands specified in this hook run when you exit from a project ( aka
    # detach from a tmux session )
    #
    # source://tmuxinator//lib/tmuxinator/hooks/project.rb#31
    def hook_on_project_exit; end

    # Commands specified in this hook run when "tmuxinator start project"
    # command is issued and there is no tmux session available named "project"
    #
    # source://tmuxinator//lib/tmuxinator/hooks/project.rb#17
    def hook_on_project_first_start; end

    # Commands specified in this hook run when "tmuxinator start project"
    # command is issued and there is no tmux session available named "project"
    #
    # source://tmuxinator//lib/tmuxinator/hooks/project.rb#24
    def hook_on_project_restart; end

    # Commands specified in this hook run when "tmuxinator start project"
    # command is issued
    #
    # source://tmuxinator//lib/tmuxinator/hooks/project.rb#10
    def hook_on_project_start; end

    # Command specified in this hook run when "tmuxinator stop project"
    # command is issued
    #
    # source://tmuxinator//lib/tmuxinator/hooks/project.rb#38
    def hook_on_project_stop; end
  end
end

# source://tmuxinator//lib/tmuxinator/pane.rb#4
class Tmuxinator::Pane
  # @return [Pane] a new instance of Pane
  #
  # source://tmuxinator//lib/tmuxinator/pane.rb#7
  def initialize(index, project, tab, *commands, title: T.unsafe(nil)); end

  # Returns the value of attribute commands.
  #
  # source://tmuxinator//lib/tmuxinator/pane.rb#5
  def commands; end

  # Returns the value of attribute index.
  #
  # source://tmuxinator//lib/tmuxinator/pane.rb#5
  def index; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/pane.rb#60
  def last?; end

  # source://tmuxinator//lib/tmuxinator/pane.rb#41
  def name; end

  # source://tmuxinator//lib/tmuxinator/pane.rb#49
  def pane_index; end

  # Returns the value of attribute project.
  #
  # source://tmuxinator//lib/tmuxinator/pane.rb#5
  def project; end

  # Returns the value of attribute tab.
  #
  # source://tmuxinator//lib/tmuxinator/pane.rb#5
  def tab; end

  # Returns the value of attribute title.
  #
  # source://tmuxinator//lib/tmuxinator/pane.rb#5
  def title; end

  # source://tmuxinator//lib/tmuxinator/pane.rb#27
  def tmux_main_command(command); end

  # source://tmuxinator//lib/tmuxinator/pane.rb#19
  def tmux_pre_command; end

  # source://tmuxinator//lib/tmuxinator/pane.rb#23
  def tmux_pre_window_command; end

  # source://tmuxinator//lib/tmuxinator/pane.rb#35
  def tmux_set_title; end

  # source://tmuxinator//lib/tmuxinator/pane.rb#53
  def tmux_split_command; end

  # source://tmuxinator//lib/tmuxinator/pane.rb#15
  def tmux_window_and_pane_target; end

  # source://tmuxinator//lib/tmuxinator/pane.rb#45
  def window_index; end

  private

  # source://tmuxinator//lib/tmuxinator/pane.rb#70
  def _send_keys(target, keys); end

  # source://tmuxinator//lib/tmuxinator/pane.rb#66
  def _send_target(keys); end

  # source://tmuxinator//lib/tmuxinator/pane.rb#74
  def _set_title(title); end
end

# source://tmuxinator//lib/tmuxinator/project.rb#4
class Tmuxinator::Project
  include ::Thor::Actions
  include ::Tmuxinator::Util
  include ::Tmuxinator::Deprecations
  include ::Tmuxinator::Hooks::Project

  # @return [Project] a new instance of Project
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#80
  def initialize(yaml, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#133
  def attach?; end

  # source://tmuxinator//lib/tmuxinator/project.rb#211
  def base_index; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#305
  def cli_args?; end

  # Returns the value of attribute custom_name.
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#42
  def custom_name; end

  # source://tmuxinator//lib/tmuxinator/project.rb#267
  def deprecation_checks; end

  # source://tmuxinator//lib/tmuxinator/project.rb#278
  def deprecation_messages; end

  # source://tmuxinator//lib/tmuxinator/project.rb#259
  def deprecations; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#340
  def enable_pane_titles?; end

  # Returns the value of attribute force_attach.
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#40
  def force_attach; end

  # Returns the value of attribute force_detach.
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#41
  def force_detach; end

  # source://tmuxinator//lib/tmuxinator/project.rb#321
  def get_base_index; end

  # source://tmuxinator//lib/tmuxinator/project.rb#317
  def get_pane_base_index; end

  # source://tmuxinator//lib/tmuxinator/project.rb#101
  def kill; end

  # source://tmuxinator//lib/tmuxinator/project.rb#123
  def name; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#239
  def name?; end

  # source://tmuxinator//lib/tmuxinator/project.rb#215
  def pane_base_index; end

  # source://tmuxinator//lib/tmuxinator/project.rb#362
  def pane_title_position_not_valid_warning; end

  # source://tmuxinator//lib/tmuxinator/project.rb#370
  def pane_titles_not_supported_warning; end

  # source://tmuxinator//lib/tmuxinator/project.rb#156
  def post; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#313
  def post?; end

  # source://tmuxinator//lib/tmuxinator/project.rb#128
  def pre; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#309
  def pre?; end

  # source://tmuxinator//lib/tmuxinator/project.rb#143
  def pre_window; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#289
  def rbenv?; end

  # source://tmuxinator//lib/tmuxinator/project.rb#97
  def render; end

  # source://tmuxinator//lib/tmuxinator/project.rb#118
  def root; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#235
  def root?; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#293
  def rvm?; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#297
  def rvm_or_rbenv?; end

  # source://tmuxinator//lib/tmuxinator/project.rb#251
  def send_keys(cmd, window_index); end

  # source://tmuxinator//lib/tmuxinator/project.rb#247
  def send_pane_command(cmd, window_index, _pane_index); end

  # source://tmuxinator//lib/tmuxinator/project.rb#325
  def show_tmux_options; end

  # source://tmuxinator//lib/tmuxinator/project.rb#185
  def socket; end

  # source://tmuxinator//lib/tmuxinator/project.rb#193
  def socket_name; end

  # source://tmuxinator//lib/tmuxinator/project.rb#197
  def socket_path; end

  # source://tmuxinator//lib/tmuxinator/project.rb#223
  def startup_pane; end

  # source://tmuxinator//lib/tmuxinator/project.rb#219
  def startup_window; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#301
  def tabs?; end

  # source://tmuxinator//lib/tmuxinator/project.rb#161
  def tmux; end

  # source://tmuxinator//lib/tmuxinator/project.rb#165
  def tmux_command; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#169
  def tmux_has_session?(name); end

  # source://tmuxinator//lib/tmuxinator/project.rb#336
  def tmux_kill_session_command; end

  # source://tmuxinator//lib/tmuxinator/project.rb#331
  def tmux_new_session_command; end

  # source://tmuxinator//lib/tmuxinator/project.rb#201
  def tmux_options; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#227
  def tmux_options?; end

  # source://tmuxinator//lib/tmuxinator/project.rb#353
  def tmux_set_pane_title_format(tmux_window_target); end

  # source://tmuxinator//lib/tmuxinator/project.rb#344
  def tmux_set_pane_title_position(tmux_window_target); end

  # source://tmuxinator//lib/tmuxinator/project.rb#71
  def validate!; end

  # source://tmuxinator//lib/tmuxinator/project.rb#243
  def window(index); end

  # source://tmuxinator//lib/tmuxinator/project.rb#110
  def windows; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#231
  def windows?; end

  # Returns the value of attribute yaml.
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#39
  def yaml; end

  private

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#380
  def blank?(object); end

  # source://tmuxinator//lib/tmuxinator/project.rb#388
  def extract_tmux_config; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#403
  def legacy_synchronize?; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#433
  def pane_title_format?; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#425
  def pane_title_position?; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#429
  def pane_title_position_valid?; end

  # source://tmuxinator//lib/tmuxinator/project.rb#417
  def parsed_parameters(parameters); end

  # source://tmuxinator//lib/tmuxinator/project.rb#437
  def print_warning(message); end

  # source://tmuxinator//lib/tmuxinator/project.rb#444
  def set_window_option(tmux_window_target); end

  # source://tmuxinator//lib/tmuxinator/project.rb#407
  def synchronize_options; end

  # source://tmuxinator//lib/tmuxinator/project.rb#384
  def tmux_config; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/project.rb#421
  def wemux?; end

  # source://tmuxinator//lib/tmuxinator/project.rb#413
  def window_options; end

  class << self
    # source://tmuxinator//lib/tmuxinator/project.rb#44
    def load(path, options = T.unsafe(nil)); end

    # source://tmuxinator//lib/tmuxinator/project.rb#59
    def parse_settings(args); end

    # source://tmuxinator//lib/tmuxinator/project.rb#105
    def render_template(template, bndg); end
  end
end

# source://tmuxinator//lib/tmuxinator/project.rb#17
Tmuxinator::Project::CLIARGS_DEP_MSG = T.let(T.unsafe(nil), String)

# source://tmuxinator//lib/tmuxinator/project.rb#34
Tmuxinator::Project::POST_DEP_MSG = T.let(T.unsafe(nil), String)

# source://tmuxinator//lib/tmuxinator/project.rb#30
Tmuxinator::Project::PRE_DEP_MSG = T.let(T.unsafe(nil), String)

# source://tmuxinator//lib/tmuxinator/project.rb#9
Tmuxinator::Project::RBENVRVM_DEP_MSG = T.let(T.unsafe(nil), String)

# source://tmuxinator//lib/tmuxinator/project.rb#21
Tmuxinator::Project::SYNC_DEP_MSG = T.let(T.unsafe(nil), String)

# source://tmuxinator//lib/tmuxinator/project.rb#13
Tmuxinator::Project::TABS_DEP_MSG = T.let(T.unsafe(nil), String)

# source://tmuxinator//lib/tmuxinator/tmux_version.rb#4
module Tmuxinator::TmuxVersion
  class << self
    # @return [Boolean]
    #
    # source://tmuxinator//lib/tmuxinator/tmux_version.rb#42
    def supported?(version = T.unsafe(nil)); end
  end
end

# source://tmuxinator//lib/tmuxinator/tmux_version.rb#5
Tmuxinator::TmuxVersion::SUPPORTED_TMUX_VERSIONS = T.let(T.unsafe(nil), Array)

# source://tmuxinator//lib/tmuxinator/tmux_version.rb#36
Tmuxinator::TmuxVersion::UNSUPPORTED_VERSION_MSG = T.let(T.unsafe(nil), String)

# source://tmuxinator//lib/tmuxinator/util.rb#4
module Tmuxinator::Util
  include ::Thor::Actions
  extend ::Thor::Actions::ClassMethods

  # source://tmuxinator//lib/tmuxinator/util.rb#7
  def exit!(msg); end

  # source://tmuxinator//lib/tmuxinator/util.rb#12
  def yes_no(condition); end
end

# source://tmuxinator//lib/tmuxinator/version.rb#4
Tmuxinator::VERSION = T.let(T.unsafe(nil), String)

# source://tmuxinator//lib/tmuxinator/wemux_support.rb#4
module Tmuxinator::WemuxSupport
  # source://tmuxinator//lib/tmuxinator/wemux_support.rb#13
  def name; end

  # source://tmuxinator//lib/tmuxinator/wemux_support.rb#5
  def render; end

  # source://tmuxinator//lib/tmuxinator/wemux_support.rb#13
  def tmux; end
end

# source://tmuxinator//lib/tmuxinator/window.rb#4
class Tmuxinator::Window
  include ::Thor::Actions
  include ::Tmuxinator::Util

  # @return [Window] a new instance of Window
  #
  # source://tmuxinator//lib/tmuxinator/window.rb#9
  def initialize(window_yaml, index, project); end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/window.rb#23
  def _hashed?; end

  # source://tmuxinator//lib/tmuxinator/window.rb#51
  def _project_root; end

  # source://tmuxinator//lib/tmuxinator/window.rb#47
  def _yaml_root; end

  # source://tmuxinator//lib/tmuxinator/window.rb#72
  def build_commands(_prefix, command_yml); end

  # source://tmuxinator//lib/tmuxinator/window.rb#55
  def build_panes(panes_yml); end

  # Returns the value of attribute commands.
  #
  # source://tmuxinator//lib/tmuxinator/window.rb#7
  def commands; end

  # Returns the value of attribute index.
  #
  # source://tmuxinator//lib/tmuxinator/window.rb#7
  def index; end

  # source://tmuxinator//lib/tmuxinator/window.rb#31
  def layout; end

  # Returns the value of attribute name.
  #
  # source://tmuxinator//lib/tmuxinator/window.rb#7
  def name; end

  # source://tmuxinator//lib/tmuxinator/window.rb#19
  def panes; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/window.rb#98
  def panes?; end

  # source://tmuxinator//lib/tmuxinator/window.rb#84
  def pre; end

  # Returns the value of attribute project.
  #
  # source://tmuxinator//lib/tmuxinator/window.rb#7
  def project; end

  # The expanded, joined window root path
  # Relative paths are joined to the project root
  #
  # source://tmuxinator//lib/tmuxinator/window.rb#41
  def root; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/window.rb#94
  def root?; end

  # source://tmuxinator//lib/tmuxinator/window.rb#35
  def synchronize; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/window.rb#145
  def synchronize_after?; end

  # @return [Boolean]
  #
  # source://tmuxinator//lib/tmuxinator/window.rb#141
  def synchronize_before?; end

  # source://tmuxinator//lib/tmuxinator/window.rb#133
  def tmux_layout_command; end

  # source://tmuxinator//lib/tmuxinator/window.rb#120
  def tmux_new_window_command; end

  # source://tmuxinator//lib/tmuxinator/window.rb#106
  def tmux_pre_window_command; end

  # source://tmuxinator//lib/tmuxinator/window.rb#137
  def tmux_select_first_pane; end

  # source://tmuxinator//lib/tmuxinator/window.rb#129
  def tmux_synchronize_panes; end

  # source://tmuxinator//lib/tmuxinator/window.rb#125
  def tmux_tiled_layout_command; end

  # source://tmuxinator//lib/tmuxinator/window.rb#112
  def tmux_window_command_prefix; end

  # source://tmuxinator//lib/tmuxinator/window.rb#116
  def tmux_window_name_option; end

  # source://tmuxinator//lib/tmuxinator/window.rb#102
  def tmux_window_target; end

  # source://tmuxinator//lib/tmuxinator/window.rb#27
  def yaml; end
end
