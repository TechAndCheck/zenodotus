# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tanakai` gem.
# Please instead update this file by running `bin/tapioca gem tanakai`.


# source://tanakai//lib/tanakai/core_ext/array.rb#1
class Array
  include ::Enumerable

  # source://tanakai//lib/tanakai/core_ext/array.rb#2
  def in_sorted_groups(number, fill_width = T.unsafe(nil)); end
end

# source://tanakai//lib/tanakai/core_ext/hash.rb#1
class Hash
  include ::Enumerable

  # source://tanakai//lib/tanakai/core_ext/hash.rb#2
  def deep_merge_excl(second, exclude); end
end

# source://tanakai//lib/tanakai/core_ext/numeric.rb#1
class Numeric
  include ::Comparable

  # https://stackoverflow.com/a/1679963
  #
  # source://tanakai//lib/tanakai/core_ext/numeric.rb#3
  def duration; end
end

# source://tanakai//lib/tanakai/core_ext/string.rb#3
class String
  include ::Comparable

  # source://tanakai//lib/tanakai/core_ext/string.rb#4
  def to_id; end
end

# source://tanakai//lib/tanakai/version.rb#1
module Tanakai
  class << self
    # source://tanakai//lib/tanakai.rb#22
    def configuration; end

    # @yield [configuration]
    #
    # source://tanakai//lib/tanakai.rb#26
    def configure; end

    # source://tanakai//lib/tanakai.rb#30
    def env; end

    # source://tanakai//lib/tanakai.rb#49
    def find_by_name(name); end

    # source://tanakai//lib/tanakai.rb#42
    def list; end

    # source://tanakai//lib/tanakai.rb#34
    def time_zone; end

    # source://tanakai//lib/tanakai.rb#38
    def time_zone=(value); end
  end
end

# source://tanakai//lib/tanakai/base/saver.rb#5
class Tanakai::Base
  include ::Tanakai::BaseHelper

  # @return [Base] a new instance of Base
  #
  # source://tanakai//lib/tanakai/base.rb#176
  def initialize(engine = T.unsafe(nil), config: T.unsafe(nil)); end

  # source://tanakai//lib/tanakai/base.rb#239
  def add_event(scope = T.unsafe(nil), event); end

  # source://tanakai//lib/tanakai/base.rb#190
  def browser; end

  # source://tanakai//lib/tanakai/base.rb#208
  def console(response = T.unsafe(nil), url: T.unsafe(nil), data: T.unsafe(nil)); end

  # Returns the value of attribute logger.
  #
  # source://tanakai//lib/tanakai/base.rb#173
  def logger; end

  # @raise [InvalidUrlError]
  #
  # source://tanakai//lib/tanakai/base.rb#194
  def request_to(handler, delay = T.unsafe(nil), url:, data: T.unsafe(nil), response_type: T.unsafe(nil)); end

  # source://tanakai//lib/tanakai/base.rb#224
  def save_to(path, item, format:, position: T.unsafe(nil), append: T.unsafe(nil)); end

  # source://tanakai//lib/tanakai/base.rb#214
  def storage; end

  # @return [Boolean]
  #
  # source://tanakai//lib/tanakai/base.rb#220
  def unique?(scope, value); end

  # Returns the value of attribute with_info.
  #
  # source://tanakai//lib/tanakai/base.rb#174
  def with_info; end

  # Sets the attribute with_info
  #
  # @param value the value to set the attribute with_info to.
  #
  # source://tanakai//lib/tanakai/base.rb#174
  def with_info=(_arg0); end

  private

  # source://tanakai//lib/tanakai/base.rb#251
  def create_browser(engine, config = T.unsafe(nil)); end

  # source://tanakai//lib/tanakai/base.rb#290
  def in_parallel(handler, urls, threads:, data: T.unsafe(nil), delay: T.unsafe(nil), engine: T.unsafe(nil), config: T.unsafe(nil), response_type: T.unsafe(nil)); end

  # source://tanakai//lib/tanakai/base.rb#269
  def send_item(item, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://tanakai//lib/tanakai/base.rb#255
  def unique_request?(url); end

  class << self
    # source://tanakai//lib/tanakai/base.rb#58
    def add_event(scope, event); end

    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # @return [Boolean]
    #
    # source://tanakai//lib/tanakai/base.rb#37
    def completed?; end

    # source://tanakai//lib/tanakai/base.rb#85
    def config; end

    # source://tanakai//lib/tanakai/base.rb#103
    def crawl!(exception_on_fail: T.unsafe(nil), data: T.unsafe(nil)); end

    # source://tanakai//lib/tanakai/base.rb#73
    def engine; end

    # @return [Boolean]
    #
    # source://tanakai//lib/tanakai/base.rb#41
    def failed?; end

    # source://tanakai//lib/tanakai/base.rb#49
    def items; end

    # source://tanakai//lib/tanakai/base.rb#95
    def logger; end

    # source://tanakai//lib/tanakai/base.rb#69
    def name; end

    # source://tanakai//lib/tanakai/base.rb#157
    def parse!(handler, *args, **request); end

    # source://tanakai//lib/tanakai/base.rb#77
    def pipelines; end

    # Returns the value of attribute run_info.
    #
    # source://tanakai//lib/tanakai/base.rb#30
    def run_info; end

    # @return [Boolean]
    #
    # source://tanakai//lib/tanakai/base.rb#33
    def running?; end

    # Returns the value of attribute savers.
    #
    # source://tanakai//lib/tanakai/base.rb#30
    def savers; end

    # source://tanakai//lib/tanakai/base.rb#81
    def start_urls; end

    # Returns the value of attribute storage.
    #
    # source://tanakai//lib/tanakai/base.rb#30
    def storage; end

    # source://tanakai//lib/tanakai/base.rb#53
    def update(type, subtype); end

    # source://tanakai//lib/tanakai/base.rb#45
    def visits; end
  end
end

# don't deep merge config's headers hash option
#
# source://tanakai//lib/tanakai/base.rb#10
Tanakai::Base::DMERGE_EXCLUDE = T.let(T.unsafe(nil), Array)

# source://tanakai//lib/tanakai/base.rb#7
class Tanakai::Base::InvalidUrlError < ::StandardError
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://tanakai//lib/tanakai/base.rb#12
Tanakai::Base::LoggerFormatter = T.let(T.unsafe(nil), Proc)

# source://tanakai//lib/tanakai/base/saver.rb#6
class Tanakai::Base::Saver
  # @return [Saver] a new instance of Saver
  #
  # source://tanakai//lib/tanakai/base/saver.rb#9
  def initialize(path, format:, position: T.unsafe(nil), append: T.unsafe(nil)); end

  # Returns the value of attribute append.
  #
  # source://tanakai//lib/tanakai/base/saver.rb#7
  def append; end

  # Returns the value of attribute format.
  #
  # source://tanakai//lib/tanakai/base/saver.rb#7
  def format; end

  # Returns the value of attribute path.
  #
  # source://tanakai//lib/tanakai/base/saver.rb#7
  def path; end

  # Returns the value of attribute position.
  #
  # source://tanakai//lib/tanakai/base/saver.rb#7
  def position; end

  # source://tanakai//lib/tanakai/base/saver.rb#22
  def save(item); end

  private

  # source://tanakai//lib/tanakai/base/saver.rb#93
  def flatten_hash(hash); end

  # source://tanakai//lib/tanakai/base/saver.rb#78
  def save_to_csv(item); end

  # source://tanakai//lib/tanakai/base/saver.rb#42
  def save_to_json(item); end

  # source://tanakai//lib/tanakai/base/saver.rb#68
  def save_to_jsonlines(item); end

  # source://tanakai//lib/tanakai/base/saver.rb#55
  def save_to_pretty_json(item); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://tanakai//lib/tanakai/base/storage.rb#3
class Tanakai::Base::Storage
  # @return [Storage] a new instance of Storage
  #
  # source://tanakai//lib/tanakai/base/storage.rb#6
  def initialize; end

  # source://tanakai//lib/tanakai/base/storage.rb#24
  def add(scope, value); end

  # source://tanakai//lib/tanakai/base/storage.rb#11
  def all(scope = T.unsafe(nil)); end

  # source://tanakai//lib/tanakai/base/storage.rb#47
  def clear!; end

  # Returns the value of attribute database.
  #
  # source://tanakai//lib/tanakai/base/storage.rb#4
  def database; end

  # @return [Boolean]
  #
  # source://tanakai//lib/tanakai/base/storage.rb#17
  def include?(scope, value); end

  # @return [Boolean]
  #
  # source://tanakai//lib/tanakai/base/storage.rb#38
  def unique?(scope, value); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://tanakai//lib/tanakai/base_helper.rb#2
module Tanakai::BaseHelper
  private

  # source://tanakai//lib/tanakai/base_helper.rb#5
  def absolute_url(url, base:); end

  # source://tanakai//lib/tanakai/base_helper.rb#10
  def escape_url(url); end

  # source://tanakai//lib/tanakai/base_helper.rb#18
  def normalize_url(url, base:); end
end

# source://tanakai//lib/tanakai/browser_builder.rb#2
module Tanakai::BrowserBuilder
  class << self
    # source://tanakai//lib/tanakai/browser_builder.rb#3
    def build(engine, config = T.unsafe(nil), spider:); end
  end
end

# source://tanakai//lib/tanakai/pipeline.rb#2
class Tanakai::Pipeline
  include ::Tanakai::BaseHelper

  # source://tanakai//lib/tanakai/pipeline.rb#29
  def logger; end

  # source://tanakai//lib/tanakai/pipeline.rb#11
  def name; end

  # source://tanakai//lib/tanakai/pipeline.rb#25
  def save_to(path, item, format:, position: T.unsafe(nil), append: T.unsafe(nil)); end

  # Returns the value of attribute spider.
  #
  # source://tanakai//lib/tanakai/pipeline.rb#9
  def spider; end

  # Sets the attribute spider
  #
  # @param value the value to set the attribute spider to.
  #
  # source://tanakai//lib/tanakai/pipeline.rb#9
  def spider=(_arg0); end

  # source://tanakai//lib/tanakai/pipeline.rb#17
  def storage; end

  # @return [Boolean]
  #
  # source://tanakai//lib/tanakai/pipeline.rb#21
  def unique?(scope, value); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # source://tanakai//lib/tanakai/pipeline.rb#4
    def name; end
  end
end

# source://tanakai//lib/tanakai/pipeline.rb#3
class Tanakai::Pipeline::DropItemError < ::StandardError
  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://tanakai//lib/tanakai/version.rb#2
Tanakai::VERSION = T.let(T.unsafe(nil), String)
