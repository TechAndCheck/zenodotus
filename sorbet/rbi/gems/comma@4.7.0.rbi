# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `comma` gem.
# Please instead update this file by running `bin/tapioca gem comma`.


class ActiveJob::Base
  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _enqueue_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _perform_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_enqueue_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_perform_callbacks(&block); end

  # source://activejob/7.2.2.1/lib/active_job/exceptions.rb#12
  def after_discard_procs; end

  # source://activejob/7.2.2.1/lib/active_job/exceptions.rb#12
  def after_discard_procs=(_arg0); end

  # source://activejob/7.2.2.1/lib/active_job/exceptions.rb#12
  def after_discard_procs?; end

  # source://activejob/7.2.2.1/lib/active_job/logging.rb#15
  def logger; end

  # source://activejob/7.2.2.1/lib/active_job/logging.rb#15
  def logger=(val); end

  # source://activejob/7.2.2.1/lib/active_job/queue_adapter.rb#27
  def queue_adapter(&_arg0); end

  # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#57
  def queue_name_prefix; end

  # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#57
  def queue_name_prefix=(_arg0); end

  # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#57
  def queue_name_prefix?; end

  # source://activesupport/7.2.2.1/lib/active_support/rescuable.rb#15
  def rescue_handlers; end

  # source://activesupport/7.2.2.1/lib/active_support/rescuable.rb#15
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.2.2.1/lib/active_support/rescuable.rb#15
  def rescue_handlers?; end

  # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#137
  def sidekiq_options_hash; end

  # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#149
  def sidekiq_options_hash=(_arg0); end

  # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#137
  def sidekiq_retries_exhausted_block; end

  # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#149
  def sidekiq_retries_exhausted_block=(_arg0); end

  # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#137
  def sidekiq_retry_in_block; end

  # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#149
  def sidekiq_retry_in_block=(_arg0); end

  class << self
    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _enqueue_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _enqueue_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _perform_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _perform_callbacks=(value); end

    # source://activejob/7.2.2.1/lib/active_job/queue_adapter.rb#25
    def _queue_adapter; end

    # source://activejob/7.2.2.1/lib/active_job/queue_adapter.rb#25
    def _queue_adapter=(value); end

    # source://activejob/7.2.2.1/lib/active_job/queue_adapter.rb#24
    def _queue_adapter_name; end

    # source://activejob/7.2.2.1/lib/active_job/queue_adapter.rb#24
    def _queue_adapter_name=(value); end

    # source://activejob/7.2.2.1/lib/active_job/test_helper.rb#19
    def _test_adapter; end

    # source://activejob/7.2.2.1/lib/active_job/test_helper.rb#19
    def _test_adapter=(value); end

    # source://activejob/7.2.2.1/lib/active_job/exceptions.rb#12
    def after_discard_procs; end

    # source://activejob/7.2.2.1/lib/active_job/exceptions.rb#12
    def after_discard_procs=(value); end

    # source://activejob/7.2.2.1/lib/active_job/exceptions.rb#12
    def after_discard_procs?; end

    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activejob/7.2.2.1/lib/active_job/enqueuing.rb#54
    def enqueue_after_transaction_commit; end

    # source://activejob/7.2.2.1/lib/active_job/enqueuing.rb#54
    def enqueue_after_transaction_commit=(value); end

    # source://activejob/7.2.2.1/lib/active_job/logging.rb#26
    def log_arguments; end

    # source://activejob/7.2.2.1/lib/active_job/logging.rb#26
    def log_arguments=(value); end

    # source://activejob/7.2.2.1/lib/active_job/logging.rb#26
    def log_arguments?; end

    # source://activejob/7.2.2.1/lib/active_job/logging.rb#15
    def logger; end

    # source://activejob/7.2.2.1/lib/active_job/logging.rb#15
    def logger=(val); end

    # source://activejob/7.2.2.1/lib/active_job/queue_priority.rb#49
    def priority; end

    # source://activejob/7.2.2.1/lib/active_job/queue_priority.rb#49
    def priority=(value); end

    # source://activejob/7.2.2.1/lib/active_job/queue_priority.rb#49
    def priority?; end

    # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#55
    def queue_name; end

    # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#55
    def queue_name=(value); end

    # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#55
    def queue_name?; end

    # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#56
    def queue_name_delimiter; end

    # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#56
    def queue_name_delimiter=(value); end

    # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#56
    def queue_name_delimiter?; end

    # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#57
    def queue_name_prefix; end

    # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#57
    def queue_name_prefix=(value); end

    # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#57
    def queue_name_prefix?; end

    # source://activesupport/7.2.2.1/lib/active_support/rescuable.rb#15
    def rescue_handlers; end

    # source://activesupport/7.2.2.1/lib/active_support/rescuable.rb#15
    def rescue_handlers=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/rescuable.rb#15
    def rescue_handlers?; end

    # source://activejob/7.2.2.1/lib/active_job/exceptions.rb#11
    def retry_jitter; end

    # source://activejob/7.2.2.1/lib/active_job/exceptions.rb#11
    def retry_jitter=(value); end

    # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#104
    def sidekiq_options_hash; end

    # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#112
    def sidekiq_options_hash=(val); end

    # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#104
    def sidekiq_retries_exhausted_block; end

    # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#112
    def sidekiq_retries_exhausted_block=(val); end

    # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#104
    def sidekiq_retry_in_block; end

    # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#112
    def sidekiq_retry_in_block=(val); end

    private

    # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#99
    def __synchronized_sidekiq_options_hash; end

    # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#99
    def __synchronized_sidekiq_retries_exhausted_block; end

    # source://sidekiq/6.5.12/lib/sidekiq/worker.rb#99
    def __synchronized_sidekiq_retry_in_block; end
  end
end

# source://comma//lib/comma/relation.rb#3
module ActiveRecord
  class << self
    # source://activerecord/7.2.2.1/lib/active_record.rb#377
    def action_on_strict_loading_violation; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#377
    def action_on_strict_loading_violation=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#557
    def after_all_transactions_commit(&block); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#577
    def all_open_transactions; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#447
    def allow_deprecated_singular_associations_name; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#454
    def allow_deprecated_singular_associations_name=(value); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#370
    def application_record_class; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#370
    def application_record_class=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#276
    def async_query_executor; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#276
    def async_query_executor=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#341
    def before_committed_on_all_records; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#341
    def before_committed_on_all_records=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#338
    def belongs_to_required_validates_foreign_key; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#338
    def belongs_to_required_validates_foreign_key=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#347
    def commit_transaction_on_non_local_return; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#354
    def commit_transaction_on_non_local_return=(value); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#218
    def db_warnings_action; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#220
    def db_warnings_action=(action); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#247
    def db_warnings_ignore; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#247
    def db_warnings_ignore=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#199
    def default_timezone; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#203
    def default_timezone=(default_timezone); end

    # source://activerecord/7.2.2.1/lib/active_record/deprecator.rb#4
    def deprecator; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#181
    def disable_prepared_statements; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#181
    def disable_prepared_statements=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#540
    def disconnect_all!; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#425
    def dump_schema_after_migration; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#425
    def dump_schema_after_migration=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#435
    def dump_schemas; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#435
    def dump_schemas=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#529
    def eager_load!; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#396
    def error_on_ignored_order; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#396
    def error_on_ignored_order=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record/gem_version.rb#5
    def gem_version; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#490
    def generate_secure_token_on; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#490
    def generate_secure_token_on=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#299
    def global_executor_concurrency; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#291
    def global_executor_concurrency=(global_executor_concurrency); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#279
    def global_thread_pool_async_query_executor; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#314
    def index_nested_attribute_errors; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#314
    def index_nested_attribute_errors=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#188
    def lazily_load_schema_cache; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#188
    def lazily_load_schema_cache=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#256
    def legacy_connection_handling=(_); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#332
    def maintain_test_schema; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#332
    def maintain_test_schema=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#493
    def marshalling_format_version; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#497
    def marshalling_format_version=(value); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#416
    def migration_strategy; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#416
    def migration_strategy=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#304
    def permanent_connection_checkout; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#307
    def permanent_connection_checkout=(value); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#520
    def protocol_adapters; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#520
    def protocol_adapters=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#461
    def query_transformers; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#461
    def query_transformers=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#329
    def queues; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#329
    def queues=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#476
    def raise_int_wider_than_64bit; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#476
    def raise_int_wider_than_64bit=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#335
    def raise_on_assign_to_attr_readonly; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#335
    def raise_on_assign_to_attr_readonly=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#253
    def reading_role; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#253
    def reading_role=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#344
    def run_after_transaction_callbacks_in_order_defined; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#344
    def run_after_transaction_callbacks_in_order_defined=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#196
    def schema_cache_ignored_tables; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#196
    def schema_cache_ignored_tables=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#388
    def schema_format; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#388
    def schema_format=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#402
    def timestamped_migrations; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#402
    def timestamped_migrations=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#468
    def use_yaml_unsafe_load; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#468
    def use_yaml_unsafe_load=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#410
    def validate_migration_timestamps; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#410
    def validate_migration_timestamps=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#322
    def verbose_query_logs; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#322
    def verbose_query_logs=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#444
    def verify_foreign_keys_for_fixtures; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#444
    def verify_foreign_keys_for_fixtures=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record/version.rb#7
    def version; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#367
    def warn_on_records_fetched_greater_than; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#367
    def warn_on_records_fetched_greater_than=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#250
    def writing_role; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#250
    def writing_role=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record.rb#483
    def yaml_column_permitted_classes; end

    # source://activerecord/7.2.2.1/lib/active_record.rb#483
    def yaml_column_permitted_classes=(_arg0); end
  end
end

class ActiveRecord::AssociationRelation < ::ActiveRecord::Relation
  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#5
  def initialize(klass, association, **_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#14
  def ==(other); end

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#20
  def insert(attributes, **kwargs); end

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#20
  def insert!(attributes, **kwargs); end

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#20
  def insert_all(attributes, **kwargs); end

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#20
  def insert_all!(attributes, **kwargs); end

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#10
  def proxy_association; end

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#20
  def upsert(attributes, **kwargs); end

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#20
  def upsert_all(attributes, **kwargs); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#35
  def _create(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#39
  def _create!(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#31
  def _new(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/association_relation.rb#43
  def exec_queries; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::AsynchronousQueriesTracker
  # source://activerecord/7.2.2.1/lib/active_record/asynchronous_queries_tracker.rb#46
  def initialize; end

  # source://activerecord/7.2.2.1/lib/active_record/asynchronous_queries_tracker.rb#44
  def current_session; end

  # source://activerecord/7.2.2.1/lib/active_record/asynchronous_queries_tracker.rb#55
  def finalize_session; end

  # source://activerecord/7.2.2.1/lib/active_record/asynchronous_queries_tracker.rb#50
  def start_session; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/asynchronous_queries_tracker.rb#39
    def complete(asynchronous_queries_tracker); end

    # source://activerecord/7.2.2.1/lib/active_record/asynchronous_queries_tracker.rb#31
    def install_executor_hooks(executor = T.unsafe(nil)); end

    # source://activerecord/7.2.2.1/lib/active_record/asynchronous_queries_tracker.rb#35
    def run; end
  end
end

class ActiveRecord::AsynchronousQueriesTracker::Session
  # source://activerecord/7.2.2.1/lib/active_record/asynchronous_queries_tracker.rb#17
  def initialize; end

  # source://activerecord/7.2.2.1/lib/active_record/asynchronous_queries_tracker.rb#21
  def active?; end

  # source://activerecord/7.2.2.1/lib/active_record/asynchronous_queries_tracker.rb#25
  def finalize; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Access
  include ::ActiveModel::Serialization

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _before_commit_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _commit_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _create_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _destroy_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _find_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _initialize_callbacks; end

  # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#11
  def _reflections; end

  # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#11
  def _reflections?; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _rollback_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_before_commit_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_commit_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_create_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_destroy_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_find_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_initialize_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_rollback_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_save_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_touch_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_update_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#912
  def _run_validation_callbacks(&block); end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _save_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _touch_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _update_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _validate_callbacks; end

  # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#924
  def _validation_callbacks; end

  # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
  def _validators; end

  # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
  def _validators?; end

  # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#12
  def aggregate_reflections; end

  # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#12
  def aggregate_reflections?; end

  # source://activestorage/7.2.2.1/lib/active_storage/reflection.rb#53
  def attachment_reflections; end

  # source://activestorage/7.2.2.1/lib/active_storage/reflection.rb#53
  def attachment_reflections?; end

  # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#71
  def attribute_aliases; end

  # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#71
  def attribute_aliases?; end

  # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#72
  def attribute_method_patterns; end

  # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#72
  def attribute_method_patterns?; end

  # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#13
  def automatic_scope_inversing; end

  # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#13
  def automatic_scope_inversing?; end

  # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#14
  def automatically_invert_plural_associations; end

  # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#14
  def automatically_invert_plural_associations?; end

  # source://activerecord/7.2.2.1/lib/active_record/integration.rb#16
  def cache_timestamp_format; end

  # source://activerecord/7.2.2.1/lib/active_record/integration.rb#16
  def cache_timestamp_format?; end

  # source://activerecord/7.2.2.1/lib/active_record/integration.rb#24
  def cache_versioning; end

  # source://activerecord/7.2.2.1/lib/active_record/integration.rb#24
  def cache_versioning?; end

  # source://activerecord/7.2.2.1/lib/active_record/integration.rb#32
  def collection_cache_versioning; end

  # source://activerecord/7.2.2.1/lib/active_record/integration.rb#32
  def collection_cache_versioning?; end

  # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#183
  def column_for_attribute(name, &_arg1); end

  # source://activerecord/7.2.2.1/lib/active_record/counter_cache.rb#10
  def counter_cached_association_names; end

  # source://activerecord/7.2.2.1/lib/active_record/counter_cache.rb#10
  def counter_cached_association_names?; end

  # source://activerecord/7.2.2.1/lib/active_record/core.rb#97
  def default_connection_handler; end

  # source://activerecord/7.2.2.1/lib/active_record/core.rb#97
  def default_connection_handler?; end

  # source://activerecord/7.2.2.1/lib/active_record/core.rb#99
  def default_role; end

  # source://activerecord/7.2.2.1/lib/active_record/core.rb#99
  def default_role?; end

  # source://activerecord/7.2.2.1/lib/active_record/scoping/default.rb#20
  def default_scope_override; end

  # source://activerecord/7.2.2.1/lib/active_record/scoping/default.rb#19
  def default_scopes; end

  # source://activerecord/7.2.2.1/lib/active_record/core.rb#101
  def default_shard; end

  # source://activerecord/7.2.2.1/lib/active_record/core.rb#101
  def default_shard?; end

  # source://activerecord/7.2.2.1/lib/active_record/enum.rb#167
  def defined_enums; end

  # source://activerecord/7.2.2.1/lib/active_record/enum.rb#167
  def defined_enums?; end

  # source://activerecord/7.2.2.1/lib/active_record/core.rb#47
  def destroy_association_async_batch_size; end

  # source://activerecord/7.2.2.1/lib/active_record/core.rb#37
  def destroy_association_async_job(&_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes; end

  # source://activerecord/7.2.2.1/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes=(_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes?; end

  # source://activemodel/7.2.2.1/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.2.2.1/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activerecord/7.2.2.1/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically; end

  # source://activerecord/7.2.2.1/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically?; end

  # source://activerecord/7.2.2.1/lib/active_record/core.rb#22
  def logger; end

  # source://activerecord/7.2.2.1/lib/active_record/core.rb#22
  def logger?; end

  # source://activemodel/7.2.2.1/lib/active_model/naming.rb#255
  def model_name(&_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options; end

  # source://activerecord/7.2.2.1/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options?; end

  # source://activerecord/7.2.2.1/lib/active_record/normalization.rb#8
  def normalized_attributes; end

  # source://activerecord/7.2.2.1/lib/active_record/normalization.rb#8
  def normalized_attributes=(_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/normalization.rb#8
  def normalized_attributes?; end

  # source://activemodel/7.2.2.1/lib/active_model/conversion.rb#32
  def param_delimiter=(_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/dirty.rb#50
  def partial_inserts; end

  # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/dirty.rb#50
  def partial_inserts?; end

  # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/dirty.rb#49
  def partial_updates; end

  # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/dirty.rb#49
  def partial_updates?; end

  # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#168
  def pluralize_table_names; end

  # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#168
  def pluralize_table_names?; end

  # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#163
  def primary_key_prefix_type; end

  # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#163
  def primary_key_prefix_type?; end

  # source://activerecord/7.2.2.1/lib/active_record/timestamp.rb#47
  def record_timestamps; end

  # source://activerecord/7.2.2.1/lib/active_record/timestamp.rb#47
  def record_timestamps=(_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/timestamp.rb#47
  def record_timestamps?; end

  # source://activerecord/7.2.2.1/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret; end

  # source://activerecord/7.2.2.1/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret?; end

  # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes; end

  # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes?; end

  # source://activerecord/7.2.2.1/lib/active_record/inheritance.rb#43
  def store_full_class_name; end

  # source://activerecord/7.2.2.1/lib/active_record/inheritance.rb#43
  def store_full_class_name?; end

  # source://activerecord/7.2.2.1/lib/active_record/inheritance.rb#47
  def store_full_sti_class; end

  # source://activerecord/7.2.2.1/lib/active_record/inheritance.rb#47
  def store_full_sti_class?; end

  # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#164
  def table_name_prefix; end

  # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#164
  def table_name_prefix?; end

  # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#165
  def table_name_suffix; end

  # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#165
  def table_name_suffix?; end

  # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes; end

  # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes?; end

  # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types; end

  # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types?; end

  # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#183
  def type_for_attribute(*_arg0, **_arg1, &_arg2); end

  # source://activemodel/7.2.2.1/lib/active_model/validations.rb#67
  def validation_context; end

  private

  # source://activemodel/7.2.2.1/lib/active_model/validations.rb#67
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activerecord/7.2.2.1/lib/active_record/readonly_attributes.rb#11
    def _attr_readonly; end

    # source://activerecord/7.2.2.1/lib/active_record/readonly_attributes.rb#11
    def _attr_readonly=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/readonly_attributes.rb#11
    def _attr_readonly?; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _before_commit_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _before_commit_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _commit_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _commit_callbacks=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/counter_cache.rb#9
    def _counter_cache_columns; end

    # source://activerecord/7.2.2.1/lib/active_record/counter_cache.rb#9
    def _counter_cache_columns=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/counter_cache.rb#9
    def _counter_cache_columns?; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _create_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _create_callbacks=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#24
    def _destroy_association_async_job; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#24
    def _destroy_association_async_job=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#24
    def _destroy_association_async_job?; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _destroy_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _destroy_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _find_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _find_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _initialize_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _initialize_callbacks=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#11
    def _reflections=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#11
    def _reflections?; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _rollback_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _rollback_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _save_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _save_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _touch_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _touch_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _update_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _update_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _validate_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _validate_callbacks=(value); end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#916
    def _validation_callbacks; end

    # source://activesupport/7.2.2.1/lib/active_support/callbacks.rb#920
    def _validation_callbacks=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
    def _validators; end

    # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
    def _validators=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/validations.rb#71
    def _validators?; end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#12
    def aggregate_reflections; end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#12
    def aggregate_reflections=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#12
    def aggregate_reflections?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#120
    def application_record_class?; end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#140
    def asynchronous_queries_session; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#144
    def asynchronous_queries_tracker; end

    # source://activestorage/7.2.2.1/lib/active_storage/reflection.rb#53
    def attachment_reflections; end

    # source://activestorage/7.2.2.1/lib/active_storage/reflection.rb#53
    def attachment_reflections=(value); end

    # source://activestorage/7.2.2.1/lib/active_storage/reflection.rb#53
    def attachment_reflections?; end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#71
    def attribute_aliases; end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#71
    def attribute_aliases=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#71
    def attribute_aliases?; end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#72
    def attribute_method_patterns; end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#72
    def attribute_method_patterns=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/attribute_methods.rb#72
    def attribute_method_patterns?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#118
    def attributes_for_inspect; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#118
    def attributes_for_inspect=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#118
    def attributes_for_inspect?; end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#13
    def automatic_scope_inversing; end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#13
    def automatic_scope_inversing=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#13
    def automatic_scope_inversing?; end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#14
    def automatically_invert_plural_associations; end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#14
    def automatically_invert_plural_associations=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/reflection.rb#14
    def automatically_invert_plural_associations?; end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/7.2.2.1/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#89
    def belongs_to_required_by_default; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#89
    def belongs_to_required_by_default=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#89
    def belongs_to_required_by_default?; end

    # source://activerecord/7.2.2.1/lib/active_record/integration.rb#16
    def cache_timestamp_format; end

    # source://activerecord/7.2.2.1/lib/active_record/integration.rb#16
    def cache_timestamp_format=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/integration.rb#16
    def cache_timestamp_format?; end

    # source://activerecord/7.2.2.1/lib/active_record/integration.rb#24
    def cache_versioning; end

    # source://activerecord/7.2.2.1/lib/active_record/integration.rb#24
    def cache_versioning=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/integration.rb#24
    def cache_versioning?; end

    # source://activerecord/7.2.2.1/lib/active_record/integration.rb#32
    def collection_cache_versioning; end

    # source://activerecord/7.2.2.1/lib/active_record/integration.rb#32
    def collection_cache_versioning=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/integration.rb#32
    def collection_cache_versioning?; end

    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#77
    def configurations; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#71
    def configurations=(config); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#204
    def connected_to_stack; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#218
    def connection_class; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#214
    def connection_class=(b); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#222
    def connection_class?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#226
    def connection_class_for_self; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#132
    def connection_handler; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#136
    def connection_handler=(handler); end

    # source://activerecord/7.2.2.1/lib/active_record/counter_cache.rb#10
    def counter_cached_association_names; end

    # source://activerecord/7.2.2.1/lib/active_record/counter_cache.rb#10
    def counter_cached_association_names=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/counter_cache.rb#10
    def counter_cached_association_names?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#195
    def current_preventing_writes; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#158
    def current_role; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#176
    def current_shard; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/serialization.rb#20
    def default_column_serializer; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/serialization.rb#20
    def default_column_serializer=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/serialization.rb#20
    def default_column_serializer?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#97
    def default_connection_handler; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#97
    def default_connection_handler=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#97
    def default_connection_handler?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#99
    def default_role; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#99
    def default_role=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#99
    def default_role?; end

    # source://activerecord/7.2.2.1/lib/active_record/scoping/default.rb#20
    def default_scope_override; end

    # source://activerecord/7.2.2.1/lib/active_record/scoping/default.rb#20
    def default_scope_override=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/scoping/default.rb#19
    def default_scopes; end

    # source://activerecord/7.2.2.1/lib/active_record/scoping/default.rb#19
    def default_scopes=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#101
    def default_shard; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#101
    def default_shard=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#101
    def default_shard?; end

    # source://activerecord/7.2.2.1/lib/active_record/enum.rb#167
    def defined_enums; end

    # source://activerecord/7.2.2.1/lib/active_record/enum.rb#167
    def defined_enums=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/enum.rb#167
    def defined_enums?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#47
    def destroy_association_async_batch_size; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#47
    def destroy_association_async_batch_size=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#27
    def destroy_association_async_job; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#24
    def destroy_association_async_job=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes; end

    # source://activerecord/7.2.2.1/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#87
    def enumerate_columns_in_select_statements; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#87
    def enumerate_columns_in_select_statements=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#87
    def enumerate_columns_in_select_statements?; end

    # source://activerecord/7.2.2.1/lib/active_record/token_for.rb#11
    def generated_token_verifier; end

    # source://activerecord/7.2.2.1/lib/active_record/token_for.rb#11
    def generated_token_verifier=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#93
    def has_many_inversing; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#93
    def has_many_inversing=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#93
    def has_many_inversing?; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#170
    def immutable_strings_by_default; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#170
    def immutable_strings_by_default=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#170
    def immutable_strings_by_default?; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#169
    def implicit_order_column; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#169
    def implicit_order_column=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#169
    def implicit_order_column?; end

    # source://activemodel/7.2.2.1/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.2.2.1/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#172
    def inheritance_column; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#326
    def inheritance_column=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#172
    def inheritance_column?; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#167
    def internal_metadata_table_name; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#167
    def internal_metadata_table_name=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#167
    def internal_metadata_table_name?; end

    # source://activerecord/7.2.2.1/lib/active_record/store.rb#101
    def local_stored_attributes; end

    # source://activerecord/7.2.2.1/lib/active_record/store.rb#101
    def local_stored_attributes=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically; end

    # source://activerecord/7.2.2.1/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#22
    def logger; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#22
    def logger=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#22
    def logger?; end

    # source://activerecord/7.2.2.1/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord/7.2.2.1/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options?; end

    # source://activerecord/7.2.2.1/lib/active_record/normalization.rb#8
    def normalized_attributes; end

    # source://activerecord/7.2.2.1/lib/active_record/normalization.rb#8
    def normalized_attributes=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/normalization.rb#8
    def normalized_attributes?; end

    # source://activemodel/7.2.2.1/lib/active_model/conversion.rb#32
    def param_delimiter; end

    # source://activemodel/7.2.2.1/lib/active_model/conversion.rb#32
    def param_delimiter=(value); end

    # source://activemodel/7.2.2.1/lib/active_model/conversion.rb#32
    def param_delimiter?; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/dirty.rb#50
    def partial_inserts; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/dirty.rb#50
    def partial_inserts=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/dirty.rb#50
    def partial_inserts?; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/dirty.rb#49
    def partial_updates; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/dirty.rb#49
    def partial_updates=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/dirty.rb#49
    def partial_updates?; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#168
    def pluralize_table_names; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#168
    def pluralize_table_names=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#168
    def pluralize_table_names?; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#163
    def primary_key_prefix_type; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#163
    def primary_key_prefix_type=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#163
    def primary_key_prefix_type?; end

    # source://activerecord/7.2.2.1/lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord/7.2.2.1/lib/active_record/timestamp.rb#47
    def record_timestamps=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/timestamp.rb#47
    def record_timestamps?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#95
    def run_commit_callbacks_on_first_saved_instances_in_transaction; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#95
    def run_commit_callbacks_on_first_saved_instances_in_transaction=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#95
    def run_commit_callbacks_on_first_saved_instances_in_transaction?; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#166
    def schema_migrations_table_name; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#166
    def schema_migrations_table_name=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#166
    def schema_migrations_table_name?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#103
    def shard_selector; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#103
    def shard_selector=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#103
    def shard_selector?; end

    # source://activerecord/7.2.2.1/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret; end

    # source://activerecord/7.2.2.1/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret?; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes?; end

    # source://activerecord/7.2.2.1/lib/active_record/inheritance.rb#43
    def store_full_class_name; end

    # source://activerecord/7.2.2.1/lib/active_record/inheritance.rb#43
    def store_full_class_name=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/inheritance.rb#43
    def store_full_class_name?; end

    # source://activerecord/7.2.2.1/lib/active_record/inheritance.rb#47
    def store_full_sti_class; end

    # source://activerecord/7.2.2.1/lib/active_record/inheritance.rb#47
    def store_full_sti_class=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/inheritance.rb#47
    def store_full_sti_class?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#91
    def strict_loading_by_default; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#91
    def strict_loading_by_default=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#91
    def strict_loading_by_default?; end

    # source://activerecord/7.2.2.1/lib/active_record/core.rb#241
    def strict_loading_violation!(owner:, reflection:); end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#164
    def table_name_prefix; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#164
    def table_name_prefix=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#164
    def table_name_prefix?; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#165
    def table_name_suffix; end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#165
    def table_name_suffix=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#165
    def table_name_suffix?; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes?; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types; end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types?; end

    # source://activerecord/7.2.2.1/lib/active_record/token_for.rb#10
    def token_definitions; end

    # source://activerecord/7.2.2.1/lib/active_record/token_for.rb#10
    def token_definitions=(value); end

    private

    # source://activerecord/7.2.2.1/lib/active_record/model_schema.rb#172
    def _inheritance_column=(value); end
  end
end

module ActiveRecord::Coders; end

class ActiveRecord::Coders::ColumnSerializer
  # source://activerecord/7.2.2.1/lib/active_record/coders/column_serializer.rb#9
  def initialize(attr_name, coder, object_class = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/coders/column_serializer.rb#46
  def assert_valid_value(object, action:); end

  # source://activerecord/7.2.2.1/lib/active_record/coders/column_serializer.rb#7
  def coder; end

  # source://activerecord/7.2.2.1/lib/active_record/coders/column_serializer.rb#22
  def dump(object); end

  # source://activerecord/7.2.2.1/lib/active_record/coders/column_serializer.rb#16
  def init_with(coder); end

  # source://activerecord/7.2.2.1/lib/active_record/coders/column_serializer.rb#29
  def load(payload); end

  # source://activerecord/7.2.2.1/lib/active_record/coders/column_serializer.rb#6
  def object_class; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/coders/column_serializer.rb#54
  def check_arity_of_constructor; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Coders::YAMLColumn < ::ActiveRecord::Coders::ColumnSerializer
  # source://activerecord/7.2.2.1/lib/active_record/coders/yaml_column.rb#59
  def initialize(attr_name, object_class = T.unsafe(nil), permitted_classes: T.unsafe(nil), unsafe_load: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/coders/yaml_column.rb#77
  def coder; end

  # source://activerecord/7.2.2.1/lib/active_record/coders/yaml_column.rb#68
  def init_with(coder); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/coders/yaml_column.rb#88
  def check_arity_of_constructor; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Coders::YAMLColumn::SafeCoder
  # source://activerecord/7.2.2.1/lib/active_record/coders/yaml_column.rb#9
  def initialize(permitted_classes: T.unsafe(nil), unsafe_load: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/coders/yaml_column.rb#15
  def dump(object); end

  # source://activerecord/7.2.2.1/lib/active_record/coders/yaml_column.rb#33
  def load(payload); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::DatabaseConfigurations
  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#73
  def initialize(configurations = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#27
  def any?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#150
  def blank?; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#98
  def configs_for(env_name: T.unsafe(nil), name: T.unsafe(nil), config_key: T.unsafe(nil), include_hidden: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#26
  def configurations; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#150
  def empty?; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#127
  def find_db_config(env); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#142
  def primary?(name); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#174
  def resolve(config); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#200
  def build_configs(configs); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#239
  def build_configuration_sentence; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#273
  def build_db_config_from_hash(env_name, name, config); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#252
  def build_db_config_from_raw_config(env_name, name, config); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#263
  def build_db_config_from_string(env_name, name, config); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#188
  def default_env; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#192
  def env_with_configs(env = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#295
  def environment_url_config(env, name, config); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#302
  def environment_value_for(name); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#286
  def merge_db_environment_variables(current_env, configs); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#225
  def resolve_symbol_connection(name); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#219
  def walk_configs(env_name, config); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#29
    def db_config_handlers; end

    # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#29
    def db_config_handlers=(_arg0); end

    # source://activerecord/7.2.2.1/lib/active_record/database_configurations.rb#61
    def register_db_config_handler(&block); end
  end
end

class ActiveRecord::DatabaseConfigurations::ConnectionUrlResolver
  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/connection_url_resolver.rb#25
  def initialize(url); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/connection_url_resolver.rb#38
  def to_hash; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/connection_url_resolver.rb#89
  def database_from_path; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/connection_url_resolver.rb#60
  def query_hash; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/connection_url_resolver.rb#64
  def raw_config; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/connection_url_resolver.rb#82
  def resolved_adapter; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/connection_url_resolver.rb#45
  def uri; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/connection_url_resolver.rb#47
  def uri_parser; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::DatabaseConfigurations::DatabaseConfig
  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#11
  def initialize(env_name, name); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#43
  def _database=(database); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#47
  def adapter; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#17
  def adapter_class; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#71
  def checkout_timeout; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#39
  def database; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#9
  def env_name; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#91
  def for_current_env?; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#35
  def host; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#79
  def idle_timeout; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#21
  def inspect; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#63
  def max_queue; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#59
  def max_threads; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#87
  def migrations_paths; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#55
  def min_threads; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#9
  def name; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#25
  def new_connection; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#51
  def pool; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#67
  def query_cache; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#75
  def reaping_frequency; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#83
  def replica?; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#95
  def schema_cache_path; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#99
  def use_metadata_table?; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/database_config.rb#29
  def validate!; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::DatabaseConfigurations::HashConfig < ::ActiveRecord::DatabaseConfigurations::DatabaseConfig
  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#38
  def initialize(env_name, name, configuration_hash); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#68
  def _database=(database); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#107
  def adapter; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#92
  def checkout_timeout; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#23
  def configuration_hash; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#64
  def database; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#153
  def database_tasks?; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#117
  def default_schema_cache_path(db_dir = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#56
  def host; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#102
  def idle_timeout; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#125
  def lazy_schema_cache_path; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#88
  def max_queue; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#80
  def max_threads; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#52
  def migrations_paths; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#76
  def min_threads; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#72
  def pool; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#129
  def primary?; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#84
  def query_cache; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#98
  def reaping_frequency; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#46
  def replica?; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#113
  def schema_cache_path; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#141
  def schema_dump(format = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#60
  def socket; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#157
  def use_metadata_table?; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/hash_config.rb#162
  def schema_file_type(format); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::DatabaseConfigurations::InvalidConfigurationError < ::StandardError
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::DatabaseConfigurations::UrlConfig < ::ActiveRecord::DatabaseConfigurations::HashConfig
  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/url_config.rb#40
  def initialize(env_name, name, url, configuration_hash = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/url_config.rb#25
  def url; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/url_config.rb#69
  def build_url_hash; end

  # source://activerecord/7.2.2.1/lib/active_record/database_configurations/url_config.rb#61
  def to_boolean!(configuration_hash, key); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::DestroyAssociationAsyncError < ::StandardError
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::DestroyAssociationAsyncJob < ::ActiveJob::Base
  # source://activerecord/7.2.2.1/lib/active_record/destroy_association_async_job.rb#15
  def perform(owner_model_name: T.unsafe(nil), owner_id: T.unsafe(nil), association_class: T.unsafe(nil), association_ids: T.unsafe(nil), association_primary_key_column: T.unsafe(nil), ensuring_owner_was_method: T.unsafe(nil)); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/destroy_association_async_job.rb#34
  def owner_destroyed?(owner, ensuring_owner_was_method); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activejob/7.2.2.1/lib/active_job/queue_name.rb#55
    def queue_name; end

    # source://activesupport/7.2.2.1/lib/active_support/rescuable.rb#15
    def rescue_handlers; end
  end
end

class ActiveRecord::DisableJoinsAssociationRelation < ::ActiveRecord::Relation
  # source://activerecord/7.2.2.1/lib/active_record/disable_joins_association_relation.rb#7
  def initialize(klass, key, ids); end

  # source://activerecord/7.2.2.1/lib/active_record/disable_joins_association_relation.rb#17
  def first(limit = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/disable_joins_association_relation.rb#5
  def ids; end

  # source://activerecord/7.2.2.1/lib/active_record/disable_joins_association_relation.rb#5
  def key; end

  # source://activerecord/7.2.2.1/lib/active_record/disable_joins_association_relation.rb#13
  def limit(value); end

  # source://activerecord/7.2.2.1/lib/active_record/disable_joins_association_relation.rb#25
  def load; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::ExplainRegistry
  # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#24
  def initialize; end

  # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#21
  def collect; end

  # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#21
  def collect=(_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#28
  def collect?; end

  # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#22
  def queries; end

  # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#32
  def reset; end

  class << self
    # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#13
    def collect(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#13
    def collect=(arg); end

    # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#13
    def collect?(*_arg0, **_arg1, &_arg2); end

    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#13
    def queries(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#13
    def reset(*_arg0, **_arg1, &_arg2); end

    private

    # source://activerecord/7.2.2.1/lib/active_record/explain_registry.rb#16
    def instance; end
  end
end

class ActiveRecord::ExplainSubscriber
  # source://activerecord/7.2.2.1/lib/active_record/explain_subscriber.rb#12
  def finish(name, id, payload); end

  # source://activerecord/7.2.2.1/lib/active_record/explain_subscriber.rb#25
  def ignore_payload?(payload); end

  # source://activerecord/7.2.2.1/lib/active_record/explain_subscriber.rb#8
  def start(name, id, payload); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Fixture
  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#819
  def initialize(fixture, model_class); end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#832
  def [](key); end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#824
  def class_name; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#828
  def each(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#838
  def find; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#817
  def fixture; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#817
  def model_class; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#817
  def to_hash; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Fixture::FixtureError < ::StandardError
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Fixture::FormatError < ::ActiveRecord::Fixture::FixtureError
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::FixtureClassNotFound < ::ActiveRecord::ActiveRecordError
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::FixtureSet
  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#715
  def initialize(_, name, class_name, path, config = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#726
  def [](x); end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#730
  def []=(k, v); end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#543
  def all_loaded_fixtures; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#543
  def all_loaded_fixtures=(val); end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#713
  def config; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#734
  def each(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#713
  def fixtures; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#713
  def ignored_fixtures; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#713
  def model_class; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#713
  def name; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#738
  def size; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#713
  def table_name; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#744
  def table_rows; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#802
  def default_fixture_model_class; end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#764
  def ignored_fixtures=(base); end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#756
  def model_class=(class_name); end

  # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#783
  def read_fixture_files(path); end

  class << self
    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#543
    def all_loaded_fixtures; end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#543
    def all_loaded_fixtures=(val); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#578
    def cache_fixtures(connection_pool, fixtures_map); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#562
    def cache_for_connection_pool(connection_pool); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#570
    def cached_fixtures(connection_pool, keys_to_fetch = T.unsafe(nil)); end

    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#635
    def composite_identify(label, key); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#643
    def context_class; end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#597
    def create_fixtures(fixtures_directories, fixture_set_names, class_names = T.unsafe(nil), config = T.unsafe(nil)); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#546
    def default_fixture_model_name(fixture_set_name, config = T.unsafe(nil)); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#552
    def default_fixture_table_name(fixture_set_name, config = T.unsafe(nil)); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#566
    def fixture_is_cached?(connection_pool, table_name); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#621
    def identify(label, column_type = T.unsafe(nil)); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#591
    def instantiate_all_loaded_fixtures(object, load_instances = T.unsafe(nil)); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#582
    def instantiate_fixtures(object, fixture_set, load_instances = T.unsafe(nil)); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#558
    def reset_cache; end

    private

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#698
    def check_all_foreign_keys_valid!(conn); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#667
    def insert(fixture_sets, connection_pool); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#648
    def read_and_insert(fixtures_directories, fixture_files, class_names, connection_pool); end

    # source://activerecord/7.2.2.1/lib/active_record/fixtures.rb#708
    def update_all_loaded_fixtures(fixtures_map); end
  end
end

class ActiveRecord::FixtureSet::File
  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/file.rb#19
  def initialize(file); end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/file.rb#23
  def each(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/file.rb#31
  def ignored_fixtures; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/file.rb#27
  def model_class; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/file.rb#40
  def config_row; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/file.rb#51
  def raw_rows; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/file.rb#36
  def rows; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/file.rb#76
  def validate(data); end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/file.rb#61
  def validate_config_row(data); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/fixture_set/file.rb#14
    def open(file); end
  end
end

class ActiveRecord::FixtureSet::ModelMetadata
  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/model_metadata.rb#6
  def initialize(model_class); end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/model_metadata.rb#29
  def column_names; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/model_metadata.rb#18
  def column_type(column_name); end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/model_metadata.rb#25
  def has_column?(column_name); end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/model_metadata.rb#37
  def inheritance_column_name; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/model_metadata.rb#10
  def primary_key_name; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/model_metadata.rb#14
  def primary_key_type; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/model_metadata.rb#33
  def timestamp_column_names; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::FixtureSet::RenderContext
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/fixture_set/render_context.rb#8
    def create_subclass; end
  end
end

class ActiveRecord::FixtureSet::TableRow
  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#65
  def initialize(fixture, table_rows:, label:, now:); end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#73
  def to_hash; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#186
  def add_join_records(association); end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#136
  def column_defined?(col); end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#86
  def fill_row_model_attributes; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#103
  def fill_timestamps; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#127
  def generate_composite_primary_key; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#119
  def generate_primary_key; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#112
  def interpolate_label; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#82
  def model_class; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#78
  def model_metadata; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#95
  def reflection_class; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#140
  def resolve_enums; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#148
  def resolve_sti_reflections; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::FixtureSet::TableRow::HasManyThroughProxy < ::ActiveRecord::FixtureSet::TableRow::ReflectionProxy
  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#33
  def join_table; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#29
  def lhs_key; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#25
  def rhs_key; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#37
  def timestamp_column_names; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::FixtureSet::TableRow::PrimaryKeyError < ::StandardError
  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#43
  def initialize(label, association, value); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::FixtureSet::TableRow::ReflectionProxy
  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#7
  def initialize(association); end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#11
  def join_table; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#15
  def name; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_row.rb#19
  def primary_key_type; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::FixtureSet::TableRows
  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_rows.rb#9
  def initialize(table_name, model_class:, fixtures:); end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_rows.rb#21
  def model_class; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_rows.rb#27
  def model_metadata; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_rows.rb#21
  def tables; end

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_rows.rb#23
  def to_hash; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/fixture_set/table_rows.rb#32
  def build_table_rows_from(table_name, fixtures); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::FutureResult
  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#66
  def initialize(pool, *args, **kwargs); end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#94
  def cancel; end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#135
  def canceled?; end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#62
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#90
  def execute!(connection); end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#100
  def execute_or_skip; end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#64
  def lock_wait; end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#131
  def pending?; end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#118
  def result; end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#85
  def schedule!(session); end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#81
  def then(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#62
  def to_a(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#165
  def exec_query(connection, *args, **kwargs); end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#140
  def execute_or_wait; end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#157
  def execute_query(connection, async: T.unsafe(nil)); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#53
    def wrap(result); end
  end
end

class ActiveRecord::FutureResult::Canceled < ::ActiveRecord::ActiveRecordError
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::FutureResult::Complete
  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#9
  def initialize(result); end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#17
  def canceled?; end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#7
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#13
  def pending?; end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#6
  def result; end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#21
  def then(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#7
  def to_a(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::FutureResult::EventBuffer
  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#27
  def initialize(future_result, instrumenter); end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#42
  def flush; end

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#33
  def instrument(name, payload = T.unsafe(nil), &block); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::FutureResult::SelectAll < ::ActiveRecord::FutureResult
  private

  # source://activerecord/7.2.2.1/lib/active_record/future_result.rb#171
  def exec_query(*_arg0, **_arg1); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::InsertAll
  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#18
  def initialize(relation, connection, inserts, on_duplicate:, update_only: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#7
  def connection; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#48
  def execute; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#7
  def inserts; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#7
  def keys; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#92
  def keys_including_timestamps; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#73
  def map_key_with_value; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#7
  def model; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#8
  def on_duplicate; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#61
  def primary_keys; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#87
  def record_timestamps?; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#8
  def returning; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#65
  def skip_duplicates?; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#8
  def unique_by; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#57
  def updatable_columns; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#69
  def update_duplicates?; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#8
  def update_only; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#8
  def update_sql; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#129
  def configure_on_duplicate_update_logic; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#145
  def custom_update_sql_provided?; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#212
  def disallow_raw_sql!(value); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#173
  def ensure_valid_options_for_connection!; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#149
  def find_unique_index_for(unique_by); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#101
  def has_attribute_aliases?(attributes); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#197
  def readonly_columns; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#125
  def resolve_attribute_alias(attribute); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#114
  def resolve_attribute_aliases; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#105
  def resolve_sti; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#221
  def timestamps_for_create; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#192
  def to_sql; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#201
  def unique_by_columns; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#169
  def unique_indexes; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#206
  def verify_attributes(attributes); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#11
    def execute(relation, *_arg1, **_arg2, &_arg3); end
  end
end

class ActiveRecord::InsertAll::Builder
  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#230
  def initialize(insert_all); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#265
  def conflict_target; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#234
  def into; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#228
  def keys(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#228
  def keys_including_timestamps(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#226
  def model; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#289
  def raw_update_sql; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#289
  def raw_update_sql?; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#228
  def record_timestamps?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#249
  def returning; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#228
  def skip_duplicates?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#279
  def touch_model_timestamps_unless(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#275
  def updatable_columns; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#228
  def update_duplicates?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#238
  def values_list; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#302
  def columns_list; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#296
  def connection; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#306
  def extract_types_from_columns_on(table_name, keys:); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#315
  def format_columns(columns); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#296
  def insert_all; end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#323
  def quote_column(column); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#319
  def quote_columns(columns); end

  # source://activerecord/7.2.2.1/lib/active_record/insert_all.rb#298
  def touch_timestamp_attribute?(column_name); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::InternalMetadata
  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#18
  def initialize(pool); end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#47
  def [](key); end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#39
  def []=(key, value); end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#16
  def arel_table; end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#65
  def count; end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#85
  def create_table; end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#74
  def create_table_and_set_flags(environment, schema_sha1 = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#57
  def delete_all_entries; end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#99
  def drop_table; end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#35
  def enabled?; end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#23
  def primary_key; end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#107
  def table_exists?; end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#31
  def table_name; end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#27
  def value_key; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#130
  def create_entry(connection, key, value); end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#126
  def current_time(connection); end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#154
  def select_entry(connection, key); end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#142
  def update_entry(connection, key, new_value); end

  # source://activerecord/7.2.2.1/lib/active_record/internal_metadata.rb#112
  def update_or_create_entry(connection, key, value); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::InternalMetadata::NullInternalMetadata
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#7
  def backtrace_cleaner; end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#7
  def backtrace_cleaner=(_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#7
  def backtrace_cleaner?; end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#18
  def sql(event); end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#9
  def strict_loading_violation(event); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#80
  def colorize_payload_name(name, payload_name); end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#113
  def debug(progname = T.unsafe(nil), &block); end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#143
  def filter(name, value); end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#121
  def log_query_source; end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#109
  def logger; end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#130
  def query_source_location; end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#65
  def render_bind(attr, value); end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#88
  def sql_color(sql); end

  # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#61
  def type_casted_binds(casted_binds); end

  class << self
    # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#7
    def backtrace_cleaner; end

    # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#7
    def backtrace_cleaner=(value); end

    # source://activerecord/7.2.2.1/lib/active_record/log_subscriber.rb#7
    def backtrace_cleaner?; end

    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activesupport/7.2.2.1/lib/active_support/log_subscriber.rb#84
    def log_levels; end
  end
end

module ActiveRecord::Middleware; end

class ActiveRecord::Middleware::DatabaseSelector
  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector.rb#52
  def initialize(app, resolver_klass = T.unsafe(nil), context_klass = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector.rb#63
  def call(env); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector.rb#59
  def context_klass; end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector.rb#59
  def options; end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector.rb#59
  def resolver_klass; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector.rb#72
  def select_database(request, &blk); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver
  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#26
  def initialize(context, options = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#33
  def context; end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#33
  def delay; end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#33
  def instrumenter; end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#35
  def read(&blk); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#51
  def reading_request?(request); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#47
  def update_context(response); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#43
  def write(&blk); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#56
  def read_from_primary(&blk); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#78
  def read_from_primary?; end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#62
  def read_from_replica(&blk); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#82
  def send_to_replica_delay; end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#86
  def time_since_last_write_ok?; end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#68
  def write_to_primary; end

  class << self
    # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver.rb#22
    def call(context, options = T.unsafe(nil)); end

    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver/session.rb#28
  def initialize(session); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver/session.rb#34
  def last_write_timestamp; end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver/session.rb#42
  def save(response); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver/session.rb#32
  def session; end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver/session.rb#38
  def update_last_write_timestamp; end

  class << self
    # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver/session.rb#13
    def call(request); end

    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver/session.rb#19
    def convert_time_to_timestamp(time); end

    # source://activerecord/7.2.2.1/lib/active_record/middleware/database_selector/resolver/session.rb#24
    def convert_timestamp_to_time(timestamp); end
  end
end

class ActiveRecord::Middleware::ShardSelector
  # source://activerecord/7.2.2.1/lib/active_record/middleware/shard_selector.rb#32
  def initialize(app, resolver, options = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/shard_selector.rb#40
  def call(env); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/shard_selector.rb#38
  def options; end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/shard_selector.rb#38
  def resolver; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/middleware/shard_selector.rb#51
  def selected_shard(request); end

  # source://activerecord/7.2.2.1/lib/active_record/middleware/shard_selector.rb#55
  def set_shard(shard, &block); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::PredicateBuilder
  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#12
  def initialize(table); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#53
  def [](attr_name, value, operator = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#57
  def build(attribute, value, operator = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#67
  def build_bind_attribute(column_name, value); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#23
  def build_from_hash(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#49
  def register_handler(klass, handler); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#71
  def resolve_arel_attribute(table_name, column_name, &block); end

  protected

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#76
  def expand_from_hash(attributes, &block); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#150
  def convert_dot_notation_to_hash(attributes); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#140
  def grouping_queries(queries); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#172
  def handler_for(object); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#138
  def table; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder.rb#28
    def references(attributes); end
  end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/array_handler.rb#8
  def initialize(predicate_builder); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/array_handler.rb#12
  def call(attribute, value); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/array_handler.rb#39
  def predicate_builder; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::PredicateBuilder::AssociationQueryValue
  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/association_query_value.rb#6
  def initialize(associated_table, value); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/association_query_value.rb#11
  def queries; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/association_query_value.rb#23
  def associated_table; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/association_query_value.rb#59
  def convert_to_id(value); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/association_query_value.rb#25
  def ids; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/association_query_value.rb#55
  def polymorphic_clause?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/association_query_value.rb#47
  def polymorphic_name; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/association_query_value.rb#39
  def primary_key; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/association_query_value.rb#43
  def primary_type; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/association_query_value.rb#51
  def select_clause?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/association_query_value.rb#23
  def value; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::PredicateBuilder::BasicObjectHandler
  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/basic_object_handler.rb#6
  def initialize(predicate_builder); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/basic_object_handler.rb#10
  def call(attribute, value); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/basic_object_handler.rb#16
  def predicate_builder; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#6
  def initialize(associated_table, values); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#11
  def queries; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#23
  def associated_table; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#44
  def convert_to_id(value); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#36
  def klass(value); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#32
  def primary_key(value); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#25
  def type_to_ids_mapping; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#23
  def values; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::PredicateBuilder::RangeHandler
  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/range_handler.rb#8
  def initialize(predicate_builder); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/range_handler.rb#12
  def call(attribute, value); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/range_handler.rb#19
  def predicate_builder; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds < ::Struct
  def begin; end
  def begin=(_); end
  def end; end
  def end=(_); end
  def exclude_end?; end

  class << self
    def [](*_arg0); end

    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::PredicateBuilder::RelationHandler
  # source://activerecord/7.2.2.1/lib/active_record/relation/predicate_builder/relation_handler.rb#6
  def call(attribute, value); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::QueryCache
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/query_cache.rb#44
    def complete(pools); end

    # source://activerecord/7.2.2.1/lib/active_record/query_cache.rb#51
    def install_executor_hooks(executor = T.unsafe(nil)); end

    # source://activerecord/7.2.2.1/lib/active_record/query_cache.rb#37
    def run; end
  end
end

class ActiveRecord::ReadonlyAttributeError < ::ActiveRecord::ActiveRecordError
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::RecordInvalid < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.2.2.1/lib/active_record/validations.rb#18
  def initialize(record = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/validations.rb#16
  def record; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://comma//lib/comma/relation.rb#4
class ActiveRecord::Relation
  include ::ActiveModel::ForbiddenAttributesProtection

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#77
  def initialize(klass, table: T.unsafe(nil), predicate_builder: T.unsafe(nil), values: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1239
  def ==(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#545
  def _exec_scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1289
  def alias_tracker(joins = T.unsafe(nil), aliases = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#384
  def any?(*args); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#95
  def bind_attribute(name, value); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1260
  def blank?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#118
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#431
  def cache_key(timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#512
  def cache_key_with_version; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#458
  def cache_version(timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#147
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#162
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#266
  def create_or_find_by(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#281
  def create_or_find_by!(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1050
  def delete(id_or_array); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1004
  def delete_all; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1112
  def delete_by(*args); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1076
  def destroy(id); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#982
  def destroy_all; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1099
  def destroy_by(*args); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1224
  def eager_loading?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#355
  def empty?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1281
  def empty_scope?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#341
  def encode_with(coder); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#325
  def explain(*options); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#224
  def find_or_create_by(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#231
  def find_or_create_by!(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#295
  def find_or_initialize_by(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#171
  def first_or_create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#175
  def first_or_create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#179
  def first_or_initialize(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1285
  def has_limit_or_offset?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#637
  def insert(attributes, returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#726
  def insert!(attributes, returning: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#716
  def insert_all(attributes, returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#783
  def insert_all!(attributes, returning: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1272
  def inspect; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1234
  def joined_includes_values; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#71
  def klass; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1165
  def load(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1134
  def load_async; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#71
  def loaded; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#71
  def loaded?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/query_methods.rb#171
  def locked?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#406
  def many?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#71
  def model; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#118
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#371
  def none?(*args); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#397
  def one?(*args); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#71
  def predicate_builder; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1303
  def preload_associations(records); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1250
  def pretty_print(pp); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#335
  def records; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1175
  def reload; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1180
  def reset; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1155
  def scheduled?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1217
  def scope_for_create; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#534
  def scoping(all_queries: T.unsafe(nil), &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#346
  def size; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#72
  def skip_preloading_value; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#72
  def skip_preloading_value=(_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#71
  def table; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#330
  def to_a; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#330
  def to_ary; end

  # source://comma//lib/comma/relation.rb#5
  def to_comma(style = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1196
  def to_sql; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#962
  def touch_all(*names, time: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#614
  def update(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#622
  def update!(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#581
  def update_all(updates); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#919
  def update_counters(counters); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#793
  def upsert(attributes, **kwargs); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#903
  def upsert_all(attributes, on_duplicate: T.unsafe(nil), update_only: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1264
  def values; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1268
  def values_for_queries; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1213
  def where_values_hash(relation_table_name = T.unsafe(nil)); end

  protected

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1313
  def load_records(records); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1339
  def _create(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1343
  def _create!(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1378
  def _increment_attribute(attribute, value = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1335
  def _new(attributes, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1347
  def _scoping(scope, registry, all_queries = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1363
  def _substitute_values(values); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1319
  def already_in_scope?(registry); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#436
  def compute_cache_key(timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#465
  def compute_cache_version(timestamp_column); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1327
  def current_scope_restoring_block(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1405
  def exec_main_query(async: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1385
  def exec_queries(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1323
  def global_scope?(registry); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#90
  def initialize_copy(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1437
  def instantiate_records(rows, &block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1480
  def limited_count; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1456
  def references_eager_loaded_tables?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1448
  def skip_query_cache_if_necessary(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1473
  def tables_in_string(string); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Relation::ExplainProxy
  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#7
  def initialize(relation, options); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#16
  def average(column_name); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#20
  def count(column_name = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#24
  def first(limit = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#12
  def inspect; end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#28
  def last(limit = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#32
  def maximum(column_name); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#36
  def minimum(column_name); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#40
  def pluck(*column_names); end

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#44
  def sum(identity_or_column = T.unsafe(nil)); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/relation.rb#49
  def exec_explain(&block); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Relation::FromClause
  # source://activerecord/7.2.2.1/lib/active_record/relation/from_clause.rb#8
  def initialize(value, name); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/from_clause.rb#21
  def ==(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/from_clause.rb#17
  def empty?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/from_clause.rb#13
  def merge(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/from_clause.rb#6
  def name; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/from_clause.rb#6
  def value; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/relation/from_clause.rb#25
    def empty; end
  end
end

class ActiveRecord::Relation::HashMerger
  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#10
  def initialize(relation, hash); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#8
  def hash; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#17
  def merge; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#25
  def other; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#8
  def relation; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Relation::Merger
  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#46
  def initialize(relation, other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#58
  def merge; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#44
  def other; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#44
  def relation; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#44
  def values; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#176
  def merge_clauses; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#117
  def merge_joins; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#155
  def merge_multi_values; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#136
  def merge_outer_joins; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#96
  def merge_preloads; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#84
  def merge_select_values; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#168
  def merge_single_values; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/merger.rb#186
  def replace_from_clause?; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Relation::QueryAttribute < ::ActiveModel::Attribute
  # source://activerecord/7.2.2.1/lib/active_record/relation/query_attribute.rb#8
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/query_attribute.rb#53
  def ==(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/query_attribute.rb#53
  def eql?(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/query_attribute.rb#58
  def hash; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/query_attribute.rb#42
  def infinite?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/query_attribute.rb#35
  def nil?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/query_attribute.rb#22
  def type_cast(value); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/query_attribute.rb#46
  def unboundable?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/query_attribute.rb#26
  def value_for_database; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/query_attribute.rb#31
  def with_cast_value(value); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/relation/query_attribute.rb#63
  def infinity?(value); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Relation::StrictLoadingScope
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1294
    def empty_scope?; end

    # source://activerecord/7.2.2.1/lib/active_record/relation.rb#1298
    def strict_loading_value; end
  end
end

class ActiveRecord::Relation::WhereClause
  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#10
  def initialize(predicates); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#14
  def +(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#18
  def -(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#75
  def ==(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#8
  def any?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#70
  def ast; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#99
  def contradiction?; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#8
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#75
  def eql?(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#32
  def except(*columns); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#110
  def extract_attributes; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#81
  def hash; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#85
  def invert; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#26
  def merge(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#36
  def or(other); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#61
  def to_h(table_name = T.unsafe(nil), equality_only: T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#22
  def |(other); end

  protected

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#117
  def predicates; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#119
  def referenced_columns; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#126
  def each_attributes; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#145
  def equalities(predicates, equality_only); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#159
  def equality_node?(node); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#174
  def except_predicates(columns); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#136
  def extract_attribute(node); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#209
  def extract_node_value(node); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#163
  def invert_predicate(node); end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#198
  def non_empty_predicates; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#187
  def predicates_with_wrapped_sql_literals; end

  # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#202
  def wrap_sql_literal(node); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/relation/where_clause.rb#95
    def empty; end
  end
end

class ActiveRecord::Result
  # source://activerecord/7.2.2.1/lib/active_record/result.rb#49
  def initialize(columns, rows, column_types = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#93
  def [](idx); end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#106
  def cancel; end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#110
  def cast_values(type_overrides = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#148
  def column_indexes; end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#39
  def column_types; end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#39
  def columns; end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#73
  def each(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#82
  def empty?; end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#143
  def freeze; end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#60
  def includes_column?(name); end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#98
  def last(n = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#65
  def length; end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#102
  def result; end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#39
  def rows; end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#87
  def to_a; end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#87
  def to_ary; end

  private

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#162
  def column_type(name, index, type_overrides); end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#170
  def hash_rows; end

  # source://activerecord/7.2.2.1/lib/active_record/result.rb#136
  def initialize_copy(other); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/result.rb#41
    def empty(async: T.unsafe(nil)); end
  end
end

class ActiveRecord::Schema < ::ActiveRecord::Migration::Current
  class << self
    # source://activerecord/7.2.2.1/lib/active_record/schema.rb#70
    def [](version); end

    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::SchemaDumper
  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#73
  def initialize(connection, options = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#29
  def chk_ignore_pattern; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#29
  def chk_ignore_pattern=(val); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#60
  def dump(stream); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#35
  def excl_ignore_pattern; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#35
  def excl_ignore_pattern=(val); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#23
  def fk_ignore_pattern; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#23
  def fk_ignore_pattern=(val); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#17
  def ignore_tables; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#17
  def ignore_tables=(val); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#41
  def unique_ignore_pattern; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#41
  def unique_ignore_pattern=(val); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#273
  def check_constraints_in_create(table, stream); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#91
  def define_params; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#118
  def extensions(stream); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#293
  def foreign_keys(table, stream); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#325
  def format_colspec(colspec); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#335
  def format_index_parts(options); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#331
  def format_options(options); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#85
  def formatted_version; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#95
  def header(stream); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#353
  def ignored?(table_name); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#255
  def index_parts(index); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#222
  def indexes(table, stream); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#234
  def indexes_in_create(table, stream); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#343
  def remove_prefix_and_suffix(table); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#126
  def schemas(stream); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#153
  def table(table, stream); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#71
  def table_name; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#71
  def table_name=(_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#129
  def tables(stream); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#113
  def trailer(stream); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#122
  def types(stream); end

  class << self
    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#29
    def chk_ignore_pattern; end

    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#29
    def chk_ignore_pattern=(val); end

    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#44
    def dump(pool = T.unsafe(nil), stream = T.unsafe(nil), config = T.unsafe(nil)); end

    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#35
    def excl_ignore_pattern; end

    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#35
    def excl_ignore_pattern=(val); end

    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#23
    def fk_ignore_pattern; end

    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#23
    def fk_ignore_pattern=(val); end

    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#17
    def ignore_tables; end

    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#17
    def ignore_tables=(val); end

    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#41
    def unique_ignore_pattern; end

    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#41
    def unique_ignore_pattern=(val); end

    private

    # source://activerecord/7.2.2.1/lib/active_record/schema_dumper.rb#52
    def generate_options(config); end

    def new(*_arg0); end
  end
end

class ActiveRecord::SchemaMigration
  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#14
  def initialize(pool); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#12
  def arel_table; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#90
  def count; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#52
  def create_table; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#19
  def create_version(version); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#36
  def delete_all_versions; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#27
  def delete_version(version); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#62
  def drop_table; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#86
  def integer_versions; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#68
  def normalize_migration_number(number); end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#72
  def normalized_versions; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#44
  def primary_key; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#99
  def table_exists?; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#48
  def table_name; end

  # source://activerecord/7.2.2.1/lib/active_record/schema_migration.rb#76
  def versions; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::SchemaMigration::NullSchemaMigration
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

module ActiveRecord::SecureToken
  mixes_in_class_methods ::ActiveRecord::SecureToken::ClassMethods
end

class ActiveRecord::SecureToken::MinimumLengthError < ::StandardError
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::StatementCache
  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#139
  def initialize(query_builder, bind_map, klass); end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#145
  def execute(params, connection, allow_retry: T.unsafe(nil), &block); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#162
  def bind_map; end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#162
  def klass; end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#162
  def query_builder; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#132
    def create(connection, callable = T.unsafe(nil), &block); end

    # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#101
    def partial_query(values); end

    # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#105
    def partial_query_collector; end

    # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#97
    def query(sql); end

    # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#155
    def unsupported_value?(value); end
  end
end

class ActiveRecord::StatementCache::BindMap
  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#114
  def initialize(bound_attributes); end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#125
  def bind(values); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::StatementCache::Params
  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#110
  def bind; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::StatementCache::PartialQuery < ::ActiveRecord::StatementCache::Query
  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#44
  def initialize(values); end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#51
  def sql_for(binds, connection); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::StatementCache::PartialQueryCollector
  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#67
  def initialize; end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#72
  def <<(str); end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#77
  def add_bind(obj); end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#83
  def add_binds(binds, proc_for_binds = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#65
  def preparable; end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#65
  def preparable=(_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#65
  def retryable; end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#65
  def retryable=(_arg0); end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#92
  def value; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::StatementCache::Query
  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#34
  def initialize(sql); end

  # source://activerecord/7.2.2.1/lib/active_record/statement_cache.rb#38
  def sql_for(binds, connection); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::StatementCache::Substitute
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::TableMetadata
  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#7
  def initialize(klass, arel_table, reflection = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#65
  def aggregated_with?(aggregation_name); end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#80
  def arel_table; end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#29
  def associated_table(table_name); end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#25
  def associated_with?(table_name); end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#21
  def has_column?(column_name); end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#5
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#5
  def join_foreign_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#5
  def join_primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#5
  def join_primary_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#53
  def polymorphic_association?; end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#57
  def polymorphic_name_association; end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#70
  def predicate_builder; end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#13
  def primary_key; end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#65
  def reflect_on_aggregation(aggregation_name); end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#61
  def through_association?; end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#17
  def type(column_name); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#83
  def klass; end

  # source://activerecord/7.2.2.1/lib/active_record/table_metadata.rb#83
  def reflection; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

module ActiveRecord::Tasks; end

class ActiveRecord::Tasks::DatabaseNotSupported < ::StandardError
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#12
  def initialize(db_config); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#34
  def charset; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#38
  def collation; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#17
  def create; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#23
  def drop; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#28
  def purge; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#42
  def structure_dump(filename, extra_flags); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#61
  def structure_load(filename, extra_flags); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#71
  def configuration_hash; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#81
  def configuration_hash_without_database; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#73
  def connection; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#85
  def creation_options; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#71
  def db_config; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#77
  def establish_connection(config = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#92
  def prepare_command_options; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#111
  def run_cmd(cmd, args, action); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#115
  def run_cmd_error(cmd, args, action); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/tasks/mysql_database_tasks.rb#8
    def using_database_configurations?; end
  end
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#16
  def initialize(db_config); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#32
  def charset; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#36
  def collation; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#21
  def create(connection_already_established = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#27
  def drop; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#40
  def purge; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#46
  def structure_dump(filename, extra_flags); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#80
  def structure_load(filename, extra_flags); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#88
  def configuration_hash; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#90
  def connection; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#88
  def db_config; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#98
  def encoding; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#94
  def establish_connection(config = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#106
  def psql_env; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#102
  def public_schema_config; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#130
  def remove_sql_header_comments(filename); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#119
  def run_cmd(cmd, args, action); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#123
  def run_cmd_error(cmd, args, action); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/tasks/postgresql_database_tasks.rb#12
    def using_database_configurations?; end
  end
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#10
  def initialize(db_config, root = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#40
  def charset; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#15
  def create; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#22
  def drop; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#31
  def purge; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#44
  def structure_dump(filename, extra_flags); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#60
  def structure_load(filename, extra_flags); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#68
  def connection; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#66
  def db_config; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#72
  def establish_connection(config = T.unsafe(nil)); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#66
  def root; end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#77
  def run_cmd(cmd, args, out); end

  # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#81
  def run_cmd_error(cmd, args); end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://activerecord/7.2.2.1/lib/active_record/tasks/sqlite_database_tasks.rb#6
    def using_database_configurations?; end
  end
end

class ActiveRecord::Transaction
  # source://activerecord/7.2.2.1/lib/active_record/transaction.rb#69
  def initialize(internal_transaction); end

  # source://activerecord/7.2.2.1/lib/active_record/transaction.rb#85
  def after_commit(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/transaction.rb#107
  def after_rollback(&block); end

  # source://activerecord/7.2.2.1/lib/active_record/transaction.rb#117
  def blank?; end

  # source://activerecord/7.2.2.1/lib/active_record/transaction.rb#117
  def closed?; end

  # source://activerecord/7.2.2.1/lib/active_record/transaction.rb#112
  def open?; end

  # source://activerecord/7.2.2.1/lib/active_record/transaction.rb#124
  def uuid; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

module ActiveRecord::TypeCaster; end

class ActiveRecord::TypeCaster::Connection
  # source://activerecord/7.2.2.1/lib/active_record/type_caster/connection.rb#6
  def initialize(klass, table_name); end

  # source://activerecord/7.2.2.1/lib/active_record/type_caster/connection.rb#11
  def type_cast_for_database(attr_name, value); end

  # source://activerecord/7.2.2.1/lib/active_record/type_caster/connection.rb#16
  def type_for_attribute(attr_name); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/type_caster/connection.rb#30
  def table_name; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::TypeCaster::Map
  # source://activerecord/7.2.2.1/lib/active_record/type_caster/map.rb#6
  def initialize(klass); end

  # source://activerecord/7.2.2.1/lib/active_record/type_caster/map.rb#10
  def type_cast_for_database(attr_name, value); end

  # source://activerecord/7.2.2.1/lib/active_record/type_caster/map.rb#15
  def type_for_attribute(name); end

  private

  # source://activerecord/7.2.2.1/lib/active_record/type_caster/map.rb#20
  def klass; end

  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

class ActiveRecord::TypeConflictError < ::StandardError
  class << self
    # source://comma//lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://comma//lib/comma/array.rb#3
class Array
  include ::Enumerable

  # source://comma//lib/comma/array.rb#4
  def to_comma(style = T.unsafe(nil)); end
end

# source://comma//lib/comma.rb#4
CSV_HANDLER = CSV

# source://comma//lib/comma.rb#6
module Comma; end

# source://comma//lib/comma.rb#7
Comma::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://comma//lib/comma/data_extractor.rb#6
class Comma::DataExtractor < ::Comma::Extractor
  # source://comma//lib/comma/data_extractor.rb#72
  def __static_column__(_header = T.unsafe(nil), &block); end

  # source://comma//lib/comma/data_extractor.rb#52
  def method_missing(sym, *args, &block); end
end

# source://comma//lib/comma/data_extractor.rb#31
class Comma::DataExtractor::ExtractValueFromAssociationOfInstance < ::Comma::DataExtractor::ExtractValueFromInstance
  # @return [ExtractValueFromAssociationOfInstance] a new instance of ExtractValueFromAssociationOfInstance
  #
  # source://comma//lib/comma/data_extractor.rb#32
  def initialize(instance, association_name); end

  private

  # source://comma//lib/comma/data_extractor.rb#39
  def extraction_object; end

  # source://comma//lib/comma/data_extractor.rb#43
  def null_association; end
end

# source://comma//lib/comma/data_extractor.rb#7
class Comma::DataExtractor::ExtractValueFromInstance
  # @return [ExtractValueFromInstance] a new instance of ExtractValueFromInstance
  #
  # source://comma//lib/comma/data_extractor.rb#8
  def initialize(instance); end

  # source://comma//lib/comma/data_extractor.rb#12
  def extract(sym, &block); end

  private

  # source://comma//lib/comma/data_extractor.rb#22
  def extract_value(method); end

  # source://comma//lib/comma/data_extractor.rb#26
  def extraction_object; end

  # source://comma//lib/comma/data_extractor.rb#18
  def yield_block_with_value(value, &block); end
end

# source://comma//lib/comma/extractor.rb#4
class Comma::Extractor
  # @return [Extractor] a new instance of Extractor
  #
  # source://comma//lib/comma/extractor.rb#5
  def initialize(instance, style, formats); end

  # source://comma//lib/comma/extractor.rb#21
  def __use__(style); end

  # source://comma//lib/comma/extractor.rb#17
  def id(*args, &block); end

  # source://comma//lib/comma/extractor.rb#12
  def results; end

  private

  # source://comma//lib/comma/extractor.rb#28
  def convert_to_data_value(result); end
end

# source://comma//lib/comma/generator.rb#4
class Comma::Generator
  # @return [Generator] a new instance of Generator
  #
  # source://comma//lib/comma/generator.rb#5
  def initialize(instance, style); end

  # source://comma//lib/comma/generator.rb#17
  def run(iterator_method); end

  private

  # source://comma//lib/comma/generator.rb#27
  def append_csv(csv, iterator_method); end
end

# source://comma//lib/comma/header_extractor.rb#10
class Comma::HeaderExtractor < ::Comma::Extractor
  # source://comma//lib/comma/header_extractor.rb#37
  def __static_column__(header = T.unsafe(nil), &_block); end

  # source://comma//lib/comma/header_extractor.rb#18
  def method_missing(sym, *args, &_block); end

  # source://comma//lib/comma/header_extractor.rb#11
  def value_humanizer; end

  # source://comma//lib/comma/header_extractor.rb#11
  def value_humanizer=(_arg0); end

  # source://comma//lib/comma/header_extractor.rb#11
  def value_humanizer?; end

  private

  # source://comma//lib/comma/header_extractor.rb#43
  def get_association_class(model_class, association); end

  class << self
    # source://comma//lib/comma/header_extractor.rb#11
    def value_humanizer; end

    # source://comma//lib/comma/header_extractor.rb#11
    def value_humanizer=(value); end

    # source://comma//lib/comma/header_extractor.rb#11
    def value_humanizer?; end
  end
end

# source://comma//lib/comma/header_extractor.rb#13
Comma::HeaderExtractor::DEFAULT_VALUE_HUMANIZER = T.let(T.unsafe(nil), Proc)

# source://comma//lib/comma/object.rb#6
class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  # source://comma//lib/comma/object.rb#7
  def comma_formats; end

  # source://comma//lib/comma/object.rb#7
  def comma_formats=(_arg0); end

  # source://comma//lib/comma/object.rb#7
  def comma_formats?; end

  # source://comma//lib/comma/object.rb#20
  def to_comma(style = T.unsafe(nil)); end

  # source://comma//lib/comma/object.rb#24
  def to_comma_headers(style = T.unsafe(nil)); end

  private

  # source://comma//lib/comma/object.rb#30
  def extract_with(extractor_class, style = T.unsafe(nil)); end

  # source://comma//lib/comma/object.rb#35
  def raise_unless_style_exists(style); end

  class << self
    # source://comma//lib/comma/object.rb#10
    def comma(style = T.unsafe(nil), &block); end

    # source://comma//lib/comma/object.rb#7
    def comma_formats; end

    # source://comma//lib/comma/object.rb#7
    def comma_formats=(value); end

    # source://comma//lib/comma/object.rb#7
    def comma_formats?; end

    # @private
    #
    # source://comma//lib/comma/object.rb#14
    def inherited(subclass); end
  end
end
