# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday-typhoeus` gem.
# Please instead update this file by running `bin/tapioca gem faraday-typhoeus`.


# source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#6
module Faraday
  class << self
    # source://faraday/2.12.0/lib/faraday.rb#55
    def default_adapter; end

    # source://faraday/2.12.0/lib/faraday.rb#102
    def default_adapter=(adapter); end

    # source://faraday/2.12.0/lib/faraday.rb#59
    def default_adapter_options; end

    # source://faraday/2.12.0/lib/faraday.rb#59
    def default_adapter_options=(_arg0); end

    # source://faraday/2.12.0/lib/faraday.rb#120
    def default_connection; end

    # source://faraday/2.12.0/lib/faraday.rb#62
    def default_connection=(_arg0); end

    # source://faraday/2.12.0/lib/faraday.rb#127
    def default_connection_options; end

    # source://faraday/2.12.0/lib/faraday.rb#134
    def default_connection_options=(options); end

    # source://faraday/2.12.0/lib/faraday.rb#67
    def ignore_env_proxy; end

    # source://faraday/2.12.0/lib/faraday.rb#67
    def ignore_env_proxy=(_arg0); end

    # source://faraday/2.12.0/lib/faraday.rb#46
    def lib_path; end

    # source://faraday/2.12.0/lib/faraday.rb#46
    def lib_path=(_arg0); end

    # source://faraday/2.12.0/lib/faraday.rb#96
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://faraday/2.12.0/lib/faraday.rb#107
    def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end

    # source://faraday/2.12.0/lib/faraday.rb#42
    def root_path; end

    # source://faraday/2.12.0/lib/faraday.rb#42
    def root_path=(_arg0); end

    private

    # source://faraday/2.12.0/lib/faraday.rb#143
    def method_missing(name, *args, &block); end
  end
end

# source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#7
class Faraday::Adapter
  # source://faraday/2.12.0/lib/faraday/adapter.rb#28
  def initialize(_app = T.unsafe(nil), opts = T.unsafe(nil), &block); end

  # source://faraday/2.12.0/lib/faraday/adapter.rb#55
  def call(env); end

  # source://faraday/2.12.0/lib/faraday/adapter.rb#50
  def close; end

  # source://faraday/2.12.0/lib/faraday/adapter.rb#41
  def connection(env); end

  private

  # source://faraday/2.12.0/lib/faraday/adapter.rb#85
  def request_timeout(type, options); end

  # source://faraday/2.12.0/lib/faraday/adapter.rb#62
  def save_response(env, status, body, headers = T.unsafe(nil), reason_phrase = T.unsafe(nil), finished: T.unsafe(nil)); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end
  end
end

# source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#8
class Faraday::Adapter::Typhoeus < ::Faraday::Adapter
  # @param env [Faraday::Env] the environment of the request being processed
  #
  # source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#26
  def call(env); end

  private

  # source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#144
  def configure_proxy(req, env); end

  # source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#162
  def configure_socket(req, env); end

  # source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#127
  def configure_ssl(req, env); end

  # source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#156
  def configure_timeout(req, env); end

  # @return [Boolean]
  #
  # source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#168
  def parallel?(env); end

  # source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#44
  def perform_request(env); end

  # source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#123
  def read_body(env); end

  # source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#52
  def request(env); end

  # source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#111
  def typhoeus_request(env); end

  class << self
    # source://comma/4.7.0/lib/comma/object.rb#7
    def comma_formats; end

    # Setup Hydra with provided options.
    #
    # @example Setup Hydra.
    #   Faraday::Adapter::Typhoeus.setup_parallel_manager
    #   #=> #<Typhoeus::Hydra ... >
    # @return [Typhoeus::Hydra] The hydra.
    #
    # source://faraday-typhoeus//lib/faraday/adapter/typhoeus.rb#21
    def setup_parallel_manager(options = T.unsafe(nil)); end
  end
end

# Main Faraday::Typhoeus adapter namespace
#
# source://faraday-typhoeus//lib/faraday/typhoeus/version.rb#4
module Faraday::Typhoeus; end

# source://faraday-typhoeus//lib/faraday/typhoeus/version.rb#5
Faraday::Typhoeus::VERSION = T.let(T.unsafe(nil), String)
