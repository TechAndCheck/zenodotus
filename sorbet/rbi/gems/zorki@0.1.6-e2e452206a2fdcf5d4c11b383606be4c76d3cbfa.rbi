# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `zorki` gem.
# Please instead update this file by running `bin/tapioca gem zorki`.


# Borrowed with thanks from https://www.viget.com/articles/easy-gem-configuration-variables-with-defaults/
#
# source://zorki//lib/helpers/configuration.rb#4
module Configuration
  # @yield [_self]
  # @yieldparam _self [Configuration] the object that the method was called on
  #
  # source://zorki//lib/helpers/configuration.rb#5
  def configuration; end

  # source://zorki//lib/helpers/configuration.rb#9
  def define_setting(name, default = T.unsafe(nil)); end

  private

  # source://zorki//lib/helpers/configuration.rb#23
  def define_class_method(name, &block); end
end

# Design taken from https://blog.appsignal.com/2021/08/24/responsible-monkeypatching-in-ruby.html
#
# source://zorki//lib/zorki/monkeypatch.rb#6
module SeleniumMonkeypatch
  class << self
    # source://birdsong/0.2.3-ad77687eedbc97b02ff3dab3703187f3f76bc69a/lib/birdsong/monkeypatch.rb#11
    def apply_patch; end

    private

    # source://birdsong/0.2.3-ad77687eedbc97b02ff3dab3703187f3f76bc69a/lib/birdsong/monkeypatch.rb#25
    def find_class; end

    # source://birdsong/0.2.3-ad77687eedbc97b02ff3dab3703187f3f76bc69a/lib/birdsong/monkeypatch.rb#30
    def find_method(class_); end
  end
end

# source://zorki//lib/zorki/monkeypatch.rb#37
module SeleniumMonkeypatch::InstanceMethods
  # We're monkeypatching the following method so that Selenium doesn't raise errors when we fail to call `continue` on requests
  #
  # source://birdsong/0.2.3-ad77687eedbc97b02ff3dab3703187f3f76bc69a/lib/birdsong/monkeypatch.rb#39
  def send_cmd(method, **params); end
end

# source://zorki//lib/zorki/version.rb#3
module Zorki
  extend ::Configuration

  class << self
    # source://zorki//lib/zorki.rb#70
    def create_temp_storage_location; end

    # Get an image from a URL and save to a temp folder set in the configuration under
    # temp_storage_location
    #
    # source://zorki//lib/zorki.rb#46
    def retrieve_media(url); end

    # source://zorki//lib/helpers/configuration.rb#16
    def temp_storage_location; end

    # source://zorki//lib/helpers/configuration.rb#12
    def temp_storage_location=(value); end
  end
end

# source://zorki//lib/zorki.rb#22
class Zorki::ContentUnavailableError < ::Zorki::Error
  # @return [ContentUnavailableError] a new instance of ContentUnavailableError
  #
  # source://zorki//lib/zorki.rb#23
  def initialize(msg = T.unsafe(nil)); end
end

# source://zorki//lib/zorki.rb#16
class Zorki::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://zorki//lib/zorki.rb#17
  def initialize(msg = T.unsafe(nil)); end
end

# source://zorki//lib/zorki.rb#36
class Zorki::ImageRequestFailedError < ::Zorki::RetryableError
  # @return [ImageRequestFailedError] a new instance of ImageRequestFailedError
  #
  # source://zorki//lib/zorki.rb#37
  def initialize(msg = T.unsafe(nil)); end
end

# source://zorki//lib/zorki.rb#30
class Zorki::ImageRequestTimedOutError < ::Zorki::RetryableError
  # @return [ImageRequestTimedOutError] a new instance of ImageRequestTimedOutError
  #
  # source://zorki//lib/zorki.rb#31
  def initialize(msg = T.unsafe(nil)); end
end

# source://zorki//lib/zorki/post.rb#4
class Zorki::Post
  # @return [Post] a new instance of Post
  #
  # source://zorki//lib/zorki/post.rb#23
  def initialize(post_hash = T.unsafe(nil)); end

  # Returns the value of attribute date.
  #
  # source://zorki//lib/zorki/post.rb#11
  def date; end

  # Returns the value of attribute id.
  #
  # source://zorki//lib/zorki/post.rb#11
  def id; end

  # Returns the value of attribute image_file_names.
  #
  # source://zorki//lib/zorki/post.rb#11
  def image_file_names; end

  # Returns the value of attribute number_of_likes.
  #
  # source://zorki//lib/zorki/post.rb#11
  def number_of_likes; end

  # Returns the value of attribute screenshot_file.
  #
  # source://zorki//lib/zorki/post.rb#11
  def screenshot_file; end

  # Returns the value of attribute text.
  #
  # source://zorki//lib/zorki/post.rb#11
  def text; end

  # Returns the value of attribute user.
  #
  # source://zorki//lib/zorki/post.rb#11
  def user; end

  # Returns the value of attribute video_file_name.
  #
  # source://zorki//lib/zorki/post.rb#11
  def video_file_name; end

  # Returns the value of attribute video_preview_image.
  #
  # source://zorki//lib/zorki/post.rb#11
  def video_preview_image; end

  class << self
    # source://zorki//lib/zorki/post.rb#5
    def lookup(ids = T.unsafe(nil)); end

    private

    # source://zorki//lib/zorki/post.rb#38
    def scrape(ids); end
  end
end

# source://zorki//lib/zorki/scrapers/post_scraper.rb#6
class Zorki::PostScraper < ::Zorki::Scraper
  # source://zorki//lib/zorki/scrapers/post_scraper.rb#7
  def parse(id); end

  # source://zorki//lib/zorki/scrapers/post_scraper.rb#115
  def take_screenshot; end
end

# source://zorki//lib/zorki.rb#28
class Zorki::RetryableError < ::Zorki::Error; end

# source://zorki//lib/zorki/scrapers/scraper.rb#36
class Zorki::Scraper
  include ::Capybara::DSL

  # @return [Scraper] a new instance of Scraper
  #
  # source://zorki//lib/zorki/scrapers/scraper.rb#44
  def initialize; end

  # Instagram uses GraphQL (like most of Facebook I think), and returns an object that actually
  # is used to seed the page. We can just parse this for most things.
  #
  # additional_search_params is a comma seperated keys
  # example: `data,xdt_api__v1__media__shortcode__web_info,items`
  #
  # @raise [ContentUnavailableError]
  #
  # source://zorki//lib/zorki/scrapers/scraper.rb#55
  def get_content_of_subpage_from_url(url, subpage_search, additional_search_parameters = T.unsafe(nil)); end

  private

  # source://zorki//lib/zorki/scrapers/scraper.rb#212
  def fetch_image(url); end

  # source://zorki//lib/zorki/scrapers/scraper.rb#168
  def login; end

  # Convert a string to an integer
  #
  # source://zorki//lib/zorki/scrapers/scraper.rb#226
  def number_string_to_integer(number_string); end

  # Set the session to use a new user folder in the options!
  # #####################
  #
  # source://zorki//lib/zorki/scrapers/scraper.rb#145
  def reset_selenium; end
end

# source://zorki//lib/zorki/user.rb#4
class Zorki::User
  # @return [User] a new instance of User
  #
  # source://zorki//lib/zorki/user.rb#28
  def initialize(user_hash = T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://zorki//lib/zorki/user.rb#15
  def name; end

  # Returns the value of attribute number_of_followers.
  #
  # source://zorki//lib/zorki/user.rb#15
  def number_of_followers; end

  # Returns the value of attribute number_of_following.
  #
  # source://zorki//lib/zorki/user.rb#15
  def number_of_following; end

  # Returns the value of attribute number_of_posts.
  #
  # source://zorki//lib/zorki/user.rb#15
  def number_of_posts; end

  # Returns the value of attribute profile.
  #
  # source://zorki//lib/zorki/user.rb#15
  def profile; end

  # Returns the value of attribute profile_image.
  #
  # source://zorki//lib/zorki/user.rb#15
  def profile_image; end

  # Returns the value of attribute profile_image_url.
  #
  # source://zorki//lib/zorki/user.rb#15
  def profile_image_url; end

  # Returns the value of attribute profile_link.
  #
  # source://zorki//lib/zorki/user.rb#15
  def profile_link; end

  # Returns the value of attribute username.
  #
  # source://zorki//lib/zorki/user.rb#15
  def username; end

  # Returns the value of attribute verified.
  #
  # source://zorki//lib/zorki/user.rb#15
  def verified; end

  class << self
    # source://zorki//lib/zorki/user.rb#5
    def lookup(usernames = T.unsafe(nil)); end

    private

    # source://zorki//lib/zorki/user.rb#44
    def scrape(usernames); end
  end
end

# source://zorki//lib/zorki/scrapers/user_scraper.rb#6
class Zorki::UserScraper < ::Zorki::Scraper
  # source://zorki//lib/zorki/scrapers/user_scraper.rb#7
  def parse(username); end
end

# source://zorki//lib/zorki/version.rb#4
Zorki::VERSION = T.let(T.unsafe(nil), String)
