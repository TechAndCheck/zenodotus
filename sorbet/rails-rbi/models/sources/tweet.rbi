# This is an autogenerated file for dynamic methods in Sources::Tweet
# Please rerun bundle exec rake rails_rbi:models[Sources::Tweet] to regenerate.

# typed: strong
module Sources::Tweet::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Sources::Tweet::GeneratedAttributeMethods
  sig { returns(String) }
  def author_id; end

  sig { params(value: T.any(String, Symbol)).void }
  def author_id=(value); end

  sig { returns(T::Boolean) }
  def author_id?; end

  sig { returns(String) }
  def id; end

  sig { params(value: T.any(String, Symbol)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(String) }
  def language; end

  sig { params(value: T.any(String, Symbol)).void }
  def language=(value); end

  sig { returns(T::Boolean) }
  def language?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def posted_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def posted_at=(value); end

  sig { returns(T::Boolean) }
  def posted_at?; end

  sig { returns(String) }
  def text; end

  sig { params(value: T.any(String, Symbol)).void }
  def text=(value); end

  sig { returns(T::Boolean) }
  def text?; end

  sig { returns(String) }
  def twitter_id; end

  sig { params(value: T.any(String, Symbol)).void }
  def twitter_id=(value); end

  sig { returns(T::Boolean) }
  def twitter_id?; end
end

module Sources::Tweet::GeneratedAssociationMethods
  sig { returns(T.nilable(::ArchiveItem)) }
  def archive_item; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ArchiveItem).void)).returns(::ArchiveItem) }
  def build_archive_item(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ArchiveItem).void)).returns(::ArchiveItem) }
  def create_archive_item(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ArchiveItem).void)).returns(::ArchiveItem) }
  def create_archive_item!(*args, &block); end

  sig { params(value: T.nilable(::ArchiveItem)).void }
  def archive_item=(value); end

  sig { returns(T.nilable(::ArchiveItem)) }
  def reload_archive_item; end

  sig { returns(::Sources::TwitterUser) }
  def author; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Sources::TwitterUser).void)).returns(::Sources::TwitterUser) }
  def build_author(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Sources::TwitterUser).void)).returns(::Sources::TwitterUser) }
  def create_author(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Sources::TwitterUser).void)).returns(::Sources::TwitterUser) }
  def create_author!(*args, &block); end

  sig { params(value: ::Sources::TwitterUser).void }
  def author=(value); end

  sig { returns(::Sources::TwitterUser) }
  def reload_author; end

  sig { returns(::MediaModels::Images::TwitterImage::ActiveRecord_Associations_CollectionProxy) }
  def images; end

  sig { returns(T::Array[String]) }
  def image_ids; end

  sig { params(value: T::Enumerable[::MediaModels::Images::TwitterImage]).void }
  def images=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def pg_search_document; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def build_pg_search_document(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def create_pg_search_document(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def create_pg_search_document!(*args, &block); end

  sig { params(value: T.nilable(T.untyped)).void }
  def pg_search_document=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def reload_pg_search_document; end

  sig { returns(::MediaModels::Videos::TwitterVideo::ActiveRecord_Associations_CollectionProxy) }
  def videos; end

  sig { returns(T::Array[String]) }
  def video_ids; end

  sig { params(value: T::Enumerable[::MediaModels::Videos::TwitterVideo]).void }
  def videos=(value); end
end

module Sources::Tweet::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Sources::Tweet]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Sources::Tweet]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Sources::Tweet]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Sources::Tweet)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Sources::Tweet) }
  def find_by_id!(id); end
end

class Sources::Tweet < ApplicationRecord
  include Sources::Tweet::GeneratedAttributeMethods
  include Sources::Tweet::GeneratedAssociationMethods
  extend Sources::Tweet::CustomFinderMethods
  extend Sources::Tweet::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Sources::Tweet::ActiveRecord_Relation, Sources::Tweet::ActiveRecord_Associations_CollectionProxy, Sources::Tweet::ActiveRecord_AssociationRelation) }
end

module Sources::Tweet::QueryMethodsReturningRelation
  sig { returns(Sources::Tweet::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Sources::Tweet::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Sources::Tweet).returns(T::Boolean)).returns(T::Array[Sources::Tweet]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Sources::Tweet::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Sources::Tweet::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Sources::Tweet::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Sources::Tweet::QueryMethodsReturningAssociationRelation
  sig { returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Sources::Tweet::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Sources::Tweet).returns(T::Boolean)).returns(T::Array[Sources::Tweet]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Sources::Tweet::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Sources::Tweet::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

class Sources::Tweet::ActiveRecord_Relation < ActiveRecord::Relation
  include Sources::Tweet::ActiveRelation_WhereNot
  include Sources::Tweet::CustomFinderMethods
  include Sources::Tweet::QueryMethodsReturningRelation
  Elem = type_member(fixed: Sources::Tweet)
end

class Sources::Tweet::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Sources::Tweet::ActiveRelation_WhereNot
  include Sources::Tweet::CustomFinderMethods
  include Sources::Tweet::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Sources::Tweet)
end

class Sources::Tweet::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Sources::Tweet::CustomFinderMethods
  include Sources::Tweet::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Sources::Tweet)

  sig { params(records: T.any(Sources::Tweet, T::Array[Sources::Tweet])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Sources::Tweet, T::Array[Sources::Tweet])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Sources::Tweet, T::Array[Sources::Tweet])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Sources::Tweet, T::Array[Sources::Tweet])).returns(T.self_type) }
  def concat(*records); end
end
