# This is an autogenerated file for dynamic methods in Sources::TwitterUser
# Please rerun bundle exec rake rails_rbi:models[Sources::TwitterUser] to regenerate.

# typed: strong
module Sources::TwitterUser::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Sources::TwitterUser::GeneratedAttributeMethods
  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(String) }
  def description; end

  sig { params(value: T.any(String, Symbol)).void }
  def description=(value); end

  sig { returns(T::Boolean) }
  def description?; end

  sig { returns(String) }
  def display_name; end

  sig { params(value: T.any(String, Symbol)).void }
  def display_name=(value); end

  sig { returns(T::Boolean) }
  def display_name?; end

  sig { returns(Integer) }
  def followers_count; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def followers_count=(value); end

  sig { returns(T::Boolean) }
  def followers_count?; end

  sig { returns(Integer) }
  def following_count; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def following_count=(value); end

  sig { returns(T::Boolean) }
  def following_count?; end

  sig { returns(String) }
  def handle; end

  sig { params(value: T.any(String, Symbol)).void }
  def handle=(value); end

  sig { returns(T::Boolean) }
  def handle?; end

  sig { returns(String) }
  def id; end

  sig { params(value: T.any(String, Symbol)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(String)) }
  def location; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def location=(value); end

  sig { returns(T::Boolean) }
  def location?; end

  sig { returns(T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))) }
  def profile_image_data; end

  sig { params(value: T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))).void }
  def profile_image_data=(value); end

  sig { returns(T::Boolean) }
  def profile_image_data?; end

  sig { returns(String) }
  def profile_image_url; end

  sig { params(value: T.any(String, Symbol)).void }
  def profile_image_url=(value); end

  sig { returns(T::Boolean) }
  def profile_image_url?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def sign_up_date; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def sign_up_date=(value); end

  sig { returns(T::Boolean) }
  def sign_up_date?; end

  sig { returns(String) }
  def twitter_id; end

  sig { params(value: T.any(String, Symbol)).void }
  def twitter_id=(value); end

  sig { returns(T::Boolean) }
  def twitter_id?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(String) }
  def url; end

  sig { params(value: T.any(String, Symbol)).void }
  def url=(value); end

  sig { returns(T::Boolean) }
  def url?; end
end

module Sources::TwitterUser::GeneratedAssociationMethods
  sig { returns(T.nilable(::ArchiveEntity)) }
  def archive_entity; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ArchiveEntity).void)).returns(::ArchiveEntity) }
  def build_archive_entity(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ArchiveEntity).void)).returns(::ArchiveEntity) }
  def create_archive_entity(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ArchiveEntity).void)).returns(::ArchiveEntity) }
  def create_archive_entity!(*args, &block); end

  sig { params(value: T.nilable(::ArchiveEntity)).void }
  def archive_entity=(value); end

  sig { returns(T.nilable(::ArchiveEntity)) }
  def reload_archive_entity; end

  sig { returns(T.nilable(T.untyped)) }
  def pg_search_document; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def build_pg_search_document(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def create_pg_search_document(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def create_pg_search_document!(*args, &block); end

  sig { params(value: T.nilable(T.untyped)).void }
  def pg_search_document=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def reload_pg_search_document; end

  sig { returns(::Sources::Tweet::ActiveRecord_Associations_CollectionProxy) }
  def tweets; end

  sig { returns(T::Array[String]) }
  def tweet_ids; end

  sig { params(value: T::Enumerable[::Sources::Tweet]).void }
  def tweets=(value); end
end

module Sources::TwitterUser::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Sources::TwitterUser]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Sources::TwitterUser]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Sources::TwitterUser]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Sources::TwitterUser)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Sources::TwitterUser) }
  def find_by_id!(id); end
end

class Sources::TwitterUser < ApplicationRecord
  include Sources::TwitterUser::GeneratedAttributeMethods
  include Sources::TwitterUser::GeneratedAssociationMethods
  extend Sources::TwitterUser::CustomFinderMethods
  extend Sources::TwitterUser::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Sources::TwitterUser::ActiveRecord_Relation, Sources::TwitterUser::ActiveRecord_Associations_CollectionProxy, Sources::TwitterUser::ActiveRecord_AssociationRelation) }
end

module Sources::TwitterUser::QueryMethodsReturningRelation
  sig { returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Sources::TwitterUser).returns(T::Boolean)).returns(T::Array[Sources::TwitterUser]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Sources::TwitterUser::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Sources::TwitterUser::QueryMethodsReturningAssociationRelation
  sig { returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Sources::TwitterUser::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Sources::TwitterUser).returns(T::Boolean)).returns(T::Array[Sources::TwitterUser]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Sources::TwitterUser::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Sources::TwitterUser::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

class Sources::TwitterUser::ActiveRecord_Relation < ActiveRecord::Relation
  include Sources::TwitterUser::ActiveRelation_WhereNot
  include Sources::TwitterUser::CustomFinderMethods
  include Sources::TwitterUser::QueryMethodsReturningRelation
  Elem = type_member(fixed: Sources::TwitterUser)
end

class Sources::TwitterUser::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Sources::TwitterUser::ActiveRelation_WhereNot
  include Sources::TwitterUser::CustomFinderMethods
  include Sources::TwitterUser::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Sources::TwitterUser)
end

class Sources::TwitterUser::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Sources::TwitterUser::CustomFinderMethods
  include Sources::TwitterUser::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Sources::TwitterUser)

  sig { params(records: T.any(Sources::TwitterUser, T::Array[Sources::TwitterUser])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Sources::TwitterUser, T::Array[Sources::TwitterUser])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Sources::TwitterUser, T::Array[Sources::TwitterUser])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Sources::TwitterUser, T::Array[Sources::TwitterUser])).returns(T.self_type) }
  def concat(*records); end
end
